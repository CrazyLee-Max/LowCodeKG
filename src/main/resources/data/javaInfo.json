[
    {
        "id": 534,
        "fullName": "com.aurora.consumer.MaxWellConsumer",
        "comment": "",
        "content": "@Component\n@RabbitListener(queues = MAXWELL_QUEUE)\npublic class MaxWellConsumer {\n\n    @Autowired\n    private ElasticsearchMapper elasticsearchMapper;\n\n    @RabbitHandler\n    public void process(byte[] data) {\n        MaxwellDataDTO maxwellDataDTO = JSON.parseObject(new String(data), MaxwellDataDTO.class);\n        Article article = JSON.parseObject(JSON.toJSONString(maxwellDataDTO.getData()), Article.class);\n        switch (maxwellDataDTO.getType()) {\n            case \"insert\":\n            case \"update\":\n                elasticsearchMapper.save(BeanCopyUtil.copyObject(article, ArticleSearchDTO.class));\n                break;\n            case \"delete\":\n                elasticsearchMapper.deleteById(article.getId());\n                break;\n            default:\n                break;\n        }\n    }\n}",
        "description": "这段代码是一个使用RabbitMQ监听消息队列的后端组件，根据接收到的消息类型（insert、update、delete），将数据保存到Elasticsearch中或者从Elasticsearch中删除数据。",
        "label": "JavaClass"
    },
    {
        "id": 535,
        "fullName": "com.aurora.service.impl.MenuServiceImpl",
        "comment": "",
        "content": "@Service\npublic class MenuServiceImpl extends ServiceImpl<MenuMapper, Menu> implements MenuService {\n\n    @Autowired\n    private MenuMapper menuMapper;\n\n    @Autowired\n    private RoleMenuMapper roleMenuMapper;\n\n    @Override\n    public List<MenuDTO> listMenus(ConditionVO conditionVO) {\n        List<Menu> menus = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Menu::getName, conditionVO.getKeywords()));\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        List<MenuDTO> menuDTOs = catalogs.stream().map(item -> {\n            MenuDTO menuDTO = BeanCopyUtil.copyObject(item, MenuDTO.class);\n            List<MenuDTO> list = BeanCopyUtil.copyList(childrenMap.get(item.getId()), MenuDTO.class).stream()\n                    .sorted(Comparator.comparing(MenuDTO::getOrderNum))\n                    .collect(Collectors.toList());\n            menuDTO.setChildren(list);\n            childrenMap.remove(item.getId());\n            return menuDTO;\n        }).sorted(Comparator.comparing(MenuDTO::getOrderNum)).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(childrenMap)) {\n            List<Menu> childrenList = new ArrayList<>();\n            childrenMap.values().forEach(childrenList::addAll);\n            List<MenuDTO> childrenDTOList = childrenList.stream()\n                    .map(item -> BeanCopyUtil.copyObject(item, MenuDTO.class))\n                    .sorted(Comparator.comparing(MenuDTO::getOrderNum))\n                    .collect(Collectors.toList());\n            menuDTOs.addAll(childrenDTOList);\n        }\n        return menuDTOs;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdateMenu(MenuVO menuVO) {\n        Menu menu = BeanCopyUtil.copyObject(menuVO, Menu.class);\n        this.saveOrUpdate(menu);\n    }\n\n    @Override\n    public void updateMenuIsHidden(IsHiddenVO isHiddenVO) {\n        Menu menu = BeanCopyUtil.copyObject(isHiddenVO, Menu.class);\n        menuMapper.updateById(menu);\n    }\n\n    @Override\n    public void deleteMenu(Integer menuId) {\n        Integer count = roleMenuMapper.selectCount(new LambdaQueryWrapper<RoleMenu>()\n                .eq(RoleMenu::getMenuId, menuId));\n        if (count > 0) {\n            throw new BizException(\"菜单下有角色关联\");\n        }\n        List<Integer> menuIds = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                        .select(Menu::getId)\n                        .eq(Menu::getParentId, menuId))\n                .stream()\n                .map(Menu::getId)\n                .collect(Collectors.toList());\n        menuIds.add(menuId);\n        menuMapper.deleteBatchIds(menuIds);\n    }\n\n    @Override\n    public List<LabelOptionDTO> listMenuOptions() {\n        List<Menu> menus = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                .select(Menu::getId, Menu::getName, Menu::getParentId, Menu::getOrderNum));\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        return catalogs.stream().map(item -> {\n            List<LabelOptionDTO> list = new ArrayList<>();\n            List<Menu> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                list = children.stream()\n                        .sorted(Comparator.comparing(Menu::getOrderNum))\n                        .map(menu -> LabelOptionDTO.builder()\n                                .id(menu.getId())\n                                .label(menu.getName())\n                                .build())\n                        .collect(Collectors.toList());\n            }\n            return LabelOptionDTO.builder()\n                    .id(item.getId())\n                    .label(item.getName())\n                    .children(list)\n                    .build();\n        }).collect(Collectors.toList());\n    }\n\n    @Override\n    public List<UserMenuDTO> listUserMenus() {\n        List<Menu> menus = menuMapper.listMenusByUserInfoId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        return convertUserMenuList(catalogs, childrenMap);\n    }\n\n    private List<Menu> listCatalogs(List<Menu> menus) {\n        return menus.stream()\n                .filter(item -> Objects.isNull(item.getParentId()))\n                .sorted(Comparator.comparing(Menu::getOrderNum))\n                .collect(Collectors.toList());\n    }\n\n    private Map<Integer, List<Menu>> getMenuMap(List<Menu> menus) {\n        return menus.stream()\n                .filter(item -> Objects.nonNull(item.getParentId()))\n                .collect(Collectors.groupingBy(Menu::getParentId));\n    }\n\n    private List<UserMenuDTO> convertUserMenuList(List<Menu> catalogList, Map<Integer, List<Menu>> childrenMap) {\n        return catalogList.stream().map(item -> {\n            UserMenuDTO userMenuDTO = new UserMenuDTO();\n            List<UserMenuDTO> list = new ArrayList<>();\n            List<Menu> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                userMenuDTO = BeanCopyUtil.copyObject(item, UserMenuDTO.class);\n                list = children.stream()\n                        .sorted(Comparator.comparing(Menu::getOrderNum))\n                        .map(menu -> {\n                            UserMenuDTO dto = BeanCopyUtil.copyObject(menu, UserMenuDTO.class);\n                            dto.setHidden(menu.getIsHidden().equals(TRUE));\n                            return dto;\n                        })\n                        .collect(Collectors.toList());\n            } else {\n                userMenuDTO.setPath(item.getPath());\n                userMenuDTO.setComponent(COMPONENT);\n                list.add(UserMenuDTO.builder()\n                        .path(\"\")\n                        .name(item.getName())\n                        .icon(item.getIcon())\n                        .component(item.getComponent())\n                        .build());\n            }\n            userMenuDTO.setHidden(item.getIsHidden().equals(TRUE));\n            userMenuDTO.setChildren(list);\n            return userMenuDTO;\n        }).collect(Collectors.toList());\n    }\n\n}",
        "description": "这段代码实现了一个菜单服务类，包括菜单列表查询、菜单保存或更新、菜单隐藏状态更新、菜单删除、菜单选项列表查询以及用户菜单列表查询等功能。同时，还包括了一些私有方法用于处理菜单数据。",
        "label": "JavaClass"
    },
    {
        "id": 536,
        "fullName": "com.aurora.model.dto.TopAndFeaturedArticlesDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TopAndFeaturedArticlesDTO {\n\n    private ArticleCardDTO topArticle;\n\n    private List<ArticleCardDTO> featuredArticles;\n}",
        "description": "这段代码定义了一个包含顶部文章和特色文章列表的数据传输对象。使用了Lombok注解@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor来简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 537,
        "fullName": "com.aurora.constant.OptTypeConstant",
        "comment": "",
        "content": "public interface OptTypeConstant {\n\n    String SAVE_OR_UPDATE = \"新增或修改\";\n\n    String SAVE = \"新增\";\n\n    String UPDATE = \"修改\";\n\n    String DELETE = \"删除\";\n\n    String UPLOAD = \"上传\";\n\n    String EXPORT = \"导出\";\n\n}",
        "description": "这段代码定义了操作类型常量接口，包括保存\/更新、保存、更新、删除、上传和导出操作。",
        "label": "JavaClass"
    },
    {
        "id": 538,
        "fullName": "com.aurora.strategy.context.UploadStrategyContext",
        "comment": "",
        "content": "@Service\npublic class UploadStrategyContext {\n\n    @Value(\"${upload.mode}\")\n    private String uploadMode;\n\n    @Autowired\n    private Map<String, UploadStrategy> uploadStrategyMap;\n\n    public String executeUploadStrategy(MultipartFile file, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\n    }\n\n    public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\n    }\n\n}",
        "description": "这段代码是一个上传策略上下文类，根据配置的上传模式选择相应的上传策略来执行文件上传操作。通过传入文件或文件流等参数，调用对应的上传策略的方法来实现文件上传功能。",
        "label": "JavaClass"
    },
    {
        "id": 539,
        "fullName": "com.aurora.model.dto.ArticleCardDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArticleCardDTO {\n\n    private Integer id;\n\n    private String articleCover;\n\n    private String articleTitle;\n\n    private String articleContent;\n\n    private Integer isTop;\n\n    private Integer isFeatured;\n\n    private UserInfo author;\n\n    private String categoryName;\n\n    private List<Tag> tags;\n\n    private Integer status;\n\n    private LocalDateTime createTime;\n\n    private LocalDateTime updateTime;\n\n}",
        "description": "这是一个用于表示博客系统中文章卡片信息的DTO类，包含文章的各种属性以及作者信息、分类、标签等内容。",
        "label": "JavaClass"
    },
    {
        "id": 540,
        "fullName": "com.aurora.controller.AuroraInfoController",
        "comment": "",
        "content": "@Api(tags = \"aurora信息\")\n@RestController\npublic class AuroraInfoController {\n\n    @Autowired\n    private AuroraInfoService auroraInfoService;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @ApiOperation(value = \"上报访客信息\")\n    @PostMapping(\"\/report\")\n    public ResultVO<?> report() {\n        auroraInfoService.report();\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"获取系统信息\")\n    @GetMapping(\"\/\")\n    public ResultVO<AuroraHomeInfoDTO> getBlogHomeInfo() {\n        return ResultVO.ok(auroraInfoService.getAuroraHomeInfo());\n    }\n\n    @ApiOperation(value = \"获取系统后台信息\")\n    @GetMapping(\"\/admin\")\n    public ResultVO<AuroraAdminInfoDTO> getBlogBackInfo() {\n        return ResultVO.ok(auroraInfoService.getAuroraAdminInfo());\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新网站配置\")\n    @PutMapping(\"\/admin\/website\/config\")\n    public ResultVO<?> updateWebsiteConfig(@Valid @RequestBody WebsiteConfigVO websiteConfigVO) {\n        auroraInfoService.updateWebsiteConfig(websiteConfigVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"获取网站配置\")\n    @GetMapping(\"\/admin\/website\/config\")\n    public ResultVO<WebsiteConfigDTO> getWebsiteConfig() {\n        return ResultVO.ok(auroraInfoService.getWebsiteConfig());\n    }\n\n    @ApiOperation(value = \"查看关于我信息\")\n    @GetMapping(\"\/about\")\n    public ResultVO<AboutDTO> getAbout() {\n        return ResultVO.ok(auroraInfoService.getAbout());\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改关于我信息\")\n    @PutMapping(\"\/admin\/about\")\n    public ResultVO<?> updateAbout(@Valid @RequestBody AboutVO aboutVO) {\n        auroraInfoService.updateAbout(aboutVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传博客配置图片\")\n    @ApiImplicitParam(name = \"file\", value = \"图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/config\/images\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.CONFIG.getPath()));\n    }\n\n}",
        "description": "这段代码是一个处理关于博客系统后台信息的控制器，包括上报访客信息、获取系统信息、更新网站配置、获取网站配置、查看关于我信息、修改关于我信息和上传博客配置图片的功能。同时使用了Swagger的注解对接口进行描述。",
        "label": "JavaClass"
    },
    {
        "id": 541,
        "fullName": "com.aurora.handler.AuthenticationEntryPointImpl",
        "comment": "",
        "content": "@Component\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint {\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.fail(40001, \"用户未登录\")));\n    }\n}",
        "description": "这段代码是一个用于处理用户未登录情况的认证入口点实现类，当用户未登录时会返回一个包含错误信息的JSON对象。",
        "label": "JavaClass"
    },
    {
        "id": 542,
        "fullName": "com.aurora.entity.About",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_about\")\npublic class About {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String content;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个关于页面的实体类About，包含id、content、createTime和updateTime字段，并使用了Lombok的注解简化代码编写。@TableId注解指定了id字段为自增主键，@TableField注解指定了createTime和updateTime字段在插入和更新时自动填充时间。@TableNam注解指定了表名为\"t_about\"。",
        "label": "JavaClass"
    },
    {
        "id": 543,
        "fullName": "com.aurora.model.dto.AboutDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AboutDTO {\n\n    private String Content;\n\n}",
        "description": "这段代码定义了一个关于页面的数据传输对象（DTO），包含内容字段，并使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 544,
        "fullName": "com.aurora.config.properties.OssConfigProperties",
        "comment": "",
        "content": "@Data\n@Configuration\n@ConfigurationProperties(prefix = \"upload.oss\")\npublic class OssConfigProperties {\n\n    private String url;\n\n    private String endpoint;\n\n    private String accessKeyId;\n\n    private String accessKeySecret;\n\n    private String bucketName;\n\n}",
        "description": "这段代码定义了一个配置类OssConfigProperties，用于存储与上传文件到OSS相关的配置信息，包括URL、endpoint、AccessKeyId、AccessKeySecret和bucketName。",
        "label": "JavaClass"
    },
    {
        "id": 545,
        "fullName": "com.aurora.service.TagService",
        "comment": "",
        "content": "public interface TagService extends IService<Tag> {\n\n    List<TagDTO> listTags();\n\n    List<TagDTO> listTopTenTags();\n\n    PageResultDTO<TagAdminDTO> listTagsAdmin(ConditionVO conditionVO);\n\n    List<TagAdminDTO> listTagsAdminBySearch(ConditionVO conditionVO);\n\n    void saveOrUpdateTag(TagVO tagVO);\n\n    void deleteTag(List<Integer> tagIds);\n\n}",
        "description": "TagService interface defines methods for managing tags in a blog system, including listing tags, listing top ten tags, listing tags for admin, searching tags for admin, saving or updating tags, and deleting tags.",
        "label": "JavaClass"
    },
    {
        "id": 546,
        "fullName": "com.aurora.model.dto.JobDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobDTO {\n\n    private Integer id;\n\n    private String jobName;\n\n    private String jobGroup;\n\n    private String invokeTarget;\n\n    private String cronExpression;\n\n    private Integer misfirePolicy;\n\n    private Integer concurrent;\n\n    private Integer status;\n\n    private LocalDateTime createTime;\n\n    private String remark;\n\n    private Date nextValidTime;\n\n}",
        "description": "这段代码定义了一个名为JobDTO的数据传输对象，该对象包含了一系列与工作任务相关的属性，如ID、任务名称、任务组、调用目标、Cron表达式等。同时，该对象还包含了一些辅助属性，如创建时间、备注和下一个有效时间等。该对象使用了Lombok的注解来简化代码的编写。",
        "label": "JavaClass"
    },
    {
        "id": 547,
        "fullName": "com.aurora.model.vo.QQLoginVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"qq登录信息\")\npublic class QQLoginVO {\n\n    @NotBlank(message = \"openId不能为空\")\n    @ApiModelProperty(name = \"openId\", value = \"qq openId\", required = true, dataType = \"String\")\n    private String openId;\n\n    @NotBlank(message = \"accessToken不能为空\")\n    @ApiModelProperty(name = \"accessToken\", value = \"qq accessToken\", required = true, dataType = \"String\")\n    private String accessToken;\n\n}",
        "description": "一个用于存储QQ登录信息的值对象，包含openId和accessToken字段。",
        "label": "JavaClass"
    },
    {
        "id": 548,
        "fullName": "com.aurora.model.dto.ResourceRoleDTO",
        "comment": "",
        "content": "@Data\npublic class ResourceRoleDTO {\n\n    private Integer id;\n\n    private String url;\n\n    private String requestMethod;\n\n    private List<String> roleList;\n\n}",
        "description": "ResourceRoleDTO is a data transfer object class representing resources with their associated roles in a blog system.",
        "label": "JavaClass"
    },
    {
        "id": 549,
        "fullName": "com.aurora.event.ExceptionLogEvent",
        "comment": "",
        "content": "public class ExceptionLogEvent extends ApplicationEvent {\n    public ExceptionLogEvent(ExceptionLog exceptionLog) {\n        super(exceptionLog);\n    }\n}",
        "description": "这段代码定义了一个异常日志事件类，继承自ApplicationEvent类。它接收一个异常日志对象作为参数，并将其传递给父类的构造函数。",
        "label": "JavaClass"
    },
    {
        "id": 550,
        "fullName": "com.aurora.model.dto.AuroraHomeInfoDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AuroraHomeInfoDTO {\n\n    private Integer articleCount;\n\n    private Integer talkCount;\n\n    private Integer categoryCount;\n\n    private Integer tagCount;\n\n    private WebsiteConfigDTO websiteConfigDTO;\n\n    private Integer viewCount;\n\n}",
        "description": "AuroraHomeInfoDTO is a data transfer object representing the home information of a blog system, including article count, talk count, category count, tag count, website configuration, and view count. It is built using Lombok annotations.",
        "label": "JavaClass"
    },
    {
        "id": 551,
        "fullName": "com.aurora.entity.Comment",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_comment\")\npublic class Comment {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private Integer replyUserId;\n\n    private Integer topicId;\n\n    private String commentContent;\n\n    private Integer parentId;\n\n    private Integer type;\n\n    private Integer isDelete;\n\n    private Integer isReview;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个评论实体类Comment，包含评论的各种属性字段和对应的数据库表映射注解。同时使用了Lombok的@Data、@Builder、@AllArgsConstructor、@NoArgsConstructor注解简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 552,
        "fullName": "com.aurora.util.PageUtil",
        "comment": "",
        "content": "public class PageUtil {\n\n    private static final ThreadLocal<Page<?>> PAGE_HOLDER = new ThreadLocal<>();\n\n    public static void setCurrentPage(Page<?> page) {\n        PAGE_HOLDER.set(page);\n    }\n\n    public static Page<?> getPage() {\n        Page<?> page = PAGE_HOLDER.get();\n        if (Objects.isNull(page)) {\n            setCurrentPage(new Page<>());\n        }\n        return PAGE_HOLDER.get();\n    }\n\n    public static Long getCurrent() {\n        return getPage().getCurrent();\n    }\n\n    public static Long getSize() {\n        return getPage().getSize();\n    }\n\n    public static Long getLimitCurrent() {\n        return (getCurrent() - 1) * getSize();\n    }\n\n    public static void remove() {\n        PAGE_HOLDER.remove();\n    }\n\n}",
        "description": "该类提供了一个静态方法，用于管理当前线程的分页信息，可以设置当前页码，获取当前页对象，获取当前页的页码和大小，计算当前页的起始位置，并且可以移除当前线程中的分页信息。",
        "label": "JavaClass"
    },
    {
        "id": 553,
        "fullName": "com.aurora.entity.UserInfo",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_user_info\")\npublic class UserInfo {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String email;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String intro;\n\n    private String website;\n\n    private Integer isSubscribe;\n\n    private Integer isDisable;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为UserInfo的实体类，包含用户信息的各个字段，并使用Lombok注解简化代码编写和生成getter、setter方法。同时指定了数据库表名为\"t_user_info\"，并定义了主键id为自增类型。createTime和updateTime字段使用了数据库自动填充功能。",
        "label": "JavaClass"
    },
    {
        "id": 554,
        "fullName": "com.aurora.service.UserRoleService",
        "comment": "",
        "content": "public interface UserRoleService extends IService<UserRole> {\n\n}",
        "description": "这段代码定义了一个UserRoleService接口，继承自IService接口，用于处理用户角色相关的操作。",
        "label": "JavaClass"
    },
    {
        "id": 555,
        "fullName": "com.aurora.entity.Menu",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_menu\")\npublic class Menu {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String name;\n\n    private String path;\n\n    private String component;\n\n    private String icon;\n\n    private Integer orderNum;\n\n    private Integer parentId;\n\n    private Integer isHidden;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Menu的实体类，用于映射数据库中的t_menu表，包含菜单的各种属性字段，并使用Lombok的注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 556,
        "fullName": "com.aurora.controller.TalkController",
        "comment": "",
        "content": "@Api(tags = \"说说模块\")\n@RestController\npublic class TalkController {\n\n    @Autowired\n    private TalkService talkService;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @ApiOperation(value = \"查看说说列表\")\n    @GetMapping(\"\/talks\")\n    public ResultVO<PageResultDTO<TalkDTO>> listTalks() {\n        return ResultVO.ok(talkService.listTalks());\n    }\n\n    @ApiOperation(value = \"根据id查看说说\")\n    @ApiImplicitParam(name = \"talkId\", value = \"说说id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/talks\/{talkId}\")\n    public ResultVO<TalkDTO> getTalkById(@PathVariable(\"talkId\") Integer talkId) {\n        return ResultVO.ok(talkService.getTalkById(talkId));\n    }\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传说说图片\")\n    @ApiImplicitParam(name = \"file\", value = \"说说图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/talks\/images\")\n    public ResultVO<String> saveTalkImages(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或修改说说\")\n    @PostMapping(\"\/admin\/talks\")\n    public ResultVO<?> saveOrUpdateTalk(@Valid @RequestBody TalkVO talkVO) {\n        talkService.saveOrUpdateTalk(talkVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除说说\")\n    @DeleteMapping(\"\/admin\/talks\")\n    public ResultVO<?> deleteTalks(@RequestBody List<Integer> talkIds) {\n        talkService.deleteTalks(talkIds);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"查看后台说说\")\n    @GetMapping(\"\/admin\/talks\")\n    public ResultVO<PageResultDTO<TalkAdminDTO>> listBackTalks(ConditionVO conditionVO) {\n        return ResultVO.ok(talkService.listBackTalks(conditionVO));\n    }\n\n    @ApiOperation(value = \"根据id查看后台说说\")\n    @ApiImplicitParam(name = \"talkId\", value = \"说说id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/talks\/{talkId}\")\n    public ResultVO<TalkAdminDTO> getBackTalkById(@PathVariable(\"talkId\") Integer talkId) {\n        return ResultVO.ok(talkService.getBackTalkById(talkId));\n    }\n\n}",
        "description": "该代码是一个用于处理博客系统中说说模块相关功能的控制器，包括查看说说列表、根据id查看说说、上传说说图片、保存或修改说说、删除说说等操作。同时还包括了一些后台管理相关的功能，如查看后台说说和根据id查看后台说说。控制器中使用了Swagger的@Api和@ApiOperation注解来定义接口文档信息，并通过@OptLog注解记录操作日志。",
        "label": "JavaClass"
    },
    {
        "id": 557,
        "fullName": "com.aurora.model.vo.JobSearchVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobSearchVO {\n\n    @ApiModelProperty(name = \"任务名称\", value = \"jobName\", required = true, dataType = \"String\")\n    private String jobName;\n\n    @ApiModelProperty(name = \"任务组别\", value = \"jobGroup\", required = true, dataType = \"String\")\n    private String jobGroup;\n\n    @ApiModelProperty(name = \"任务状态\", value = \"status\", required = true, dataType = \"Integer\")\n    private Integer status;\n}",
        "description": "这段代码定义了一个名为JobSearchVO的Java类，包含了jobName、jobGroup和status三个属性，并使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。每个属性都有对应的@ApiModelProperty注解，用于描述任务名称、任务组别和任务状态。",
        "label": "JavaClass"
    },
    {
        "id": 558,
        "fullName": "com.aurora.filter.JwtAuthenticationTokenFilter",
        "comment": "",
        "content": "@Component\n@SuppressWarnings(\"all\")\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    public TokenService tokenService;\n\n    @Autowired\n    public AuthenticationEntryPoint authenticationEntryPoint;\n\n    @SneakyThrows\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) {\n        UserDetailsDTO userDetailsDTO = tokenService.getUserDetailDTO(request);\n        if (Objects.nonNull(userDetailsDTO) && Objects.isNull(UserUtil.getAuthentication())) {\n            tokenService.renewToken(userDetailsDTO);\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetailsDTO, null, userDetailsDTO.getAuthorities());\n            SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        }\n        filterChain.doFilter(request, response);\n    }\n}",
        "description": "这段代码是一个JWT身份验证token过滤器，用于处理用户身份认证和授权的逻辑。在请求中解析token并设置用户身份信息，如果用户未经过身份验证，则重新生成token并设置用户身份信息。",
        "label": "JavaClass"
    },
    {
        "id": 559,
        "fullName": "com.aurora.AuroraSpringbootApplication",
        "comment": "",
        "content": "@SpringBootApplication\n@MapperScan(\"com.aurora.mapper\")\npublic class AuroraSpringbootApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuroraSpringbootApplication.class, args);\n    }\n\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n}",
        "description": "这段代码是一个Spring Boot应用程序，使用了@MapperScan注解来扫描com.aurora.mapper包下的Mapper接口，同时定义了一个RestTemplate的Bean。",
        "label": "JavaClass"
    },
    {
        "id": 560,
        "fullName": "com.aurora.model.vo.JobStatusVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobStatusVO {\n\n    @ApiModelProperty(name=\"任务id\" ,value = \"id\",required = true, dataType = \"Integer\")\n    private Integer id;\n\n    @ApiModelProperty(name = \"任务状态\", value = \"status\", required = true, dataType = \"Integer\")\n    private Integer status;\n}",
        "description": "这段代码定义了一个名为JobStatusVO的Java类，用于表示任务的状态信息，包含任务id和任务状态两个属性。同时使用了@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 561,
        "fullName": "com.aurora.controller.CommentController",
        "comment": "",
        "content": "@Api(tags = \"评论模块\")\n@RestController\npublic class CommentController {\n\n    @Autowired\n    private CommentService commentService;\n\n    @AccessLimit(seconds = 60, maxCount = 3)\n    @OptLog(optType = SAVE)\n    @ApiOperation(\"添加评论\")\n    @PostMapping(\"\/comments\/save\")\n    public ResultVO<?> saveComment(@Valid @RequestBody CommentVO commentVO) {\n        commentService.saveComment(commentVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"获取评论\")\n    @GetMapping(\"\/comments\")\n    public ResultVO<PageResultDTO<CommentDTO>> getComments(CommentVO commentVO) {\n        return ResultVO.ok(commentService.listComments(commentVO));\n    }\n\n    @ApiOperation(value = \"根据commentId获取回复\")\n    @GetMapping(\"\/comments\/{commentId}\/replies\")\n    public ResultVO<List<ReplyDTO>> listRepliesByCommentId(@PathVariable(\"commentId\") Integer commentId) {\n        return ResultVO.ok(commentService.listRepliesByCommentId(commentId));\n    }\n\n    @ApiOperation(\"获取前六个评论\")\n    @GetMapping(\"\/comments\/topSix\")\n    public ResultVO<List<CommentDTO>> listTopSixComments() {\n        return ResultVO.ok(commentService.listTopSixComments());\n    }\n\n    @ApiOperation(value = \"查询后台评论\")\n    @GetMapping(\"\/admin\/comments\")\n    public ResultVO<PageResultDTO<CommentAdminDTO>> listCommentBackDTO(ConditionVO conditionVO) {\n        return ResultVO.ok(commentService.listCommentsAdmin(conditionVO));\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"审核评论\")\n    @PutMapping(\"\/admin\/comments\/review\")\n    public ResultVO<?> updateCommentsReview(@Valid @RequestBody ReviewVO reviewVO) {\n        commentService.updateCommentsReview(reviewVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除评论\")\n    @DeleteMapping(\"\/admin\/comments\")\n    public ResultVO<?> deleteComments(@RequestBody List<Integer> commentIdList) {\n        commentService.removeByIds(commentIdList);\n        return ResultVO.ok();\n    }\n\n}",
        "description": "这段代码是一个评论模块的控制器，包括添加、获取、审核和删除评论等功能。其中包含了使用@ApiOperation注解定义的各个接口方法。",
        "label": "JavaClass"
    },
    {
        "id": 562,
        "fullName": "com.aurora.model.vo.EmailVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"绑定邮箱\")\npublic class EmailVO {\n\n    @NotBlank(message = \"邮箱不能为空\")\n    @Email(message = \"邮箱格式不正确\")\n    @ApiModelProperty(name = \"email\", value = \"用户名\", required = true, dataType = \"String\")\n    private String email;\n\n    @NotBlank(message = \"验证码不能为空\")\n    @ApiModelProperty(name = \"code\", value = \"邮箱验证码\", required = true, dataType = \"String\")\n    private String code;\n\n}",
        "description": "这段代码定义了一个名为EmailVO的数据模型，用于表示绑定邮箱的信息，包含邮箱和验证码两个字段，并对字段进行了校验和描述。",
        "label": "JavaClass"
    },
    {
        "id": 563,
        "fullName": "com.aurora.model.dto.ArticleAdminViewDTO",
        "comment": "\/**\n * @author 花未眠\n * 文章编辑页码DTO\n *\/",
        "content": "\/**\n * @author 花未眠\n * 文章编辑页码DTO\n *\/\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"文章\")\npublic class ArticleAdminViewDTO {\n\n    private Integer id;\n\n    private String articleTitle;\n\n    private String articleAbstract;\n\n    private String articleContent;\n\n    private String articleCover;\n\n    private String categoryName;\n\n    private List<String> tagNames;\n\n    private Integer isTop;\n\n    private Integer isFeatured;\n\n    private Integer status;\n\n    private Integer type;\n\n    private String originalUrl;\n\n    private String password;\n\n}",
        "description": "这是一个用于文章编辑页码的DTO，包含文章的各种属性和信息。",
        "label": "JavaClass"
    },
    {
        "id": 564,
        "fullName": "com.aurora.model.dto.CategoryAdminDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CategoryAdminDTO {\n\n    private Integer id;\n\n    private String categoryName;\n\n    private Integer articleCount;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个CategoryAdminDTO类，用于表示博客系统中的分类管理信息，包括id、categoryName、articleCount和createTime等属性。使用Lombok注解简化了代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 565,
        "fullName": "com.aurora.service.RoleMenuService",
        "comment": "",
        "content": "public interface RoleMenuService extends IService<RoleMenu> {\n\n}",
        "description": "这段代码定义了一个角色菜单服务接口，该接口继承自IService接口，并指定了泛型类型为RoleMenu。",
        "label": "JavaClass"
    },
    {
        "id": 566,
        "fullName": "com.aurora.entity.Photo",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@TableName(value = \"t_photo\")\npublic class Photo {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private Integer albumId;\n\n    private String photoName;\n\n    private String photoDesc;\n\n    private String photoSrc;\n\n    private Integer isDelete;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Photo的实体类，用于映射数据库中的t_photo表，包含id、albumId、photoName、photoDesc、photoSrc、isDelete、createTime和updateTime等属性。同时使用了Lombok注解简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 567,
        "fullName": "com.aurora.listener.AuroraListener",
        "comment": "",
        "content": "@Component\npublic class AuroraListener {\n\n    @Autowired\n    private OperationLogMapper operationLogMapper;\n\n    @Autowired\n    private ExceptionLogMapper exceptionLogMapper;\n\n    @Async\n    @EventListener(OperationLogEvent.class)\n    public void saveOperationLog(OperationLogEvent operationLogEvent) {\n        operationLogMapper.insert((OperationLog) operationLogEvent.getSource());\n    }\n\n    @Async\n    @EventListener(ExceptionLogEvent.class)\n    public void saveExceptionLog(ExceptionLogEvent exceptionLogEvent) {\n        exceptionLogMapper.insert((ExceptionLog) exceptionLogEvent.getSource());\n    }\n\n}",
        "description": "一个使用Spring的组件，监听并保存操作日志和异常日志到数据库的类。",
        "label": "JavaClass"
    },
    {
        "id": 568,
        "fullName": "com.aurora.service.impl.UserDetailServiceImpl",
        "comment": "",
        "content": "@Service\npublic class UserDetailServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private RoleMapper roleMapper;\n\n    @Resource\n    private HttpServletRequest request;\n\n    @SneakyThrows\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        if (StringUtils.isBlank(username)) {\n            throw new BizException(\"用户名不能为空!\");\n        }\n        UserAuth userAuth = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .select(UserAuth::getId, UserAuth::getUserInfoId, UserAuth::getUsername, UserAuth::getPassword, UserAuth::getLoginType)\n                .eq(UserAuth::getUsername, username));\n        if (Objects.isNull(userAuth)) {\n            throw new BizException(\"用户不存在!\");\n        }\n        return convertUserDetail(userAuth, request);\n    }\n\n    public UserDetailsDTO convertUserDetail(UserAuth user, HttpServletRequest request) {\n        UserInfo userInfo = userInfoMapper.selectById(user.getUserInfoId());\n        List<String> roles = roleMapper.listRolesByUserInfoId(userInfo.getId());\n        String ipAddress = IpUtil.getIpAddress(request);\n        String ipSource = IpUtil.getIpSource(ipAddress);\n        UserAgent userAgent = IpUtil.getUserAgent(request);\n        return UserDetailsDTO.builder()\n                .id(user.getId())\n                .loginType(user.getLoginType())\n                .userInfoId(userInfo.getId())\n                .username(user.getUsername())\n                .password(user.getPassword())\n                .email(userInfo.getEmail())\n                .roles(roles)\n                .nickname(userInfo.getNickname())\n                .avatar(userInfo.getAvatar())\n                .intro(userInfo.getIntro())\n                .website(userInfo.getWebsite())\n                .isSubscribe(userInfo.getIsSubscribe())\n                .ipAddress(ipAddress)\n                .ipSource(ipSource)\n                .isDisable(userInfo.getIsDisable())\n                .browser(userAgent.getBrowser().getName())\n                .os(userAgent.getOperatingSystem().getName())\n                .lastLoginTime(LocalDateTime.now())\n                .build();\n    }\n\n}",
        "description": "这段代码是一个实现了UserDetailsService接口的服务类，通过用户名查询用户信息并转换成UserDetailsDTO对象返回。",
        "label": "JavaClass"
    },
    {
        "id": 569,
        "fullName": "com.aurora.model.vo.CategoryVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"分类\")\npublic class CategoryVO {\n\n    @ApiModelProperty(name = \"id\", value = \"分类id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"分类名不能为空\")\n    @ApiModelProperty(name = \"categoryName\", value = \"分类名\", required = true, dataType = \"String\")\n    private String categoryName;\n\n}",
        "description": "这段代码定义了一个名为CategoryVO的数据类，用于表示分类信息，包含分类id和分类名两个字段，并使用了Lombok和Swagger注解。",
        "label": "JavaClass"
    },
    {
        "id": 570,
        "fullName": "com.aurora.model.dto.CategoryOptionDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class CategoryOptionDTO {\n\n    private Integer id;\n\n    private String categoryName;\n\n}",
        "description": "这段代码定义了一个CategoryOptionDTO类，包含id和categoryName属性，并使用了Lombok注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 571,
        "fullName": "com.aurora.service.ArticleService",
        "comment": "",
        "content": "public interface ArticleService extends IService<Article> {\n\n    TopAndFeaturedArticlesDTO listTopAndFeaturedArticles();\n\n    PageResultDTO<ArticleCardDTO> listArticles();\n\n    PageResultDTO<ArticleCardDTO> listArticlesByCategoryId(Integer categoryId);\n\n    ArticleDTO getArticleById(Integer articleId);\n\n    void accessArticle(ArticlePasswordVO articlePasswordVO);\n\n    PageResultDTO<ArticleCardDTO> listArticlesByTagId(Integer tagId);\n\n    PageResultDTO<ArchiveDTO> listArchives();\n\n    PageResultDTO<ArticleAdminDTO> listArticlesAdmin(ConditionVO conditionVO);\n\n    void saveOrUpdateArticle(ArticleVO articleVO);\n\n    void updateArticleTopAndFeatured(ArticleTopFeaturedVO articleTopFeaturedVO);\n\n    void updateArticleDelete(DeleteVO deleteVO);\n\n    void deleteArticles(List<Integer> articleIds);\n\n    ArticleAdminViewDTO getArticleByIdAdmin(Integer articleId);\n\n    List<String> exportArticles(List<Integer> articleIdList);\n\n    List<ArticleSearchDTO> listArticlesBySearch(ConditionVO condition);\n\n}",
        "description": "这段代码是一个博客系统的后端代码，定义了一个ArticleService接口，该接口继承自IService<Article>接口。接口中定义了多个方法，包括获取置顶和特色文章列表、获取文章列表、根据分类获取文章列表、根据文章ID获取文章详情、访问文章、根据标签获取文章列表、获取归档列表、获取后台管理的文章列表、保存或更新文章、更新文章的置顶和特色状态、删除文章、根据文章ID获取后台管理视图的文章详情、导出文章列表、根据搜索条件获取文章列表等。",
        "label": "JavaClass"
    },
    {
        "id": 572,
        "fullName": "com.aurora.mapper.AboutMapper",
        "comment": "",
        "content": "@Repository\npublic interface AboutMapper extends BaseMapper<About> {\n\n}",
        "description": "这段代码定义了一个关于页面的数据库访问接口AboutMapper，继承自BaseMapper接口，用于操作关于页面的数据。",
        "label": "JavaClass"
    },
    {
        "id": 573,
        "fullName": "com.aurora.controller.JobController",
        "comment": "",
        "content": "@Api(tags = \"定时任务模块\")\n@RestController\npublic class JobController {\n\n    @Autowired\n    private JobService jobService;\n\n    @OptLog(optType = SAVE)\n    @ApiOperation(\"添加定时任务\")\n    @PostMapping(\"\/admin\/jobs\")\n    public ResultVO<?> saveJob(@RequestBody JobVO jobVO) {\n        jobService.saveJob(jobVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"修改定时任务\")\n    @PutMapping(\"\/admin\/jobs\")\n    public ResultVO<?> updateJob(@RequestBody JobVO jobVO) {\n        jobService.updateJob(jobVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(\"删除定时任务\")\n    @DeleteMapping(\"\/admin\/jobs\")\n    public ResultVO<?> deleteJobById(@RequestBody List<Integer> jobIds) {\n        jobService.deleteJobs(jobIds);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"根据id获取任务\")\n    @GetMapping(\"\/admin\/jobs\/{id}\")\n    public ResultVO<JobDTO> getJobById(@PathVariable(\"id\") Integer jobId) {\n        return ResultVO.ok(jobService.getJobById(jobId));\n    }\n\n    @ApiOperation(\"获取任务列表\")\n    @GetMapping(\"\/admin\/jobs\")\n    public ResultVO<PageResultDTO<JobDTO>> listJobs(JobSearchVO jobSearchVO) {\n        return ResultVO.ok(jobService.listJobs(jobSearchVO));\n    }\n\n    @ApiOperation(\"更改任务的状态\")\n    @PutMapping(\"\/admin\/jobs\/status\")\n    public ResultVO<?> updateJobStatus(@RequestBody JobStatusVO jobStatusVO) {\n        jobService.updateJobStatus(jobStatusVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"执行某个任务\")\n    @PutMapping(\"\/admin\/jobs\/run\")\n    public ResultVO<?> runJob(@RequestBody JobRunVO jobRunVO) {\n        jobService.runJob(jobRunVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"获取所有job分组\")\n    @GetMapping(\"\/admin\/jobs\/jobGroups\")\n    public ResultVO<List<String>> listJobGroup() {\n        return ResultVO.ok(jobService.listJobGroups());\n    }\n}",
        "description": "这段代码是一个定时任务模块的后端控制器，包括添加、修改、删除、获取、执行任务等操作，以及获取所有任务分组的功能。同时使用了@Api注解对接口进行标记，并通过@OptLog注解记录操作日志。",
        "label": "JavaClass"
    },
    {
        "id": 574,
        "fullName": "com.aurora.service.RoleService",
        "comment": "",
        "content": "public interface RoleService extends IService<Role> {\n\n    List<UserRoleDTO> listUserRoles();\n\n    PageResultDTO<RoleDTO> listRoles(ConditionVO conditionVO);\n\n    void saveOrUpdateRole(RoleVO roleVO);\n\n    void deleteRoles(List<Integer> ids);\n\n}",
        "description": "这段代码定义了一个RoleService接口，包含了列出用户角色、列出角色、保存或更新角色以及删除角色的方法。",
        "label": "JavaClass"
    },
    {
        "id": 575,
        "fullName": "com.aurora.model.dto.TalkAdminDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class TalkAdminDTO {\n\n    private Integer id;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String content;\n\n    private String images;\n\n    private List<String> imgs;\n\n    private Integer isTop;\n\n    private Integer status;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个TalkAdminDTO类，包含了id、nickname、avatar、content、images、imgs、isTop、status和createTime等属性。通过Lombok注解@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder简化了代码的编写。",
        "label": "JavaClass"
    },
    {
        "id": 576,
        "fullName": "com.aurora.config.RabbitMQConfig",
        "comment": "",
        "content": "@Configuration\npublic class RabbitMQConfig {\n\n    @Bean\n    public Queue articleQueue() {\n        return new Queue(MAXWELL_QUEUE, true);\n    }\n\n    @Bean\n    public FanoutExchange maxWellExchange() {\n        return new FanoutExchange(MAXWELL_EXCHANGE, true, false);\n    }\n\n    @Bean\n    public Binding bindingArticleDirect() {\n        return BindingBuilder.bind(articleQueue()).to(maxWellExchange());\n    }\n\n    @Bean\n    public Queue emailQueue() {\n        return new Queue(EMAIL_QUEUE, true);\n    }\n\n    @Bean\n    public FanoutExchange emailExchange() {\n        return new FanoutExchange(EMAIL_EXCHANGE, true, false);\n    }\n\n    @Bean\n    public Binding bindingEmailDirect() {\n        return BindingBuilder.bind(emailQueue()).to(emailExchange());\n    }\n\n    @Bean\n    public Queue subscribeQueue() {\n        return new Queue(SUBSCRIBE_QUEUE, true);\n    }\n\n    @Bean\n    public FanoutExchange subscribeExchange() {\n        return new FanoutExchange(SUBSCRIBE_EXCHANGE, true, false);\n    }\n\n    @Bean\n    public Binding bindingSubscribeDirect() {\n        return BindingBuilder.bind(subscribeQueue()).to(subscribeExchange());\n    }\n\n}",
        "description": "该代码配置了RabbitMQ的队列、交换机和绑定关系，用于处理文章、邮件和订阅相关的消息。",
        "label": "JavaClass"
    },
    {
        "id": 577,
        "fullName": "com.aurora.strategy.SearchStrategy",
        "comment": "",
        "content": "public interface SearchStrategy {\n\n    List<ArticleSearchDTO> searchArticle(String keywords);\n\n}",
        "description": "这段代码定义了一个接口SearchStrategy，用于搜索关键字相关的文章并返回ArticleSearchDTO列表。",
        "label": "JavaClass"
    },
    {
        "id": 578,
        "fullName": "com.aurora.service.ResourceService",
        "comment": "",
        "content": "public interface ResourceService extends IService<Resource> {\n\n    void importSwagger();\n\n    void saveOrUpdateResource(ResourceVO resourceVO);\n\n    void deleteResource(Integer resourceId);\n\n    List<ResourceDTO> listResources(ConditionVO conditionVO);\n\n    List<LabelOptionDTO> listResourceOption();\n\n}",
        "description": "该接口定义了对资源的操作，包括导入Swagger文档、保存或更新资源、删除资源、列出资源列表以及列出资源选项。",
        "label": "JavaClass"
    },
    {
        "id": 579,
        "fullName": "com.aurora.model.dto.UserInfoDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserInfoDTO {\n\n    private Integer id;\n\n    private Integer userInfoId;\n\n    private String email;\n\n    private Integer loginType;\n\n    private String username;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String intro;\n\n    private String website;\n\n    private Integer isSubscribe;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private LocalDateTime lastLoginTime;\n\n    private String token;\n\n}",
        "description": "这段代码定义了一个包含用户信息的数据传输对象（DTO），包括用户的ID、邮箱、登录类型、用户名、昵称、头像、简介、网站、订阅状态、IP地址、IP来源、最后登录时间和令牌。通过使用@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解，简化了代码的编写和使用。",
        "label": "JavaClass"
    },
    {
        "id": 580,
        "fullName": "com.aurora.mapper.CategoryMapper",
        "comment": "",
        "content": "@Repository\npublic interface CategoryMapper extends BaseMapper<Category> {\n\n    List<CategoryDTO> listCategories();\n\n    List<CategoryAdminDTO> listCategoriesAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n}",
        "description": "CategoryMapper是一个用于操作Category实体的数据访问接口，包括获取所有分类的列表以及管理端获取分类列表的方法。",
        "label": "JavaClass"
    },
    {
        "id": 581,
        "fullName": "com.aurora.service.impl.RedisServiceImpl",
        "comment": "",
        "content": "@Service\n@SuppressWarnings(\"all\")\npublic class RedisServiceImpl implements RedisService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Override\n    public void set(String key, Object value, long time) {\n        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public void set(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    @Override\n    public Object get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n\n    @Override\n    public Boolean del(String key) {\n        return redisTemplate.delete(key);\n    }\n\n    @Override\n    public Long del(List<String> keys) {\n        return redisTemplate.delete(keys);\n    }\n\n    @Override\n    public Boolean expire(String key, long time) {\n        return redisTemplate.expire(key, time, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public Long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }\n\n    @Override\n    public Long incr(String key, long delta) {\n        return redisTemplate.opsForValue().increment(key, delta);\n    }\n\n    @Override\n    public Long incrExpire(String key, long time) {\n        Long count = redisTemplate.opsForValue().increment(key, 1);\n        if (count != null && count == 1) {\n            redisTemplate.expire(key, time, TimeUnit.SECONDS);\n        }\n        return count;\n    }\n\n    @Override\n    public Long decr(String key, long delta) {\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }\n\n    @Override\n    public Object hGet(String key, String hashKey) {\n        return redisTemplate.opsForHash().get(key, hashKey);\n    }\n\n    @Override\n    public Boolean hSet(String key, String hashKey, Object value, long time) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n        return expire(key, time);\n    }\n\n    @Override\n    public void hSet(String key, String hashKey, Object value) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n    }\n\n    @Override\n    public Map hGetAll(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n    @Override\n    public Boolean hSetAll(String key, Map<String, Object> map, long time) {\n        redisTemplate.opsForHash().putAll(key, map);\n        return expire(key, time);\n    }\n\n    @Override\n    public void hSetAll(String key, Map<String, ?> map) {\n        redisTemplate.opsForHash().putAll(key, map);\n    }\n\n    @Override\n    public void hDel(String key, Object... hashKey) {\n        redisTemplate.opsForHash().delete(key, hashKey);\n    }\n\n    @Override\n    public Boolean hHasKey(String key, String hashKey) {\n        return redisTemplate.opsForHash().hasKey(key, hashKey);\n    }\n\n    @Override\n    public Long hIncr(String key, String hashKey, Long delta) {\n        return redisTemplate.opsForHash().increment(key, hashKey, delta);\n    }\n\n    @Override\n    public Long hDecr(String key, String hashKey, Long delta) {\n        return redisTemplate.opsForHash().increment(key, hashKey, -delta);\n    }\n\n    @Override\n    public Double zIncr(String key, Object value, Double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, score);\n    }\n\n    @Override\n    public Double zDecr(String key, Object value, Double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, -score);\n    }\n\n    @Override\n    public Map<Object, Double> zReverseRangeWithScore(String key, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end)\n                .stream()\n                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));\n    }\n\n    @Override\n    public Double zScore(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }\n\n    @Override\n    public Map<Object, Double> zAllScore(String key) {\n        return Objects.requireNonNull(redisTemplate.opsForZSet().rangeWithScores(key, 0, -1))\n                .stream()\n                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));\n    }\n\n    @Override\n    public Set<Object> sMembers(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    @Override\n    public Long sAdd(String key, Object... values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }\n\n    @Override\n    public Long sAddExpire(String key, long time, Object... values) {\n        Long count = redisTemplate.opsForSet().add(key, values);\n        expire(key, time);\n        return count;\n    }\n\n    @Override\n    public Boolean sIsMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n\n    @Override\n    public Long sSize(String key) {\n        return redisTemplate.opsForSet().size(key);\n    }\n\n    @Override\n    public Long sRemove(String key, Object... values) {\n        return redisTemplate.opsForSet().remove(key, values);\n    }\n\n    @Override\n    public List<Object> lRange(String key, long start, long end) {\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    @Override\n    public Long lSize(String key) {\n        return redisTemplate.opsForList().size(key);\n    }\n\n    @Override\n    public Object lIndex(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }\n\n    @Override\n    public Long lPush(String key, Object value) {\n        return redisTemplate.opsForList().rightPush(key, value);\n    }\n\n    @Override\n    public Long lPush(String key, Object value, long time) {\n        Long index = redisTemplate.opsForList().rightPush(key, value);\n        expire(key, time);\n        return index;\n    }\n\n    @Override\n    public Long lPushAll(String key, Object... values) {\n        return redisTemplate.opsForList().rightPushAll(key, values);\n    }\n\n    @Override\n    public Long lPushAll(String key, Long time, Object... values) {\n        Long count = redisTemplate.opsForList().rightPushAll(key, values);\n        expire(key, time);\n        return count;\n    }\n\n    @Override\n    public Long lRemove(String key, long count, Object value) {\n        return redisTemplate.opsForList().remove(key, count, value);\n    }\n\n    @Override\n    public Boolean bitAdd(String key, int offset, boolean b) {\n        return redisTemplate.opsForValue().setBit(key, offset, b);\n    }\n\n    @Override\n    public Boolean bitGet(String key, int offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }\n\n    @Override\n    public Long bitCount(String key) {\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes()));\n    }\n\n    @Override\n    public List<Long> bitField(String key, int limit, int offset) {\n        return redisTemplate.execute((RedisCallback<List<Long>>) con ->\n                con.bitField(key.getBytes(),\n                        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(limit)).valueAt(offset)));\n    }\n\n    @Override\n    public byte[] bitGetAll(String key) {\n        return redisTemplate.execute((RedisCallback<byte[]>) con -> con.get(key.getBytes()));\n    }\n\n    @Override\n    public Long hyperAdd(String key, Object... value) {\n        return redisTemplate.opsForHyperLogLog().add(key, value);\n    }\n\n    @Override\n    public Long hyperGet(String... key) {\n        return redisTemplate.opsForHyperLogLog().size(key);\n    }\n\n    @Override\n    public void hyperDel(String key) {\n        redisTemplate.opsForHyperLogLog().delete(key);\n    }\n\n    @Override\n    public Long geoAdd(String key, Double x, Double y, String name) {\n        return redisTemplate.opsForGeo().add(key, new Point(x, y), name);\n    }\n\n    @Override\n    public List<Point> geoGetPointList(String key, Object... place) {\n        return redisTemplate.opsForGeo().position(key, place);\n    }\n\n    @Override\n    public Distance geoCalculationDistance(String key, String placeOne, String placeTow) {\n        return redisTemplate.opsForGeo()\n                .distance(key, placeOne, placeTow, RedisGeoCommands.DistanceUnit.KILOMETERS);\n    }\n\n    @Override\n    public GeoResults<RedisGeoCommands.GeoLocation<Object>> geoNearByPlace(String key, String place, Distance distance, long limit, Sort.Direction sort) {\n        RedisGeoCommands.GeoRadiusCommandArgs args = RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates();\n        \/\/ 判断排序方式\n        if (Sort.Direction.ASC == sort) {\n            args.sortAscending();\n        } else {\n            args.sortDescending();\n        }\n        args.limit(limit);\n        return redisTemplate.opsForGeo()\n                .radius(key, place, distance, args);\n    }\n\n    @Override\n    public List<String> geoGetHash(String key, String... place) {\n        return redisTemplate.opsForGeo()\n                .hash(key, place);\n    }\n\n}",
        "description": "这段代码是一个Redis的后端服务实现类，提供了一系列基于Redis操作的方法，包括设置、获取、删除键值对、操作Hash、ZSet、Set、List等数据结构，以及一些位操作、HyperLogLog、Geo数据类型的操作。",
        "label": "JavaClass"
    },
    {
        "id": 582,
        "fullName": "com.aurora.strategy.impl.EsSearchStrategyImpl",
        "comment": "",
        "content": "@Log4j2\n@Service(\"esSearchStrategyImpl\")\npublic class EsSearchStrategyImpl implements SearchStrategy {\n\n    @Autowired\n    private ElasticsearchRestTemplate elasticsearchRestTemplate;\n\n    @Override\n    public List<ArticleSearchDTO> searchArticle(String keywords) {\n        if (StringUtils.isBlank(keywords)) {\n            return new ArrayList<>();\n        }\n        return search(buildQuery(keywords));\n    }\n\n    private NativeSearchQueryBuilder buildQuery(String keywords) {\n        NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must(QueryBuilders.boolQuery().should(QueryBuilders.matchQuery(\"articleTitle\", keywords))\n                        .should(QueryBuilders.matchQuery(\"articleContent\", keywords)))\n                .must(QueryBuilders.termQuery(\"isDelete\", FALSE))\n                .must(QueryBuilders.termQuery(\"status\", PUBLIC.getStatus()));\n        nativeSearchQueryBuilder.withQuery(boolQueryBuilder);\n        return nativeSearchQueryBuilder;\n    }\n\n    private List<ArticleSearchDTO> search(NativeSearchQueryBuilder nativeSearchQueryBuilder) {\n        HighlightBuilder.Field titleField = new HighlightBuilder.Field(\"articleTitle\");\n        titleField.preTags(PRE_TAG);\n        titleField.postTags(POST_TAG);\n        HighlightBuilder.Field contentField = new HighlightBuilder.Field(\"articleContent\");\n        contentField.preTags(PRE_TAG);\n        contentField.postTags(POST_TAG);\n        contentField.fragmentSize(50);\n        nativeSearchQueryBuilder.withHighlightFields(titleField, contentField);\n        try {\n            SearchHits<ArticleSearchDTO> search = elasticsearchRestTemplate.search(nativeSearchQueryBuilder.build(), ArticleSearchDTO.class);\n            return search.getSearchHits().stream().map(hit -> {\n                ArticleSearchDTO article = hit.getContent();\n                List<String> titleHighLightList = hit.getHighlightFields().get(\"articleTitle\");\n                if (CollectionUtils.isNotEmpty(titleHighLightList)) {\n                    article.setArticleTitle(titleHighLightList.get(0));\n                }\n                List<String> contentHighLightList = hit.getHighlightFields().get(\"articleContent\");\n                if (CollectionUtils.isNotEmpty(contentHighLightList)) {\n                    article.setArticleContent(contentHighLightList.get(contentHighLightList.size() - 1));\n                }\n                return article;\n            }).collect(Collectors.toList());\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n        return new ArrayList<>();\n    }\n\n}",
        "description": "这段代码是一个基于Elasticsearch的文章搜索策略实现类，用于根据关键词搜索文章并返回高亮显示的结果。",
        "label": "JavaClass"
    },
    {
        "id": 583,
        "fullName": "com.aurora.entity.JobLog",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_job_log\")\npublic class JobLog {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer jobId;\n\n    private String jobName;\n\n    private String jobGroup;\n\n    private String invokeTarget;\n\n    private String jobMessage;\n\n    private Integer status;\n\n    private String exceptionInfo;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    private Date startTime;\n\n    private Date endTime;\n}",
        "description": "这段代码定义了一个名为JobLog的实体类，用于表示博客系统中的任务日志信息，并包含id、jobId、jobName、jobGroup、invokeTarget、jobMessage、status、exceptionInfo、createTime、startTime和endTime等属性。",
        "label": "JavaClass"
    },
    {
        "id": 584,
        "fullName": "com.aurora.service.impl.UniqueViewServiceImpl",
        "comment": "",
        "content": "@Service\npublic class UniqueViewServiceImpl extends ServiceImpl<UniqueViewMapper, UniqueView> implements UniqueViewService {\n\n    @Autowired\n    private UniqueViewMapper uniqueViewMapper;\n\n    @Override\n    public List<UniqueViewDTO> listUniqueViews() {\n        DateTime startTime = DateUtil.beginOfDay(DateUtil.offsetDay(new Date(), -7));\n        DateTime endTime = DateUtil.endOfDay(new Date());\n        return uniqueViewMapper.listUniqueViews(startTime, endTime);\n    }\n\n}",
        "description": "这段代码是一个服务类UniqueViewServiceImpl，实现了UniqueViewService接口，提供了获取最近一周内独立访客数据的功能。",
        "label": "JavaClass"
    },
    {
        "id": 585,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl",
        "comment": "",
        "content": "@Service\npublic abstract class AbstractUploadStrategyImpl implements UploadStrategy {\n\n    @Override\n    public String uploadFile(MultipartFile file, String path) {\n        try {\n            String md5 = FileUtil.getMd5(file.getInputStream());\n            String extName = FileUtil.getExtName(file.getOriginalFilename());\n            String fileName = md5 + extName;\n            if (!exists(path + fileName)) {\n                upload(path, fileName, file.getInputStream());\n            }\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }\n\n    @Override\n    public String uploadFile(String fileName, InputStream inputStream, String path) {\n        try {\n            upload(path, fileName, inputStream);\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }\n\n    public abstract Boolean exists(String filePath);\n\n    public abstract void upload(String path, String fileName, InputStream inputStream) throws IOException;\n\n    public abstract String getFileAccessUrl(String filePath);\n\n}",
        "description": "这段代码是一个抽象的上传策略实现类，实现了文件上传的方法，并提供了抽象方法用于检查文件是否存在、上传文件和获取文件访问路径。在文件上传过程中，会先获取文件的MD5值和扩展名，然后根据路径和文件名上传文件，并返回文件的访问路径。在异常情况下会抛出自定义的业务异常。",
        "label": "JavaClass"
    },
    {
        "id": 586,
        "fullName": "com.aurora.service.TalkService",
        "comment": "",
        "content": "public interface TalkService extends IService<Talk> {\n\n    PageResultDTO<TalkDTO> listTalks();\n\n    TalkDTO getTalkById(Integer talkId);\n\n    void saveOrUpdateTalk(TalkVO talkVO);\n\n    void deleteTalks(List<Integer> talkIdList);\n\n    PageResultDTO<TalkAdminDTO> listBackTalks(ConditionVO conditionVO);\n\n    TalkAdminDTO getBackTalkById(Integer talkId);\n\n}",
        "description": "This code defines an interface TalkService that extends IService<Talk> and includes methods for listing talks, getting a talk by ID, saving or updating a talk, deleting talks, listing back talks with conditions, and getting a back talk by ID.",
        "label": "JavaClass"
    },
    {
        "id": 587,
        "fullName": "com.aurora.mapper.FriendLinkMapper",
        "comment": "",
        "content": "@Repository\npublic interface FriendLinkMapper extends BaseMapper<FriendLink> {\n\n}",
        "description": "这段代码定义了一个FriendLinkMapper接口，用于操作友情链接数据表的数据库操作。继承了BaseMapper接口，可以实现常见的数据库操作。",
        "label": "JavaClass"
    },
    {
        "id": 588,
        "fullName": "com.aurora.model.dto.WebsiteConfigDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class WebsiteConfigDTO {\n\n    private String name;\n\n    private String englishName;\n\n    private String author;\n\n    private String authorAvatar;\n\n    private String authorIntro;\n\n    private String logo;\n\n    private Integer multiLanguage;\n\n    private String notice;\n\n    private String websiteCreateTime;\n\n    private String beianNumber;\n\n    private Integer qqLogin;\n\n    private String github;\n\n    private String gitee;\n\n    private String qq;\n\n    private String weChat;\n\n    private String weibo;\n\n    private String csdn;\n\n    private String zhihu;\n\n    private String juejin;\n\n    private String twitter;\n\n    private String stackoverflow;\n\n    private String touristAvatar;\n\n    private String userAvatar;\n\n    private Integer isCommentReview;\n\n    private Integer isEmailNotice;\n\n    private Integer isReward;\n\n    private String weiXinQRCode;\n\n    private String alipayQRCode;\n\n    private String favicon;\n\n    \/**\n     * 网页标题\n     *\/\n    private String websiteTitle;\n\n    \/**\n     * 公安部备案编号\n     *\/\n    private String gonganBeianNumber;\n\n}",
        "description": "这段代码定义了一个包含网站配置信息的数据传输对象WebsiteConfigDTO，包括网站名称、作者信息、多语言支持、第三方登录信息等。",
        "label": "JavaClass"
    },
    {
        "id": 589,
        "fullName": "com.aurora.entity.RoleMenu",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_role_menu\")\npublic class RoleMenu {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer roleId;\n\n    private Integer menuId;\n\n}",
        "description": "这段代码定义了一个名为RoleMenu的实体类，用于映射数据库中的t_role_menu表，包含id、roleId和menuId属性。使用了Lombok的@Data、@Builder、@AllArgsConstructor、@NoArgsConstructor注解简化代码。@TableId注解定义了id字段为自增主键。",
        "label": "JavaClass"
    },
    {
        "id": 590,
        "fullName": "com.aurora.model.dto.UserLogoutStatusDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserLogoutStatusDTO {\n\n    private String Message;\n}",
        "description": "这段代码定义了一个名为UserLogoutStatusDTO的数据传输对象，包含一个名为Message的字符串属性，并使用了Lombok的注解来简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 591,
        "fullName": "com.aurora.mapper.RoleMenuMapper",
        "comment": "",
        "content": "@Repository\npublic interface RoleMenuMapper extends BaseMapper<RoleMenu> {\n\n}",
        "description": "这段代码是一个RoleMenu实体类的映射器接口，用于与数据库中的角色菜单关联表进行数据交互。",
        "label": "JavaClass"
    },
    {
        "id": 592,
        "fullName": "com.aurora.entity.UserRole",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_user_role\")\npublic class UserRole {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private Integer roleId;\n\n}",
        "description": "这段代码定义了一个名为UserRole的实体类，用于映射数据库中的t_user_role表，包含id、userId和roleId等字段。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解简化代码。@TableId注解指定了id字段作为主键，并设置了自增类型。",
        "label": "JavaClass"
    },
    {
        "id": 593,
        "fullName": "com.aurora.service.ExceptionLogService",
        "comment": "",
        "content": "public interface ExceptionLogService extends IService<ExceptionLog> {\n\n    PageResultDTO<ExceptionLogDTO> listExceptionLogs(ConditionVO conditionVO);\n\n}",
        "description": "这段代码定义了一个接口ExceptionLogService，继承自IService<ExceptionLog>，提供了一个方法listExceptionLogs，用于根据条件获取异常日志的列表。",
        "label": "JavaClass"
    },
    {
        "id": 594,
        "fullName": "com.aurora.strategy.impl.OssUploadStrategyImpl",
        "comment": "",
        "content": "@Service(\"ossUploadStrategyImpl\")\npublic class OssUploadStrategyImpl extends AbstractUploadStrategyImpl {\n\n    @Autowired\n    private OssConfigProperties ossConfigProperties;\n\n    @Override\n    public Boolean exists(String filePath) {\n        return getOssClient().doesObjectExist(ossConfigProperties.getBucketName(), filePath);\n    }\n\n    @Override\n    public void upload(String path, String fileName, InputStream inputStream) {\n        getOssClient().putObject(ossConfigProperties.getBucketName(), path + fileName, inputStream);\n    }\n\n    @Override\n    public String getFileAccessUrl(String filePath) {\n        return ossConfigProperties.getUrl() + filePath;\n    }\n\n    private OSS getOssClient() {\n        return new OSSClientBuilder().build(ossConfigProperties.getEndpoint(), ossConfigProperties.getAccessKeyId(), ossConfigProperties.getAccessKeySecret());\n    }\n\n}",
        "description": "This code defines a class for uploading files to an OSS (Object Storage Service) using the provided OssConfigProperties and implementing the required upload and file existence check methods.",
        "label": "JavaClass"
    },
    {
        "id": 595,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl",
        "comment": "",
        "content": "@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private ArticleTagMapper articleTagMapper;\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    @Autowired\n    private TagMapper tagMapper;\n\n    @Autowired\n    private TagService tagService;\n\n    @Autowired\n    private ArticleTagService articleTagService;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @Autowired\n    private SearchStrategyContext searchStrategyContext;\n\n    @SneakyThrows\n    @Override\n    public TopAndFeaturedArticlesDTO listTopAndFeaturedArticles() {\n        List<ArticleCardDTO> articleCardDTOs = articleMapper.listTopAndFeaturedArticles();\n        if (articleCardDTOs.size() == 0) {\n            return new TopAndFeaturedArticlesDTO();\n        } else if (articleCardDTOs.size() > 3) {\n            articleCardDTOs = articleCardDTOs.subList(0, 3);\n        }\n        TopAndFeaturedArticlesDTO topAndFeaturedArticlesDTO = new TopAndFeaturedArticlesDTO();\n        topAndFeaturedArticlesDTO.setTopArticle(articleCardDTOs.get(0));\n        articleCardDTOs.remove(0);\n        topAndFeaturedArticlesDTO.setFeaturedArticles(articleCardDTOs);\n        return topAndFeaturedArticlesDTO;\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticles() {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, 0)\n                .in(Article::getStatus, 1, 2);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArticles(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticlesByCategoryId(Integer categoryId) {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>().eq(Article::getCategoryId, categoryId);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.getArticlesByCategoryId(PageUtil.getLimitCurrent(), PageUtil.getSize(), categoryId);\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }\n\n    @SneakyThrows\n    @Override\n    public ArticleDTO getArticleById(Integer articleId) {\n        Article articleForCheck = articleMapper.selectOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articleId));\n        if (Objects.isNull(articleForCheck)) {\n            return null;\n        }\n        if (articleForCheck.getStatus().equals(2)) {\n            Boolean isAccess;\n            try {\n                isAccess = redisService.sIsMember(ARTICLE_ACCESS + UserUtil.getUserDetailsDTO().getId(), articleId);\n            } catch (Exception exception) {\n                throw new BizException(ARTICLE_ACCESS_FAIL);\n            }\n            if (isAccess.equals(false)) {\n                throw new BizException(ARTICLE_ACCESS_FAIL);\n            }\n        }\n        updateArticleViewsCount(articleId);\n        CompletableFuture<ArticleDTO> asyncArticle = CompletableFuture.supplyAsync(() -> articleMapper.getArticleById(articleId));\n        CompletableFuture<ArticleCardDTO> asyncPreArticle = CompletableFuture.supplyAsync(() -> {\n            ArticleCardDTO preArticle = articleMapper.getPreArticleById(articleId);\n            if (Objects.isNull(preArticle)) {\n                preArticle = articleMapper.getLastArticle();\n            }\n            return preArticle;\n        });\n        CompletableFuture<ArticleCardDTO> asyncNextArticle = CompletableFuture.supplyAsync(() -> {\n            ArticleCardDTO nextArticle = articleMapper.getNextArticleById(articleId);\n            if (Objects.isNull(nextArticle)) {\n                nextArticle = articleMapper.getFirstArticle();\n            }\n            return nextArticle;\n        });\n        ArticleDTO article = asyncArticle.get();\n        if (Objects.isNull(article)) {\n            return null;\n        }\n        Double score = redisService.zScore(ARTICLE_VIEWS_COUNT, articleId);\n        if (Objects.nonNull(score)) {\n            article.setViewCount(score.intValue());\n        }\n        article.setPreArticleCard(asyncPreArticle.get());\n        article.setNextArticleCard(asyncNextArticle.get());\n        return article;\n    }\n\n    @Override\n    public void accessArticle(ArticlePasswordVO articlePasswordVO) {\n        Article article = articleMapper.selectOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articlePasswordVO.getArticleId()));\n        if (Objects.isNull(article)) {\n            throw new BizException(\"文章不存在\");\n        }\n        if (article.getPassword().equals(articlePasswordVO.getArticlePassword())) {\n            redisService.sAdd(ARTICLE_ACCESS + UserUtil.getUserDetailsDTO().getId(), articlePasswordVO.getArticleId());\n        } else {\n            throw new BizException(\"密码错误\");\n        }\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticlesByTagId(Integer tagId) {\n        LambdaQueryWrapper<ArticleTag> queryWrapper = new LambdaQueryWrapper<ArticleTag>().eq(ArticleTag::getTagId, tagId);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleTagMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArticlesByTagId(PageUtil.getLimitCurrent(), PageUtil.getSize(), tagId);\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<ArchiveDTO> listArchives() {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>().eq(Article::getIsDelete, 0).eq(Article::getStatus, 1);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArchives(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        HashMap<String, List<ArticleCardDTO>> map = new HashMap<>();\n        for (ArticleCardDTO article : articles) {\n            LocalDateTime createTime = article.getCreateTime();\n            int month = createTime.getMonth().getValue();\n            int year = createTime.getYear();\n            String key = year + \"-\" + month;\n            if (Objects.isNull(map.get(key))) {\n                List<ArticleCardDTO> articleCardDTOS = new ArrayList<>();\n                articleCardDTOS.add(article);\n                map.put(key, articleCardDTOS);\n            } else {\n                map.get(key).add(article);\n            }\n        }\n        List<ArchiveDTO> archiveDTOs = new ArrayList<>();\n        map.forEach((key, value) -> archiveDTOs.add(ArchiveDTO.builder().Time(key).articles(value).build()));\n        archiveDTOs.sort((o1, o2) -> {\n            String[] o1s = o1.getTime().split(\"-\");\n            String[] o2s = o2.getTime().split(\"-\");\n            int o1Year = Integer.parseInt(o1s[0]);\n            int o1Month = Integer.parseInt(o1s[1]);\n            int o2Year = Integer.parseInt(o2s[0]);\n            int o2Month = Integer.parseInt(o2s[1]);\n            if (o1Year > o2Year) {\n                return -1;\n            } else if (o1Year < o2Year) {\n                return 1;\n            } else return Integer.compare(o2Month, o1Month);\n        });\n        return new PageResultDTO<>(archiveDTOs, asyncCount.get());\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<ArticleAdminDTO> listArticlesAdmin(ConditionVO conditionVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.countArticleAdmins(conditionVO));\n        List<ArticleAdminDTO> articleAdminDTOs = articleMapper.listArticlesAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        Map<Object, Double> viewsCountMap = redisService.zAllScore(ARTICLE_VIEWS_COUNT);\n        articleAdminDTOs.forEach(item -> {\n            Double viewsCount = viewsCountMap.get(item.getId());\n            if (Objects.nonNull(viewsCount)) {\n                item.setViewsCount(viewsCount.intValue());\n            }\n        });\n        return new PageResultDTO<>(articleAdminDTOs, asyncCount.get());\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\n        Category category = saveArticleCategory(articleVO);\n        Article article = BeanCopyUtil.copyObject(articleVO, Article.class);\n        if (Objects.nonNull(category)) {\n            article.setCategoryId(category.getId());\n        }\n        article.setUserId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        this.saveOrUpdate(article);\n        saveArticleTag(articleVO, article.getId());\n        if (article.getStatus().equals(1)) {\n            rabbitTemplate.convertAndSend(SUBSCRIBE_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(article.getId()), new MessageProperties()));\n        }\n    }\n\n    @Override\n    public void updateArticleTopAndFeatured(ArticleTopFeaturedVO articleTopFeaturedVO) {\n        Article article = Article.builder()\n                .id(articleTopFeaturedVO.getId())\n                .isTop(articleTopFeaturedVO.getIsTop())\n                .isFeatured(articleTopFeaturedVO.getIsFeatured())\n                .build();\n        articleMapper.updateById(article);\n    }\n\n    @Override\n    public void updateArticleDelete(DeleteVO deleteVO) {\n        List<Article> articles = deleteVO.getIds().stream()\n                .map(id -> Article.builder()\n                        .id(id)\n                        .isDelete(deleteVO.getIsDelete())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(articles);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deleteArticles(List<Integer> articleIds) {\n        articleTagMapper.delete(new LambdaQueryWrapper<ArticleTag>()\n                .in(ArticleTag::getArticleId, articleIds));\n        articleMapper.deleteBatchIds(articleIds);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public ArticleAdminViewDTO getArticleByIdAdmin(Integer articleId) {\n        Article article = articleMapper.selectById(articleId);\n        Category category = categoryMapper.selectById(article.getCategoryId());\n        String categoryName = null;\n        if (Objects.nonNull(category)) {\n            categoryName = category.getCategoryName();\n        }\n        List<String> tagNames = tagMapper.listTagNamesByArticleId(articleId);\n        ArticleAdminViewDTO articleAdminViewDTO = BeanCopyUtil.copyObject(article, ArticleAdminViewDTO.class);\n        articleAdminViewDTO.setCategoryName(categoryName);\n        articleAdminViewDTO.setTagNames(tagNames);\n        return articleAdminViewDTO;\n    }\n\n    @Override\n    public List<String> exportArticles(List<Integer> articleIds) {\n        List<Article> articles = articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                .select(Article::getArticleTitle, Article::getArticleContent)\n                .in(Article::getId, articleIds));\n        List<String> urls = new ArrayList<>();\n        for (Article article : articles) {\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\n                urls.add(url);\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new BizException(\"导出文章失败\");\n            }\n        }\n        return urls;\n    }\n\n    @Override\n    public List<ArticleSearchDTO> listArticlesBySearch(ConditionVO condition) {\n        return searchStrategyContext.executeSearchStrategy(condition.getKeywords());\n    }\n\n    public void updateArticleViewsCount(Integer articleId) {\n        redisService.zIncr(ARTICLE_VIEWS_COUNT, articleId, 1D);\n    }\n\n    private Category saveArticleCategory(ArticleVO articleVO) {\n        Category category = categoryMapper.selectOne(new LambdaQueryWrapper<Category>()\n                .eq(Category::getCategoryName, articleVO.getCategoryName()));\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\n            category = Category.builder()\n                    .categoryName(articleVO.getCategoryName())\n                    .build();\n            categoryMapper.insert(category);\n        }\n        return category;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void saveArticleTag(ArticleVO articleVO, Integer articleId) {\n        if (Objects.nonNull(articleVO.getId())) {\n            articleTagMapper.delete(new LambdaQueryWrapper<ArticleTag>()\n                    .eq(ArticleTag::getArticleId, articleVO.getId()));\n        }\n        List<String> tagNames = articleVO.getTagNames();\n        if (CollectionUtils.isNotEmpty(tagNames)) {\n            List<Tag> existTags = tagService.list(new LambdaQueryWrapper<Tag>()\n                    .in(Tag::getTagName, tagNames));\n            List<String> existTagNames = existTags.stream()\n                    .map(Tag::getTagName)\n                    .collect(Collectors.toList());\n            List<Integer> existTagIds = existTags.stream()\n                    .map(Tag::getId)\n                    .collect(Collectors.toList());\n            tagNames.removeAll(existTagNames);\n            if (CollectionUtils.isNotEmpty(tagNames)) {\n                List<Tag> tags = tagNames.stream().map(item -> Tag.builder()\n                                .tagName(item)\n                                .build())\n                        .collect(Collectors.toList());\n                tagService.saveBatch(tags);\n                List<Integer> tagIds = tags.stream()\n                        .map(Tag::getId)\n                        .collect(Collectors.toList());\n                existTagIds.addAll(tagIds);\n            }\n            List<ArticleTag> articleTags = existTagIds.stream().map(item -> ArticleTag.builder()\n                            .articleId(articleId)\n                            .tagId(item)\n                            .build())\n                    .collect(Collectors.toList());\n            articleTagService.saveBatch(articleTags);\n        }\n    }\n\n}",
        "description": "这段代码是一个文章服务的实现类，包含了对文章的增删改查等操作，同时还包括了一些异步处理和事务操作。",
        "label": "JavaClass"
    },
    {
        "id": 596,
        "fullName": "com.aurora.service.PhotoService",
        "comment": "",
        "content": "public interface PhotoService extends IService<Photo> {\n\n    PageResultDTO<PhotoAdminDTO> listPhotos(ConditionVO conditionVO);\n\n    void updatePhoto(PhotoInfoVO photoInfoVO);\n\n    void savePhotos(PhotoVO photoVO);\n\n    void updatePhotosAlbum(PhotoVO photoVO);\n\n    void updatePhotoDelete(DeleteVO deleteVO);\n\n    void deletePhotos(List<Integer> photoIds);\n\n    PhotoDTO listPhotosByAlbumId(Integer albumId);\n\n}",
        "description": "PhotoService接口定义了对相片的操作方法，包括列出相片、更新相片信息、保存相片、更新相片相册信息、标记相片删除、删除相片、根据相册ID列出相片。",
        "label": "JavaClass"
    },
    {
        "id": 597,
        "fullName": "com.aurora.strategy.UploadStrategy",
        "comment": "",
        "content": "public interface UploadStrategy {\n\n    String uploadFile(MultipartFile file, String path);\n\n    String uploadFile(String fileName, InputStream inputStream, String path);\n\n}",
        "description": "该接口定义了上传文件的策略，包括通过MultipartFile对象和文件路径上传文件，以及通过文件名、输入流和文件路径上传文件。",
        "label": "JavaClass"
    },
    {
        "id": 598,
        "fullName": "com.aurora.entity.OperationLog",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_operation_log\")\npublic class OperationLog {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String optModule;\n\n    private String optUri;\n\n    private String optType;\n\n    private String optMethod;\n\n    private String optDesc;\n\n    private String requestMethod;\n\n    private String requestParam;\n\n    private String responseData;\n\n    private Integer userId;\n\n    private String nickname;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n}",
        "description": "这段代码定义了一个名为OperationLog的Java类，用于操作日志记录，包含了操作模块、操作URI、操作类型、操作方法、操作描述、请求方法、请求参数、响应数据、用户ID、昵称、IP地址、IP来源、创建时间和更新时间等属性。使用了Lombok的@Data、@Builder、@AllArgsConstructor、@NoArgsConstructor注解以及MyBatis-Plus的@TableName、@TableId、@TableField注解。",
        "label": "JavaClass"
    },
    {
        "id": 599,
        "fullName": "com.aurora.controller.JobLogController",
        "comment": "",
        "content": "@Api(tags = \"定时任务日志模块\")\n@RestController\npublic class JobLogController {\n\n    @Autowired\n    private JobLogService jobLogService;\n\n    @ApiOperation(\"获取定时任务的日志列表\")\n    @GetMapping(\"\/admin\/jobLogs\")\n    public ResultVO<PageResultDTO<JobLogDTO>> listJobLogs(JobLogSearchVO jobLogSearchVO) {\n        return ResultVO.ok(jobLogService.listJobLogs(jobLogSearchVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(\"删除定时任务的日志\")\n    @DeleteMapping(\"\/admin\/jobLogs\")\n    public ResultVO<?> deleteJobLogs(@RequestBody List<Integer> ids) {\n        jobLogService.deleteJobLogs(ids);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(\"清除定时任务的日志\")\n    @DeleteMapping(\"\/admin\/jobLogs\/clean\")\n    public ResultVO<?> cleanJobLogs() {\n        jobLogService.cleanJobLogs();\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"获取定时任务日志的所有组名\")\n    @GetMapping(\"\/admin\/jobLogs\/jobGroups\")\n    public ResultVO<?> listJobLogGroups() {\n        return ResultVO.ok(jobLogService.listJobLogGroups());\n    }\n}",
        "description": "这段代码是一个定时任务日志模块的后端控制器，包括获取定时任务日志列表、删除日志、清除日志和获取所有组名的功能。其中包含了使用@Api和@ApiOperation注解进行API文档标记。",
        "label": "JavaClass"
    },
    {
        "id": 600,
        "fullName": "com.aurora.model.dto.MenuDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MenuDTO {\n\n    private Integer id;\n\n    private String name;\n\n    private String path;\n\n    private String component;\n\n    private String icon;\n\n    private LocalDateTime createTime;\n\n    private Integer orderNum;\n\n    private Integer isDisable;\n\n    private Integer isHidden;\n\n    private List<MenuDTO> children;\n\n}",
        "description": "这段代码是一个用于表示菜单的数据传输对象（DTO），包含了菜单的各种属性和子菜单的列表。",
        "label": "JavaClass"
    },
    {
        "id": 601,
        "fullName": "com.aurora.model.dto.UserAreaDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UserAreaDTO {\n\n    private String name;\n\n    private Long value;\n\n}",
        "description": "这段代码定义了一个包含名称和值属性的用户区域数据传输对象（DTO），使用了Lombok注解简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 602,
        "fullName": "com.aurora.service.impl.RoleResourceServiceImpl",
        "comment": "",
        "content": "@Service\npublic class RoleResourceServiceImpl extends ServiceImpl<RoleResourceMapper, RoleResource> implements RoleResourceService {\n\n}",
        "description": "这段代码是一个角色资源服务的实现类，继承自ServiceImpl类，用于操作角色资源的数据。",
        "label": "JavaClass"
    },
    {
        "id": 603,
        "fullName": "com.aurora.service.PhotoAlbumService",
        "comment": "",
        "content": "public interface PhotoAlbumService extends IService<PhotoAlbum> {\n\n    void saveOrUpdatePhotoAlbum(PhotoAlbumVO photoAlbumVO);\n\n    PageResultDTO<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(ConditionVO condition);\n\n    List<PhotoAlbumDTO> listPhotoAlbumInfosAdmin();\n\n    PhotoAlbumAdminDTO getPhotoAlbumByIdAdmin(Integer albumId);\n\n    void deletePhotoAlbumById(Integer albumId);\n\n    List<PhotoAlbumDTO> listPhotoAlbums();\n\n}",
        "description": "这段代码定义了一个名为PhotoAlbumService的接口，包含了对相册数据的增删改查操作，以及一些管理端和普通用户端的查询功能。",
        "label": "JavaClass"
    },
    {
        "id": 604,
        "fullName": "com.aurora.strategy.impl.MinioUploadStrategyImpl",
        "comment": "",
        "content": "@Service(\"minioUploadStrategyImpl\")\npublic class MinioUploadStrategyImpl extends AbstractUploadStrategyImpl {\n\n    @Autowired\n    private MinioProperties minioProperties;\n\n    @Override\n    public Boolean exists(String filePath) {\n        boolean exist = true;\n        try {\n            getMinioClient()\n                    .statObject(StatObjectArgs.builder().bucket(minioProperties.getBucketName()).object(filePath).build());\n        } catch (Exception e) {\n            exist = false;\n        }\n        return exist;\n    }\n\n    @SneakyThrows\n    @Override\n    public void upload(String path, String fileName, InputStream inputStream) {\n        getMinioClient().putObject(\n                PutObjectArgs.builder().bucket(minioProperties.getBucketName()).object(path + fileName).stream(\n                                inputStream, inputStream.available(), -1)\n                        .build());\n    }\n\n    @Override\n    public String getFileAccessUrl(String filePath) {\n        return minioProperties.getUrl() + filePath;\n    }\n\n    private MinioClient getMinioClient() {\n        return MinioClient.builder()\n                .endpoint(minioProperties.getEndpoint())\n                .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())\n                .build();\n    }\n\n}",
        "description": "该代码是一个名为MinioUploadStrategyImpl的类，是一个用于处理文件上传和检查文件是否存在的策略实现类。它继承自AbstractUploadStrategyImpl，并包含了上传、检查文件存在性和获取文件访问URL等功能的实现方法。代码中使用了MinioClient来连接到Minio服务，并通过MinioProperties来获取配置信息。",
        "label": "JavaClass"
    },
    {
        "id": 605,
        "fullName": "com.aurora.model.dto.UserOnlineDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserOnlineDTO {\n\n    private Integer userInfoId;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private String browser;\n\n    private String os;\n\n    private LocalDateTime lastLoginTime;\n\n}",
        "description": "这段代码定义了一个UserOnlineDTO类，用于表示在线用户的信息，包括用户ID、昵称、头像、IP地址、IP来源、浏览器、操作系统和最后登录时间。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 606,
        "fullName": "com.aurora.config.RedisConfig",
        "comment": "",
        "content": "@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n        jackson2JsonRedisSerializer.setObjectMapper(mapper);\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n}",
        "description": "这段代码定义了一个Redis配置类，用于创建一个RedisTemplate实例，并设置序列化器以及其他属性。",
        "label": "JavaClass"
    },
    {
        "id": 607,
        "fullName": "com.aurora.constant.ScheduleConstant",
        "comment": "",
        "content": "public interface ScheduleConstant {\n\n    int MISFIRE_DEFAULT = 0;\n\n    int MISFIRE_IGNORE_MISFIRES = 1;\n\n    int MISFIRE_FIRE_AND_PROCEED = 2;\n\n    int MISFIRE_DO_NOTHING = 3;\n\n    String TASK_CLASS_NAME = \"TASK_CLASS_NAME\";\n\n    String TASK_PROPERTIES = \"TASK_PROPERTIES\";\n\n}",
        "description": "This interface defines constants related to scheduling, including misfire handling options and task properties.",
        "label": "JavaClass"
    },
    {
        "id": 608,
        "fullName": "com.aurora.constant.AuthConstant",
        "comment": "",
        "content": "public interface AuthConstant {\n\n    int TWENTY_MINUTES = 20;\n\n    int EXPIRE_TIME = 7 * 24 * 60 * 60;\n\n    String TOKEN_HEADER = \"Authorization\";\n\n    String TOKEN_PREFIX = \"Bearer \";\n\n}",
        "description": "这段代码定义了一些常量，包括20分钟的时间常量、7天的过期时间常量，以及用于验证的token头和前缀。",
        "label": "JavaClass"
    },
    {
        "id": 609,
        "fullName": "com.aurora.model.dto.UniqueViewDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class UniqueViewDTO {\n\n    private String day;\n\n    private Integer viewsCount;\n\n}",
        "description": "UniqueViewDTO is a data transfer object class with properties for day and viewsCount, utilizing Lombok annotations for data generation and builder pattern.",
        "label": "JavaClass"
    },
    {
        "id": 610,
        "fullName": "com.aurora.constant.RedisConstant",
        "comment": "",
        "content": "public interface RedisConstant {\n\n    long CODE_EXPIRE_TIME = 15 * 60;\n\n    String USER_CODE_KEY = \"code:\";\n\n    String BLOG_VIEWS_COUNT = \"blog_views_count\";\n\n    String ARTICLE_VIEWS_COUNT = \"article_views_count\";\n\n    String WEBSITE_CONFIG = \"website_config\";\n\n    String USER_AREA = \"user_area\";\n\n    String VISITOR_AREA = \"visitor_area\";\n\n    String ABOUT = \"about\";\n\n    String UNIQUE_VISITOR = \"unique_visitor\";\n\n    String LOGIN_USER = \"login_user\";\n\n    String ARTICLE_ACCESS = \"article_access:\";\n\n}",
        "description": "这段代码定义了一些常量，包括用户验证码过期时间、用户验证码键、博客浏览量、文章浏览量、网站配置、用户地区、访客地区、关于页面、独立访客、登录用户、文章访问等信息。",
        "label": "JavaClass"
    },
    {
        "id": 611,
        "fullName": "com.aurora.mapper.MenuMapper",
        "comment": "",
        "content": "@Repository\npublic interface MenuMapper extends BaseMapper<Menu> {\n\n    List<Menu> listMenusByUserInfoId(Integer userInfoId);\n\n}",
        "description": "这段代码定义了一个MenuMapper接口，用于操作菜单相关数据，包括根据用户信息ID查询菜单列表。",
        "label": "JavaClass"
    },
    {
        "id": 612,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl",
        "comment": "",
        "content": "@Service\npublic abstract class AbstractSocialLoginStrategyImpl implements SocialLoginStrategy {\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private UserRoleMapper userRoleMapper;\n\n    @Autowired\n    private UserDetailServiceImpl userDetailService;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @Resource\n    private HttpServletRequest request;\n\n    @Override\n    public UserInfoDTO login(String data) {\n        UserDetailsDTO userDetailsDTO;\n        SocialTokenDTO socialToken = getSocialToken(data);\n        String ipAddress = IpUtil.getIpAddress(request);\n        String ipSource = IpUtil.getIpSource(ipAddress);\n        UserAuth user = getUserAuth(socialToken);\n        if (Objects.nonNull(user)) {\n            userDetailsDTO = getUserDetail(user, ipAddress, ipSource);\n        } else {\n            userDetailsDTO = saveUserDetail(socialToken, ipAddress, ipSource);\n        }\n        if (userDetailsDTO.getIsDisable().equals(TRUE)) {\n            throw new BizException(\"用户帐号已被锁定\");\n        }\n        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(userDetailsDTO, null, userDetailsDTO.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(auth);\n        UserInfoDTO userInfoDTO = BeanCopyUtil.copyObject(userDetailsDTO, UserInfoDTO.class);\n        String token = tokenService.createToken(userDetailsDTO);\n        userInfoDTO.setToken(token);\n        return userInfoDTO;\n    }\n\n    public abstract SocialTokenDTO getSocialToken(String data);\n\n    public abstract SocialUserInfoDTO getSocialUserInfo(SocialTokenDTO socialTokenDTO);\n\n    private UserAuth getUserAuth(SocialTokenDTO socialTokenDTO) {\n        return userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .eq(UserAuth::getUsername, socialTokenDTO.getOpenId())\n                .eq(UserAuth::getLoginType, socialTokenDTO.getLoginType()));\n    }\n\n    private UserDetailsDTO getUserDetail(UserAuth user, String ipAddress, String ipSource) {\n        userAuthMapper.update(new UserAuth(), new LambdaUpdateWrapper<UserAuth>()\n                .set(UserAuth::getLastLoginTime, LocalDateTime.now())\n                .set(UserAuth::getIpAddress, ipAddress)\n                .set(UserAuth::getIpSource, ipSource)\n                .eq(UserAuth::getId, user.getId()));\n        return userDetailService.convertUserDetail(user, request);\n    }\n\n    private UserDetailsDTO saveUserDetail(SocialTokenDTO socialToken, String ipAddress, String ipSource) {\n        SocialUserInfoDTO socialUserInfo = getSocialUserInfo(socialToken);\n        UserInfo userInfo = UserInfo.builder()\n                .nickname(socialUserInfo.getNickname())\n                .avatar(socialUserInfo.getAvatar())\n                .build();\n        userInfoMapper.insert(userInfo);\n        UserAuth userAuth = UserAuth.builder()\n                .userInfoId(userInfo.getId())\n                .username(socialToken.getOpenId())\n                .password(socialToken.getAccessToken())\n                .loginType(socialToken.getLoginType())\n                .lastLoginTime(LocalDateTime.now())\n                .ipAddress(ipAddress)\n                .ipSource(ipSource)\n                .build();\n        userAuthMapper.insert(userAuth);\n        UserRole userRole = UserRole.builder()\n                .userId(userInfo.getId())\n                .roleId(RoleEnum.USER.getRoleId())\n                .build();\n        userRoleMapper.insert(userRole);\n        return userDetailService.convertUserDetail(userAuth, request);\n    }\n\n}",
        "description": "这段代码是一个抽象的社交登录策略实现类，通过用户提供的社交令牌实现用户登录功能，并处理用户信息的获取和存储。",
        "label": "JavaClass"
    },
    {
        "id": 613,
        "fullName": "com.aurora.controller.TagController",
        "comment": "",
        "content": "@Api(tags = \"标签模块\")\n@RestController\npublic class TagController {\n\n\n    @Autowired\n    private TagService tagService;\n\n    @ApiOperation(\"获取所有标签\")\n    @GetMapping(\"\/tags\/all\")\n    public ResultVO<List<TagDTO>> getAllTags() {\n        return ResultVO.ok(tagService.listTags());\n    }\n\n    @ApiOperation(\"获取前十个标签\")\n    @GetMapping(\"\/tags\/topTen\")\n    public ResultVO<List<TagDTO>> getTopTenTags() {\n        return ResultVO.ok(tagService.listTopTenTags());\n    }\n\n    @ApiOperation(value = \"查询后台标签列表\")\n    @GetMapping(\"\/admin\/tags\")\n    public ResultVO<PageResultDTO<TagAdminDTO>> listTagsAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(tagService.listTagsAdmin(conditionVO));\n    }\n\n    @ApiOperation(value = \"搜索文章标签\")\n    @GetMapping(\"\/admin\/tags\/search\")\n    public ResultVO<List<TagAdminDTO>> listTagsAdminBySearch(ConditionVO condition) {\n        return ResultVO.ok(tagService.listTagsAdminBySearch(condition));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改标签\")\n    @PostMapping(\"\/admin\/tags\")\n    public ResultVO<?> saveOrUpdateTag(@Valid @RequestBody TagVO tagVO) {\n        tagService.saveOrUpdateTag(tagVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除标签\")\n    @DeleteMapping(\"\/admin\/tags\")\n    public ResultVO<?> deleteTag(@RequestBody List<Integer> tagIdList) {\n        tagService.deleteTag(tagIdList);\n        return ResultVO.ok();\n    }\n}",
        "description": "这段代码是一个标签模块的后端控制器，包括获取所有标签、获取前十个标签、查询后台标签列表、搜索文章标签、添加或修改标签和删除标签等功能。其中包括使用了Swagger的@Api和@ApiOperation注解进行接口文档的生成，同时还使用了自定义的@OptLog注解记录操作日志。",
        "label": "JavaClass"
    },
    {
        "id": 614,
        "fullName": "com.aurora.service.CommentService",
        "comment": "",
        "content": "public interface CommentService extends IService<Comment> {\n\n    void saveComment(CommentVO commentVO);\n\n    PageResultDTO<CommentDTO> listComments(CommentVO commentVO);\n\n    List<ReplyDTO> listRepliesByCommentId(Integer commentId);\n\n    List<CommentDTO> listTopSixComments();\n\n    PageResultDTO<CommentAdminDTO> listCommentsAdmin(ConditionVO conditionVO);\n\n    void updateCommentsReview(ReviewVO reviewVO);\n\n}",
        "description": "该接口定义了评论服务的相关操作，包括保存评论、获取评论列表、根据评论ID获取回复列表、获取热门评论列表、获取管理员评论列表以及更新评论审核状态。",
        "label": "JavaClass"
    },
    {
        "id": 615,
        "fullName": "com.aurora.strategy.context.SearchStrategyContext",
        "comment": "",
        "content": "@Service\npublic class SearchStrategyContext {\n\n    @Value(\"${search.mode}\")\n    private String searchMode;\n\n    @Autowired\n    private Map<String, SearchStrategy> searchStrategyMap;\n\n    public List<ArticleSearchDTO> executeSearchStrategy(String keywords) {\n        return searchStrategyMap.get(getStrategy(searchMode)).searchArticle(keywords);\n    }\n\n}",
        "description": "这段代码定义了一个搜索策略上下文类，根据配置的搜索模式选择相应的搜索策略进行文章搜索。",
        "label": "JavaClass"
    },
    {
        "id": 616,
        "fullName": "com.aurora.model.dto.UserRoleDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserRoleDTO {\n\n    private Integer id;\n\n    private String roleName;\n\n}",
        "description": "这是一个包含id和roleName属性的UserRoleDTO数据传输对象，使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 617,
        "fullName": "com.aurora.mapper.RoleMapper",
        "comment": "",
        "content": "@Repository\npublic interface RoleMapper extends BaseMapper<Role> {\n\n    List<ResourceRoleDTO> listResourceRoles();\n\n    List<String> listRolesByUserInfoId(@Param(\"userInfoId\") Integer userInfoId);\n\n    List<RoleDTO> listRoles(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n}",
        "description": "RoleMapper是一个用于操作角色信息的数据访问接口，提供了获取资源角色关联信息、根据用户信息ID获取角色列表、以及根据条件获取角色列表的方法。",
        "label": "JavaClass"
    },
    {
        "id": 618,
        "fullName": "com.aurora.util.FileUtil",
        "comment": "",
        "content": "@Log4j2\npublic class FileUtil {\n\n    public static String getMd5(InputStream inputStream) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"md5\");\n            byte[] buffer = new byte[8192];\n            int length;\n            while ((length = inputStream.read(buffer)) != -1) {\n                md5.update(buffer, 0, length);\n            }\n            return new String(Hex.encodeHex(md5.digest()));\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static String getExtName(String fileName) {\n        if (StringUtils.isBlank(fileName)) {\n            return \"\";\n        }\n        return fileName.substring(fileName.lastIndexOf(\".\"));\n    }\n\n    public static File multipartFileToFile(MultipartFile multipartFile) {\n        File file = null;\n        try {\n            String originalFilename = multipartFile.getOriginalFilename();\n            String[] filename = Objects.requireNonNull(originalFilename).split(\"\\\\.\");\n            file = File.createTempFile(filename[0], filename[1]);\n            multipartFile.transferTo(file);\n            file.deleteOnExit();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return file;\n    }\n\n\n    private static double getAccuracy(long size) {\n        double accuracy;\n        if (size < 900) {\n            accuracy = 0.85;\n        } else if (size < 2048) {\n            accuracy = 0.6;\n        } else if (size < 3072) {\n            accuracy = 0.44;\n        } else {\n            accuracy = 0.4;\n        }\n        return accuracy;\n    }\n\n}",
        "description": "这段代码是一个文件工具类，包含了一些文件处理的方法。其中包括计算文件的MD5值、获取文件后缀名、将MultipartFile转换为File对象等功能。还有一个私有方法用于根据文件大小获取精度值。",
        "label": "JavaClass"
    },
    {
        "id": 619,
        "fullName": "com.aurora.model.dto.AuroraAdminInfoDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AuroraAdminInfoDTO {\n\n    private Integer viewsCount;\n\n    private Integer messageCount;\n\n    private Integer userCount;\n\n    private Integer articleCount;\n\n    private List<CategoryDTO> categoryDTOs;\n\n    private List<TagDTO> tagDTOs;\n\n    private List<ArticleStatisticsDTO> articleStatisticsDTOs;\n\n    private List<UniqueViewDTO> uniqueViewDTOs;\n\n    private List<ArticleRankDTO> articleRankDTOs;\n\n}",
        "description": "A data transfer object representing admin information in an Aurora blog system, including views count, message count, user count, article count, categories, tags, article statistics, unique views, and article rankings. It is built using Lombok annotations and has constructors for both no arguments and all arguments.",
        "label": "JavaClass"
    },
    {
        "id": 620,
        "fullName": "com.aurora.entity.RoleResource",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_role_resource\")\npublic class RoleResource {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer roleId;\n\n    private Integer resourceId;\n\n}",
        "description": "这段代码定义了一个名为RoleResource的实体类，用于映射数据库中的t_role_resource表，包含id、roleId和resourceId三个属性。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解简化代码。@TableId注解定义了id作为主键，类型为自增。",
        "label": "JavaClass"
    },
    {
        "id": 621,
        "fullName": "com.aurora.util.CronUtil",
        "comment": "",
        "content": "public class CronUtil {\n\n    public static boolean isValid(String cronExpression) {\n        return CronExpression.isValidExpression(cronExpression);\n    }\n\n    public static String getInvalidMessage(String cronExpression) {\n        try {\n            new CronExpression(cronExpression);\n            return null;\n        } catch (Exception pe) {\n            return pe.getMessage();\n        }\n    }\n\n    public static Date getNextExecution(String cronExpression) {\n        try {\n            CronExpression cron = new CronExpression(cronExpression);\n            return cron.getNextValidTimeAfter(new Date(System.currentTimeMillis()));\n        } catch (Exception e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }\n}",
        "description": "CronUtil类提供了用于验证cron表达式是否有效、获取无效消息和获取下一个执行时间的方法。",
        "label": "JavaClass"
    },
    {
        "id": 622,
        "fullName": "com.aurora.mapper.JobMapper",
        "comment": "",
        "content": "@Repository\npublic interface JobMapper extends BaseMapper<Job> {\n\n    Integer countJobs(@Param(\"jobSearchVO\") JobSearchVO jobSearchVO);\n\n    List<JobDTO> listJobs(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"jobSearchVO\")JobSearchVO jobSearchVO);\n\n    List<String> listJobGroups();\n\n}",
        "description": "This code defines a JobMapper interface that extends a BaseMapper interface and includes methods for counting jobs, listing jobs with search criteria, and listing job groups.",
        "label": "JavaClass"
    },
    {
        "id": 623,
        "fullName": "com.aurora.model.dto.EmailDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EmailDTO {\n\n    private String email;\n\n    private String subject;\n\n    private Map<String, Object> commentMap;\n\n    private String template;\n\n}",
        "description": "这段代码定义了一个用于存储邮件信息的数据传输对象类EmailDTO，包括邮件地址、主题、评论映射和模板。使用了Lombok注解@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor。",
        "label": "JavaClass"
    },
    {
        "id": 624,
        "fullName": "com.aurora.entity.PhotoAlbum",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@TableName(value = \"t_photo_album\")\npublic class PhotoAlbum {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String albumName;\n\n    private String albumDesc;\n\n    private String albumCover;\n\n    private Integer isDelete;\n\n    private Integer status;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码是一个名为PhotoAlbum的实体类，在博客系统的数据库中对应着t_photo_album表。它包含了相册的各种属性，如相册名称(albumName)、相册描述(albumDesc)、相册封面(albumCover)等。同时，它还使用了Lombok注解(@Data、@AllArgsConstructor、@NoArgsConstructor、@Builder)来简化代码的编写，并使用了MyBatis Plus注解(@TableName、@TableId、@TableField)来实现ORM映射。此外，createTime属性使用了@TableField注解的fill属性，表示在插入数据时自动填充当前时间；updateTime属性也使用了@TableField注解的fill属性，表示在更新数据时自动填充当前时间。",
        "label": "JavaClass"
    },
    {
        "id": 625,
        "fullName": "com.aurora.service.FriendLinkService",
        "comment": "",
        "content": "public interface FriendLinkService extends IService<FriendLink> {\n\n    List<FriendLinkDTO> listFriendLinks();\n\n    PageResultDTO<FriendLinkAdminDTO> listFriendLinksAdmin(ConditionVO conditionVO);\n\n    void saveOrUpdateFriendLink(FriendLinkVO friendLinkVO);\n\n}",
        "description": "一个友情链接服务接口，包含列出所有友情链接、列出管理员友情链接和保存或更新友情链接的方法。",
        "label": "JavaClass"
    },
    {
        "id": 626,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl",
        "comment": "",
        "content": "@Service\npublic class CategoryServiceImpl extends ServiceImpl<CategoryMapper, Category> implements CategoryService {\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Override\n    public List<CategoryDTO> listCategories() {\n        return categoryMapper.listCategories();\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<CategoryAdminDTO> listCategoriesAdmin(ConditionVO conditionVO) {\n        Integer count = categoryMapper.selectCount(new LambdaQueryWrapper<Category>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Category::getCategoryName, conditionVO.getKeywords()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<CategoryAdminDTO> categoryList = categoryMapper.listCategoriesAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(categoryList, count);\n    }\n\n    @SneakyThrows\n    @Override\n    public List<CategoryOptionDTO> listCategoriesBySearch(ConditionVO conditionVO) {\n        List<Category> categoryList = categoryMapper.selectList(new LambdaQueryWrapper<Category>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Category::getCategoryName, conditionVO.getKeywords())\n                .orderByDesc(Category::getId));\n        return BeanCopyUtil.copyList(categoryList, CategoryOptionDTO.class);\n    }\n\n\n    @Override\n    public void deleteCategories(List<Integer> categoryIds) {\n        Integer count = articleMapper.selectCount(new LambdaQueryWrapper<Article>()\n                .in(Article::getCategoryId, categoryIds));\n        if (count > 0) {\n            throw new BizException(\"删除失败，该分类下存在文章\");\n        }\n        categoryMapper.deleteBatchIds(categoryIds);\n    }\n\n    @Override\n    public void saveOrUpdateCategory(CategoryVO categoryVO) {\n        Category existCategory = categoryMapper.selectOne(new LambdaQueryWrapper<Category>()\n                .select(Category::getId)\n                .eq(Category::getCategoryName, categoryVO.getCategoryName()));\n        if (Objects.nonNull(existCategory) && !existCategory.getId().equals(categoryVO.getId())) {\n            throw new BizException(\"分类名已存在\");\n        }\n        Category category = Category.builder()\n                .id(categoryVO.getId())\n                .categoryName(categoryVO.getCategoryName())\n                .build();\n        this.saveOrUpdate(category);\n    }\n\n}",
        "description": "这段代码是一个博客系统的分类服务实现类，包含了列出分类、列出管理员分类、根据搜索列出分类、删除分类和保存\/更新分类等功能。",
        "label": "JavaClass"
    },
    {
        "id": 627,
        "fullName": "com.aurora.model.vo.DeleteVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class DeleteVO {\n\n    @NotNull(message = \"id不能为空\")\n    @ApiModelProperty(name = \"ids\", value = \"要删除的id\", required = true, dataType = \"List<Integer>\")\n    private List<Integer> ids;\n\n    @NotNull(message = \"状态值不能为空\")\n    @ApiModelProperty(name = \"isDelete\", value = \"删除状态\", required = true, dataType = \"Integer\")\n    private Integer isDelete;\n}",
        "description": "DeleteVO是一个用于接收删除操作请求的数据模型，包含要删除的id列表和删除状态值。",
        "label": "JavaClass"
    },
    {
        "id": 628,
        "fullName": "com.aurora.aspect.OperationLogAspect",
        "comment": "",
        "content": "@Aspect\n@Component\npublic class OperationLogAspect {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    @Pointcut(\"@annotation(com.aurora.annotation.OptLog)\")\n    public void operationLogPointCut() {\n    }\n\n    @AfterReturning(value = \"operationLogPointCut()\", returning = \"keys\")\n    @SuppressWarnings(\"unchecked\")\n    public void saveOperationLog(JoinPoint joinPoint, Object keys) {\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\n        OperationLog operationLog = new OperationLog();\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        OptLog optLog = method.getAnnotation(OptLog.class);\n        operationLog.setOptModule(api.tags()[0]);\n        operationLog.setOptType(optLog.optType());\n        operationLog.setOptDesc(apiOperation.value());\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = method.getName();\n        methodName = className + \".\" + methodName;\n        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\n        operationLog.setOptMethod(methodName);\n        if (joinPoint.getArgs().length > 0) {\n            if (joinPoint.getArgs()[0] instanceof MultipartFile) {\n                operationLog.setRequestParam(\"file\");\n            } else {\n                operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\n            }\n        }\n        operationLog.setResponseData(JSON.toJSONString(keys));\n        operationLog.setUserId(UserUtil.getUserDetailsDTO().getId());\n        operationLog.setNickname(UserUtil.getUserDetailsDTO().getNickname());\n        String ipAddress = IpUtil.getIpAddress(request);\n        operationLog.setIpAddress(ipAddress);\n        operationLog.setIpSource(IpUtil.getIpSource(ipAddress));\n        operationLog.setOptUri(request.getRequestURI());\n        applicationContext.publishEvent(new OperationLogEvent(operationLog));\n    }\n\n}",
        "description": "该类是一个切面，用于记录操作日志并将其保存到数据库中。在方法`saveOperationLog`中，会获取请求信息、操作模块、操作类型、操作描述、请求方法、请求参数、响应数据等信息，并最终发布一个操作日志事件。",
        "label": "JavaClass"
    },
    {
        "id": 629,
        "fullName": "com.aurora.entity.Resource",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_resource\")\npublic class Resource {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String resourceName;\n\n    private String url;\n\n    private String requestMethod;\n\n    private Integer parentId;\n\n    private Integer isAnonymous;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个资源实体类，用于存储博客系统中的资源信息，包括资源名、URL、请求方法、父级资源ID、是否匿名访问等属性，并使用Lombok和MyBatis Plus简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 630,
        "fullName": "com.aurora.model.vo.ArticlePasswordVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArticlePasswordVO {\n    private Integer articleId;\n    private String articlePassword;\n}",
        "description": "这段代码定义了一个ArticlePasswordVO类，用于存储文章的ID和密码。使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 631,
        "fullName": "com.aurora.model.vo.ReviewVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"审核\")\npublic class ReviewVO {\n\n    @NotNull(message = \"id不能为空\")\n    @ApiModelProperty(name = \"idList\", value = \"id列表\", required = true, dataType = \"List<Integer>\")\n    private List<Integer> ids;\n\n    @NotNull(message = \"状态值不能为空\")\n    @ApiModelProperty(name = \"isDelete\", value = \"删除状态\", required = true, dataType = \"Integer\")\n    private Integer isReview;\n\n}",
        "description": "一个用于表示审核信息的数据传输对象，包含审核id列表和审核状态值。",
        "label": "JavaClass"
    },
    {
        "id": 632,
        "fullName": "com.aurora.mapper.UserRoleMapper",
        "comment": "",
        "content": "@Repository\npublic interface UserRoleMapper extends BaseMapper<UserRole> {\n\n}",
        "description": "这段代码是一个用于操作用户角色关联表的数据访问对象接口，继承自一个基础的数据访问对象接口。",
        "label": "JavaClass"
    },
    {
        "id": 633,
        "fullName": "com.aurora.entity.ExceptionLog",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_exception_log\")\npublic class ExceptionLog {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String optUri;\n\n    private String optMethod;\n\n    private String requestMethod;\n\n    private String requestParam;\n\n    private String optDesc;\n\n    private String exceptionInfo;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个名为ExceptionLog的Java类，用于表示异常日志信息，并包含了id、optUri、optMethod、requestMethod、requestParam、optDesc、exceptionInfo、ipAddress、ipSource和createTime等属性。同时使用了Lombok的@Data、@Builder、@NoArgsConstructor、@AllArgsConstructor注解，以及MyBatis-Plus的@TableName和@TableId注解。",
        "label": "JavaClass"
    },
    {
        "id": 634,
        "fullName": "com.aurora.controller.OperationLogController",
        "comment": "",
        "content": "@Api(tags = \"操作日志模块\")\n@RestController\npublic class OperationLogController {\n\n    @Autowired\n    private OperationLogService operationLogService;\n\n    @ApiOperation(value = \"查看操作日志\")\n    @GetMapping(\"\/admin\/operation\/logs\")\n    public ResultVO<PageResultDTO<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\n        return ResultVO.ok(operationLogService.listOperationLogs(conditionVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除操作日志\")\n    @DeleteMapping(\"\/admin\/operation\/logs\")\n    public ResultVO<?> deleteOperationLogs(@RequestBody List<Integer> operationLogIds) {\n        operationLogService.removeByIds(operationLogIds);\n        return ResultVO.ok();\n    }\n\n}",
        "description": "这段代码是一个操作日志模块的控制器，包括查看操作日志和删除操作日志的功能。",
        "label": "JavaClass"
    },
    {
        "id": 635,
        "fullName": "com.aurora.util.BeanCopyUtil",
        "comment": "",
        "content": "public class BeanCopyUtil {\n\n    public static <T> T copyObject(Object source, Class<T> target) {\n        T temp = null;\n        try {\n            temp = target.newInstance();\n            if (null != source) {\n                org.springframework.beans.BeanUtils.copyProperties(source, temp);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return temp;\n    }\n\n    public static <T, S> List<T> copyList(List<S> source, Class<T> target) {\n        List<T> list = new ArrayList<>();\n        if (null != source && source.size() > 0) {\n            for (Object obj : source) {\n                list.add(BeanCopyUtil.copyObject(obj, target));\n            }\n        }\n        return list;\n    }\n\n}",
        "description": "这段代码实现了一个BeanCopyUtil工具类，提供了copyObject和copyList两个方法，用于复制对象和列表的属性。",
        "label": "JavaClass"
    },
    {
        "id": 636,
        "fullName": "com.aurora.model.vo.ResourceVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"资源\")\npublic class ResourceVO {\n\n    @ApiModelProperty(name = \"id\", value = \"资源id\", required = true, dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"资源名不能为空\")\n    @ApiModelProperty(name = \"resourceName\", value = \"资源名\", required = true, dataType = \"String\")\n    private String resourceName;\n\n    @ApiModelProperty(name = \"url\", value = \"资源路径\", required = true, dataType = \"String\")\n    private String url;\n\n    @ApiModelProperty(name = \"url\", value = \"资源路径\", required = true, dataType = \"String\")\n    private String requestMethod;\n\n    @ApiModelProperty(name = \"parentId\", value = \"父资源id\", required = true, dataType = \"Integer\")\n    private Integer parentId;\n\n    @ApiModelProperty(name = \"isAnonymous\", value = \"是否匿名访问\", required = true, dataType = \"Integer\")\n    private Integer isAnonymous;\n\n}",
        "description": "这段代码定义了一个资源视图对象（ResourceVO），包括资源id、资源名、资源路径、请求方法、父资源id和是否匿名访问等属性。ModelAttribute注解用于生成构造器、getter、setter等方法，同时指定了资源对象的描述信息。",
        "label": "JavaClass"
    },
    {
        "id": 637,
        "fullName": "com.aurora.service.impl.ExceptionLogServiceImpl",
        "comment": "",
        "content": "@Service\npublic class ExceptionLogServiceImpl extends ServiceImpl<ExceptionLogMapper, ExceptionLog> implements ExceptionLogService {\n\n    @Override\n    public PageResultDTO<ExceptionLogDTO> listExceptionLogs(ConditionVO conditionVO) {\n        Page<ExceptionLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<ExceptionLog> exceptionLogPage = this.page(page, new LambdaQueryWrapper<ExceptionLog>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), ExceptionLog::getOptDesc, conditionVO.getKeywords())\n                .orderByDesc(ExceptionLog::getId));\n        List<ExceptionLogDTO> exceptionLogDTOs = BeanCopyUtil.copyList(exceptionLogPage.getRecords(), ExceptionLogDTO.class);\n        return new PageResultDTO<>(exceptionLogDTOs, (int) exceptionLogPage.getTotal());\n    }\n\n}",
        "description": "该服务类 ExceptionLogServiceImpl 实现了 ExceptionLogService 接口，提供了列出异常日志的方法 listExceptionLogs，使用了分页查询和条件查询功能，返回了异常日志的分页结果。",
        "label": "JavaClass"
    },
    {
        "id": 638,
        "fullName": "com.aurora.consumer.CommentNoticeConsumer",
        "comment": "",
        "content": "@Component\n@RabbitListener(queues = EMAIL_QUEUE)\npublic class CommentNoticeConsumer {\n\n    @Autowired\n    private EmailUtil emailUtil;\n\n    @RabbitHandler\n    public void process(byte[] data) {\n        EmailDTO emailDTO = JSON.parseObject(new String(data), EmailDTO.class);\n        emailUtil.sendHtmlMail(emailDTO);\n    }\n\n}",
        "description": "这段代码是一个使用RabbitMQ实现的邮件通知消费者，负责处理评论通知并发送邮件通知给用户。",
        "label": "JavaClass"
    },
    {
        "id": 639,
        "fullName": "com.aurora.mapper.UniqueViewMapper",
        "comment": "",
        "content": "@Repository\npublic interface UniqueViewMapper extends BaseMapper<UniqueView> {\n\n    List<UniqueViewDTO> listUniqueViews(@Param(\"startTime\") Date startTime, @Param(\"endTime\") Date endTime);\n\n}",
        "description": "这段代码定义了一个用于处理唯一访问量的数据库操作接口UniqueViewMapper，包括查询指定时间范围内的唯一访问量数据。",
        "label": "JavaClass"
    },
    {
        "id": 640,
        "fullName": "com.aurora.service.CategoryService",
        "comment": "",
        "content": "public interface CategoryService extends IService<Category> {\n\n    List<CategoryDTO> listCategories();\n\n    PageResultDTO<CategoryAdminDTO> listCategoriesAdmin(ConditionVO conditionVO);\n\n    List<CategoryOptionDTO> listCategoriesBySearch(ConditionVO conditionVO);\n\n    void deleteCategories(List<Integer> categoryIds);\n\n    void saveOrUpdateCategory(CategoryVO categoryVO);\n\n}",
        "description": "This interface defines methods for managing categories in a blog system, including listing categories, listing categories for admin, listing categories by search, deleting categories, and saving or updating a category.",
        "label": "JavaClass"
    },
    {
        "id": 641,
        "fullName": "com.aurora.model.dto.PhotoDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class PhotoDTO {\n\n    private String photoAlbumCover;\n\n    private String photoAlbumName;\n\n    private List<String> photos;\n\n}",
        "description": "这段代码定义了一个名为PhotoDTO的数据传输对象，包含了相册封面、相册名称和照片列表等属性，并使用了Lombok注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 642,
        "fullName": "com.aurora.service.impl.OperationLogServiceImpl",
        "comment": "",
        "content": "@Service\npublic class OperationLogServiceImpl extends ServiceImpl<OperationLogMapper, OperationLog> implements OperationLogService {\n\n    @Override\n    public PageResultDTO<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\n        Page<OperationLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\n                .or()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\n                .orderByDesc(OperationLog::getId));\n        List<OperationLogDTO> operationLogDTOs = BeanCopyUtil.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\n        return new PageResultDTO<>(operationLogDTOs, (int) operationLogPage.getTotal());\n    }\n\n}",
        "description": "This code is a service implementation for handling operation logs in a blog system, including methods for listing operation logs based on specified conditions.",
        "label": "JavaClass"
    },
    {
        "id": 643,
        "fullName": "com.aurora.model.dto.QQTokenDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class QQTokenDTO {\n\n    private String openid;\n\n    private String client_id;\n\n}",
        "description": "这段代码定义了一个包含openid和client_id属性的QQTokenDTO数据传输对象，并使用了Lombok注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 644,
        "fullName": "com.aurora.handler.AuthenticationSuccessHandlerImpl",
        "comment": "",
        "content": "@Component\npublic class AuthenticationSuccessHandlerImpl implements AuthenticationSuccessHandler {\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        UserInfoDTO userLoginDTO = BeanCopyUtil.copyObject(UserUtil.getUserDetailsDTO(), UserInfoDTO.class);\n        if (Objects.nonNull(authentication)) {\n            UserDetailsDTO userDetailsDTO = (UserDetailsDTO) authentication.getPrincipal();\n            String token = tokenService.createToken(userDetailsDTO);\n            userLoginDTO.setToken(token);\n        }\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.ok(userLoginDTO)));\n        updateUserInfo();\n    }\n\n    @Async\n    public void updateUserInfo() {\n        UserAuth userAuth = UserAuth.builder()\n                .id(UserUtil.getUserDetailsDTO().getId())\n                .ipAddress(UserUtil.getUserDetailsDTO().getIpAddress())\n                .ipSource(UserUtil.getUserDetailsDTO().getIpSource())\n                .lastLoginTime(UserUtil.getUserDetailsDTO().getLastLoginTime())\n                .build();\n        userAuthMapper.updateById(userAuth);\n    }\n}",
        "description": "这段代码是一个认证成功处理器实现类，用于处理用户认证成功后的逻辑，包括生成令牌并返回给用户，以及异步更新用户信息。",
        "label": "JavaClass"
    },
    {
        "id": 645,
        "fullName": "com.aurora.model.vo.PhotoAlbumVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"相册\")\npublic class PhotoAlbumVO {\n\n    @ApiModelProperty(name = \"id\", value = \"相册id\", required = true, dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"相册名不能为空\")\n    @ApiModelProperty(name = \"albumName\", value = \"相册名\", required = true, dataType = \"String\")\n    private String albumName;\n\n    @ApiModelProperty(name = \"albumDesc\", value = \"相册描述\", dataType = \"String\")\n    private String albumDesc;\n\n    @NotBlank(message = \"相册封面不能为空\")\n    @ApiModelProperty(name = \"albumCover\", value = \"相册封面\", required = true, dataType = \"String\")\n    private String albumCover;\n\n    @ApiModelProperty(name = \"status\", value = \"状态值\", required = true, dataType = \"Integer\")\n    private Integer status;\n\n}",
        "description": "这段代码定义了一个名为PhotoAlbumVO的类，用于表示相册信息，包括相册id、相册名、相册描述、相册封面和状态值。使用了Lombok注解@Data、@AllArgsConstructor、@NoArgsConstructor、@Builder和Swagger注解@ApiModel、@ApiModelProperty。",
        "label": "JavaClass"
    },
    {
        "id": 646,
        "fullName": "com.aurora.config.properties.QQConfigProperties",
        "comment": "",
        "content": "@Data\n@Configuration\n@ConfigurationProperties(prefix = \"qq\")\npublic class QQConfigProperties {\n\n    private String appId;\n\n    private String checkTokenUrl;\n\n    private String userInfoUrl;\n\n}",
        "description": "这段代码定义了一个名为QQConfigProperties的类，用@Data注解标记为数据实体类，并使用@ConfigurationProperties注解指定了属性前缀为\"qq\"，包含了三个属性：appId、checkTokenUrl和userInfoUrl。",
        "label": "JavaClass"
    },
    {
        "id": 647,
        "fullName": "com.aurora.controller.RoleController",
        "comment": "",
        "content": "@Api(tags = \"角色模块\")\n@RestController\npublic class RoleController {\n\n    @Autowired\n    private RoleService roleService;\n\n    @ApiOperation(value = \"查询用户角色选项\")\n    @GetMapping(\"\/admin\/users\/role\")\n    public ResultVO<List<UserRoleDTO>> listUserRoles() {\n        return ResultVO.ok(roleService.listUserRoles());\n    }\n\n\n    @ApiOperation(value = \"查询角色列表\")\n    @GetMapping(\"\/admin\/roles\")\n    public ResultVO<PageResultDTO<RoleDTO>> listRoles(ConditionVO conditionVO) {\n        return ResultVO.ok(roleService.listRoles(conditionVO));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或更新角色\")\n    @PostMapping(\"\/admin\/role\")\n    public ResultVO<?> saveOrUpdateRole(@RequestBody @Valid RoleVO roleVO) {\n        roleService.saveOrUpdateRole(roleVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除角色\")\n    @DeleteMapping(\"\/admin\/roles\")\n    public ResultVO<?> deleteRoles(@RequestBody List<Integer> roleIdList) {\n        roleService.deleteRoles(roleIdList);\n        return ResultVO.ok();\n    }\n}",
        "description": "这段代码是一个角色模块的控制器，包含了查询用户角色选项、查询角色列表、保存或更新角色和删除角色等功能。同时使用了Swagger注解@Api和@ApiOperation来进行接口文档的描述，还使用了自定义注解@OptLog来记录操作日志。控制器中的方法分别对应不同的角色操作。",
        "label": "JavaClass"
    },
    {
        "id": 648,
        "fullName": "com.aurora.interceptor.PaginationInterceptor",
        "comment": "",
        "content": "@Component\n@SuppressWarnings(\"all\")\npublic class PaginationInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        String currentPage = request.getParameter(CURRENT);\n        String pageSize = Optional.ofNullable(request.getParameter(SIZE)).orElse(DEFAULT_SIZE);\n        if (!Objects.isNull(currentPage) && !StringUtils.isEmpty(currentPage)) {\n            PageUtil.setCurrentPage(new Page<>(Long.parseLong(currentPage), Long.parseLong(pageSize)));\n        }\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        PageUtil.remove();\n    }\n\n}",
        "description": "这段代码是一个分页拦截器，用于处理请求前和请求后的分页逻辑，包括设置当前页和页面大小，并在请求完成后清除分页信息。",
        "label": "JavaClass"
    },
    {
        "id": 649,
        "fullName": "com.aurora.model.dto.AuroraBackInfoDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n\npublic class AuroraBackInfoDTO {\n\n    private Integer viewsCount;\n\n    private Integer messageCount;\n\n    private Integer userCount;\n\n    private Integer articleCount;\n\n    private List<CategoryDTO> categoryDTOList;\n\n    private List<TagDTO> tagDTOList;\n\n    private List<ArticleStatisticsDTO> articleStatisticsList;\n\n    private List<UniqueViewDTO> uniqueViewDTOList;\n\n    private List<ArticleRankDTO> articleRankDTOList;\n\n}",
        "description": "一个用于存储博客后端信息的DTO类，包含了浏览数、留言数、用户数、文章数等属性，以及各种与文章相关的DTO列表。",
        "label": "JavaClass"
    },
    {
        "id": 650,
        "fullName": "com.aurora.mapper.UserAuthMapper",
        "comment": "",
        "content": "@Repository\npublic interface UserAuthMapper extends BaseMapper<UserAuth> {\n\n    List<UserAdminDTO> listUsers(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n    Integer countUser(@Param(\"conditionVO\") ConditionVO conditionVO);\n\n}",
        "description": "这段代码定义了一个UserAuthMapper接口，继承自BaseMapper<UserAuth>，包含了用于查询用户信息和计算用户数量的方法。",
        "label": "JavaClass"
    },
    {
        "id": 651,
        "fullName": "com.aurora.config.WebMvcConfig",
        "comment": "",
        "content": "@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Autowired\n    private PaginationInterceptor paginationInterceptor;\n\n    @Autowired\n    private AccessLimitInterceptor accessLimitInterceptor;\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"\/**\")\n                .allowCredentials(true)\n                .allowedHeaders(\"*\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"*\");\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(paginationInterceptor);\n        registry.addInterceptor(accessLimitInterceptor);\n    }\n\n}",
        "description": "这段代码是一个WebMvc配置类，实现了WebMvcConfigurer接口。它主要配置了CORS跨域请求的处理和拦截器的添加。同时，该类通过自动装配的方式注入了PaginationInterceptor和AccessLimitInterceptor两个拦截器实例。",
        "label": "JavaClass"
    },
    {
        "id": 652,
        "fullName": "com.aurora.config.AsyncConfig",
        "comment": "",
        "content": "@EnableAsync\n@Configuration\npublic class AsyncConfig {\n\n    @Bean\n    public TaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(20);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"async-task-thread-\");\n        return executor;\n    }\n}",
        "description": "这段代码是一个异步配置类，使用@EnableAsync注解开启异步功能，配置了一个线程池TaskExecutor，设置了核心线程数、最大线程数、队列容量、线程存活时间和线程名前缀。",
        "label": "JavaClass"
    },
    {
        "id": 653,
        "fullName": "com.aurora.controller.FriendLinkController",
        "comment": "",
        "content": "@Api(tags = \"友链模块\")\n@RestController\npublic class FriendLinkController {\n\n    @Autowired\n    private FriendLinkService friendLinkService;\n\n    @ApiOperation(value = \"查看友链列表\")\n    @GetMapping(\"\/links\")\n    public ResultVO<List<FriendLinkDTO>> listFriendLinks() {\n        return ResultVO.ok(friendLinkService.listFriendLinks());\n    }\n\n    @ApiOperation(value = \"查看后台友链列表\")\n    @GetMapping(\"\/admin\/links\")\n    public ResultVO<PageResultDTO<FriendLinkAdminDTO>> listFriendLinkDTO(ConditionVO conditionVO) {\n        return ResultVO.ok(friendLinkService.listFriendLinksAdmin(conditionVO));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或修改友链\")\n    @PostMapping(\"\/admin\/links\")\n    public ResultVO<?> saveOrUpdateFriendLink(@Valid @RequestBody FriendLinkVO friendLinkVO) {\n        friendLinkService.saveOrUpdateFriendLink(friendLinkVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除友链\")\n    @DeleteMapping(\"\/admin\/links\")\n    public ResultVO<?> deleteFriendLink(@RequestBody List<Integer> linkIdList) {\n        friendLinkService.removeByIds(linkIdList);\n        return ResultVO.ok();\n    }\n}",
        "description": "这段代码是一个友链模块的后端控制器，包含了查看友链列表、查看后台友链列表、保存或修改友链以及删除友链等功能。通过注解@Api和@ApiOperation对接口进行描述，通过@Autowired注入服务类，并使用@OptLog记录操作类型。",
        "label": "JavaClass"
    },
    {
        "id": 654,
        "fullName": "com.aurora.model.vo.TagVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"标签对象\")\npublic class TagVO {\n\n    @ApiModelProperty(name = \"id\", value = \"标签id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"标签名不能为空\")\n    @ApiModelProperty(name = \"categoryName\", value = \"标签名\", required = true, dataType = \"String\")\n    private String tagName;\n\n}",
        "description": "这段代码定义了一个标签对象TagVO，包括标签id和标签名tagName，并且具有用于API文档生成的注解。",
        "label": "JavaClass"
    },
    {
        "id": 655,
        "fullName": "com.aurora.service.UserInfoService",
        "comment": "",
        "content": "public interface UserInfoService extends IService<UserInfo> {\n\n    void updateUserInfo(UserInfoVO userInfoVO);\n\n    String updateUserAvatar(MultipartFile file);\n\n    void saveUserEmail(EmailVO emailVO);\n\n    void updateUserSubscribe(SubscribeVO subscribeVO);\n\n    void updateUserRole(UserRoleVO userRoleVO);\n\n    void updateUserDisable(UserDisableVO userDisableVO);\n\n    PageResultDTO<UserOnlineDTO> listOnlineUsers(ConditionVO conditionVO);\n\n    void removeOnlineUser(Integer userInfoId);\n\n    UserInfoDTO getUserInfoById(Integer id);\n\n}",
        "description": "这是一个用户信息服务接口，包括更新用户信息、更新用户头像、保存用户邮箱、更新用户订阅、更新用户角色、更新用户禁用状态、列出在线用户、移除在线用户、根据用户ID获取用户信息等功能。",
        "label": "JavaClass"
    },
    {
        "id": 656,
        "fullName": "com.aurora.model.dto.CategoryDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CategoryDTO {\n\n    private Integer id;\n\n    private String categoryName;\n\n    private Integer articleCount;\n\n}",
        "description": "这段代码定义了一个CategoryDTO类，用于表示博客系统中的分类信息，包括id、categoryName和articleCount属性，并使用Lombok注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 657,
        "fullName": "com.aurora.mapper.WebsiteConfigMapper",
        "comment": "",
        "content": "@Repository\npublic interface WebsiteConfigMapper extends BaseMapper<WebsiteConfig> {\n\n}",
        "description": "这段代码定义了一个接口WebsiteConfigMapper，用于操作博客系统的配置信息。它继承了BaseMapper接口，用于对WebsiteConfig实体类进行数据库操作。@Repository注解表示它是一个数据访问对象。",
        "label": "JavaClass"
    },
    {
        "id": 658,
        "fullName": "com.aurora.model.dto.ArchiveDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArchiveDTO {\n\n    private String Time;\n\n    private List<ArticleCardDTO> articles;\n}",
        "description": "这段代码定义了一个名为ArchiveDTO的数据传输对象，包含时间信息和文章列表。使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 659,
        "fullName": "com.aurora.mapper.CommentMapper",
        "comment": "",
        "content": "@Repository\npublic interface CommentMapper extends BaseMapper<Comment> {\n\n    List<CommentDTO> listComments(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"commentVO\") CommentVO commentVO);\n\n    List<ReplyDTO> listReplies(@Param(\"commentIds\") List<Integer> commentIdList);\n\n    List<CommentDTO> listTopSixComments();\n\n    Integer countComments(@Param(\"conditionVO\") ConditionVO conditionVO);\n\n    List<CommentAdminDTO> listCommentsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n    List<CommentCountDTO> listCommentCountByTypeAndTopicIds(@Param(\"type\") Integer type, @Param(\"topicIds\") List<Integer> topicIds);\n\n    CommentCountDTO listCommentCountByTypeAndTopicId(@Param(\"type\") Integer type, @Param(\"topicId\") Integer topicId);\n\n}",
        "description": "这段代码定义了一个名为CommentMapper的接口，它扩展了BaseMapper<Comment>接口。该接口包含了多个方法，用于操作评论数据，包括获取评论列表、获取回复列表、获取热门评论、统计评论数量等。",
        "label": "JavaClass"
    },
    {
        "id": 660,
        "fullName": "com.aurora.controller.UserInfoController",
        "comment": "",
        "content": "@Api(tags = \"用户信息模块\")\n@RestController\npublic class UserInfoController {\n\n    @Autowired\n    private UserInfoService userInfoService;\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"更新用户信息\")\n    @PutMapping(\"\/users\/info\")\n    public ResultVO<?> updateUserInfo(@Valid @RequestBody UserInfoVO userInfoVO) {\n        userInfoService.updateUserInfo(userInfoVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"更新用户头像\")\n    @ApiImplicitParam(name = \"file\", value = \"用户头像\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/users\/avatar\")\n    public ResultVO<String> updateUserAvatar(MultipartFile file) {\n        return ResultVO.ok(userInfoService.updateUserAvatar(file));\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"绑定用户邮箱\")\n    @PutMapping(\"\/users\/email\")\n    public ResultVO<?> saveUserEmail(@Valid @RequestBody EmailVO emailVO) {\n        userInfoService.saveUserEmail(emailVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"修改用户的订阅状态\")\n    @PutMapping(\"\/users\/subscribe\")\n    public ResultVO<?> updateUserSubscribe(@RequestBody SubscribeVO subscribeVO) {\n        userInfoService.updateUserSubscribe(subscribeVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改用户角色\")\n    @PutMapping(\"\/admin\/users\/role\")\n    public ResultVO<?> updateUserRole(@Valid @RequestBody UserRoleVO userRoleVO) {\n        userInfoService.updateUserRole(userRoleVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改用户禁用状态\")\n    @PutMapping(\"\/admin\/users\/disable\")\n    public ResultVO<?> updateUserDisable(@Valid @RequestBody UserDisableVO userDisableVO) {\n        userInfoService.updateUserDisable(userDisableVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"查看在线用户\")\n    @GetMapping(\"\/admin\/users\/online\")\n    public ResultVO<PageResultDTO<UserOnlineDTO>> listOnlineUsers(ConditionVO conditionVO) {\n        return ResultVO.ok(userInfoService.listOnlineUsers(conditionVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"下线用户\")\n    @DeleteMapping(\"\/admin\/users\/{userInfoId}\/online\")\n    public ResultVO<?> removeOnlineUser(@PathVariable(\"userInfoId\") Integer userInfoId) {\n        userInfoService.removeOnlineUser(userInfoId);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"根据id获取用户信息\")\n    @GetMapping(\"\/users\/info\/{userInfoId}\")\n    public ResultVO<UserInfoDTO> getUserInfoById(@PathVariable(\"userInfoId\") Integer userInfoId) {\n        return ResultVO.ok(userInfoService.getUserInfoById(userInfoId));\n    }\n\n}",
        "description": "这段代码是一个用户信息模块的控制器，包含了更新用户信息、更新用户头像、绑定用户邮箱、修改用户订阅状态、修改用户角色、修改用户禁用状态、查看在线用户、下线用户和根据id获取用户信息等接口。其中涉及到用户信息的增删改查操作。同时使用了Swagger注解@Api和@ApiOperation来描述接口信息。",
        "label": "JavaClass"
    },
    {
        "id": 661,
        "fullName": "com.aurora.strategy.impl.QQLoginStrategyImpl",
        "comment": "",
        "content": "@Service(\"qqLoginStrategyImpl\")\npublic class QQLoginStrategyImpl extends AbstractSocialLoginStrategyImpl {\n\n    @Autowired\n    private QQConfigProperties qqConfigProperties;\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Override\n    public SocialTokenDTO getSocialToken(String data) {\n        QQLoginVO qqLoginVO = JSON.parseObject(data, QQLoginVO.class);\n        checkQQToken(qqLoginVO);\n        return SocialTokenDTO.builder()\n                .openId(qqLoginVO.getOpenId())\n                .accessToken(qqLoginVO.getAccessToken())\n                .loginType(LoginTypeEnum.QQ.getType())\n                .build();\n    }\n\n    @Override\n    public SocialUserInfoDTO getSocialUserInfo(SocialTokenDTO socialTokenDTO) {\n        Map<String, String> formData = new HashMap<>(3);\n        formData.put(QQ_OPEN_ID, socialTokenDTO.getOpenId());\n        formData.put(ACCESS_TOKEN, socialTokenDTO.getAccessToken());\n        formData.put(OAUTH_CONSUMER_KEY, qqConfigProperties.getAppId());\n        QQUserInfoDTO qqUserInfoDTO = JSON.parseObject(restTemplate.getForObject(qqConfigProperties.getUserInfoUrl(), String.class, formData), QQUserInfoDTO.class);\n        return SocialUserInfoDTO.builder()\n                .nickname(Objects.requireNonNull(qqUserInfoDTO).getNickname())\n                .avatar(qqUserInfoDTO.getFigureurl_qq_1())\n                .build();\n    }\n\n    private void checkQQToken(QQLoginVO qqLoginVO) {\n        Map<String, String> qqData = new HashMap<>(1);\n        qqData.put(SocialLoginConstant.ACCESS_TOKEN, qqLoginVO.getAccessToken());\n        try {\n            String result = restTemplate.getForObject(qqConfigProperties.getCheckTokenUrl(), String.class, qqData);\n            QQTokenDTO qqTokenDTO = JSON.parseObject(CommonUtil.getBracketsContent(Objects.requireNonNull(result)), QQTokenDTO.class);\n            if (!qqLoginVO.getOpenId().equals(qqTokenDTO.getOpenid())) {\n                throw new BizException(QQ_LOGIN_ERROR);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(QQ_LOGIN_ERROR);\n        }\n    }\n\n}",
        "description": "这段代码是一个实现QQ第三方登录策略的类，包括获取社交令牌和用户信息的方法，并进行QQ令牌验证。",
        "label": "JavaClass"
    },
    {
        "id": 662,
        "fullName": "com.aurora.service.UniqueViewService",
        "comment": "",
        "content": "public interface UniqueViewService extends IService<UniqueView> {\n\n    List<UniqueViewDTO> listUniqueViews();\n\n}",
        "description": "这段代码定义了一个接口UniqueViewService，继承自IService接口，其中包含了一个方法用于获取唯一访问视图的列表。",
        "label": "JavaClass"
    },
    {
        "id": 663,
        "fullName": "com.aurora.model.dto.ArticleRankDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ArticleRankDTO {\n\n    private String articleTitle;\n\n    private Integer viewsCount;\n\n}",
        "description": "ArticleRankDTO is a data transfer object class with article title and views count fields, utilizing Lombok annotations for data generation and builder pattern.",
        "label": "JavaClass"
    },
    {
        "id": 664,
        "fullName": "com.aurora.config.properties.MinioProperties",
        "comment": "",
        "content": "@Data\n@Configuration\n@ConfigurationProperties(prefix = \"upload.minio\")\npublic class MinioProperties {\n\n    private String url;\n\n    private String endpoint;\n\n    private String accessKey;\n\n    private String secretKey;\n\n    private String bucketName;\n}",
        "description": "这段代码定义了一个MinioProperties类，用于配置Minio对象存储的属性，包括URL、终端点、访问密钥、秘钥和存储桶名称。",
        "label": "JavaClass"
    },
    {
        "id": 665,
        "fullName": "com.aurora.service.impl.TalkServiceImpl",
        "comment": "",
        "content": "@Service\npublic class TalkServiceImpl extends ServiceImpl<TalkMapper, Talk> implements TalkService {\n\n    @Autowired\n    private TalkMapper talkMapper;\n\n    @Autowired\n    private CommentMapper commentMapper;\n\n    @Override\n    public PageResultDTO<TalkDTO> listTalks() {\n        Integer count = talkMapper.selectCount((new LambdaQueryWrapper<Talk>()\n                .eq(Talk::getStatus, PUBLIC.getStatus())));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TalkDTO> talkDTOs = talkMapper.listTalks(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        List<Integer> talkIds = talkDTOs.stream()\n                .map(TalkDTO::getId)\n                .collect(Collectors.toList());\n        Map<Integer, Integer> commentCountMap = commentMapper.listCommentCountByTypeAndTopicIds(CommentTypeEnum.TALK.getType(), talkIds)\n                .stream()\n                .collect(Collectors.toMap(CommentCountDTO::getId, CommentCountDTO::getCommentCount));\n        talkDTOs.forEach(item -> {\n            item.setCommentCount(commentCountMap.get(item.getId()));\n            if (Objects.nonNull(item.getImages())) {\n                item.setImgs(CommonUtil.castList(JSON.parseObject(item.getImages(), List.class), String.class));\n            }\n        });\n        return new PageResultDTO<>(talkDTOs, count);\n    }\n\n    @Override\n    public TalkDTO getTalkById(Integer talkId) {\n        TalkDTO talkDTO = talkMapper.getTalkById(talkId);\n        if (Objects.isNull(talkDTO)) {\n            throw new BizException(\"说说不存在\");\n        }\n        if (Objects.nonNull(talkDTO.getImages())) {\n            talkDTO.setImgs(CommonUtil.castList(JSON.parseObject(talkDTO.getImages(), List.class), String.class));\n        }\n        CommentCountDTO commentCountDTO = commentMapper.listCommentCountByTypeAndTopicId(CommentTypeEnum.TALK.getType(), talkId);\n        if (Objects.nonNull(commentCountDTO)) {\n            talkDTO.setCommentCount(commentCountDTO.getCommentCount());\n        }\n        return talkDTO;\n    }\n\n    @Override\n    public void saveOrUpdateTalk(TalkVO talkVO) {\n        Talk talk = BeanCopyUtil.copyObject(talkVO, Talk.class);\n        talk.setUserId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        this.saveOrUpdate(talk);\n    }\n\n    @Override\n    public void deleteTalks(List<Integer> talkIds) {\n        talkMapper.deleteBatchIds(talkIds);\n    }\n\n    @Override\n    public PageResultDTO<TalkAdminDTO> listBackTalks(ConditionVO conditionVO) {\n        Integer count = talkMapper.selectCount(new LambdaQueryWrapper<Talk>()\n                .eq(Objects.nonNull(conditionVO.getStatus()), Talk::getStatus, conditionVO.getStatus()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TalkAdminDTO> talkDTOs = talkMapper.listTalksAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        talkDTOs.forEach(item -> {\n            if (Objects.nonNull(item.getImages())) {\n                item.setImgs(CommonUtil.castList(JSON.parseObject(item.getImages(), List.class), String.class));\n            }\n        });\n        return new PageResultDTO<>(talkDTOs, count);\n    }\n\n    @Override\n    public TalkAdminDTO getBackTalkById(Integer talkId) {\n        TalkAdminDTO talkBackDTO = talkMapper.getTalkByIdAdmin(talkId);\n        if (Objects.nonNull(talkBackDTO.getImages())) {\n            talkBackDTO.setImgs(CommonUtil.castList(JSON.parseObject(talkBackDTO.getImages(), List.class), String.class));\n        }\n        return talkBackDTO;\n    }\n\n}",
        "description": "这段代码是一个博客系统的后端服务实现类，包括了对说说（Talk）的增删改查操作，以及对评论数量的统计和处理。同时也包括了管理员对说说的管理操作。",
        "label": "JavaClass"
    },
    {
        "id": 666,
        "fullName": "com.aurora.quartz.AbstractQuartzJob",
        "comment": "",
        "content": "public abstract class AbstractQuartzJob implements org.quartz.Job {\n\n    private static final Logger log = LoggerFactory.getLogger(AbstractQuartzJob.class);\n\n    private static final ThreadLocal<Date> THREAD_LOCAL = new ThreadLocal<>();\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n        Job job = new Job();\n        BeanUtils.copyProperties(context.getMergedJobDataMap().get(ScheduleConstant.TASK_PROPERTIES), job);\n        try {\n            before(context, job);\n            doExecute(context, job);\n            after(context, job, null);\n        } catch (Exception e) {\n            log.error(\"任务执行异常:\", e);\n            after(context, job, e);\n        }\n    }\n\n    protected void before(JobExecutionContext context, Job job) {\n        THREAD_LOCAL.set(new Date());\n    }\n\n    protected void after(JobExecutionContext context, Job job, Exception e) {\n        Date startTime = THREAD_LOCAL.get();\n        THREAD_LOCAL.remove();\n        final JobLog jobLog = new JobLog();\n        jobLog.setJobId(job.getId());\n        jobLog.setJobName(job.getJobName());\n        jobLog.setJobGroup(job.getJobGroup());\n        jobLog.setInvokeTarget(job.getInvokeTarget());\n        jobLog.setStartTime(startTime);\n        jobLog.setEndTime(new Date());\n        long runMs = jobLog.getEndTime().getTime() - jobLog.getStartTime().getTime();\n        jobLog.setJobMessage(jobLog.getJobName() + \" 总共耗时：\" + runMs + \"毫秒\");\n        if (e != null) {\n            jobLog.setStatus(ZERO);\n            jobLog.setExceptionInfo(ExceptionUtil.getTrace(e));\n        } else {\n            jobLog.setStatus(ONE);\n        }\n        SpringUtil.getBean(JobLogMapper.class).insert(jobLog);\n    }\n\n    protected abstract void doExecute(JobExecutionContext context, Job job) throws Exception;\n}",
        "description": "这段代码是一个抽象类，实现了Quartz Job 接口，定义了任务执行前后的操作，并在执行任务后记录任务执行日志。",
        "label": "JavaClass"
    },
    {
        "id": 667,
        "fullName": "com.aurora.util.CommonUtil",
        "comment": "",
        "content": "public class CommonUtil {\n\n    public static boolean checkEmail(String username) {\n        String rule = \"^\\\\w+((-\\\\w+)|(\\\\.\\\\w+))*\\\\@[A-Za-z0-9]+((\\\\.|-)[A-Za-z0-9]+)*\\\\.[A-Za-z0-9]+$\";\n        \/\/正则表达式的模式 编译正则表达式\n        Pattern p = Pattern.compile(rule);\n        \/\/正则表达式的匹配器\n        Matcher m = p.matcher(username);\n        \/\/进行正则匹配\n        return m.matches();\n    }\n\n    public static String getBracketsContent(String str) {\n        return str.substring(str.indexOf(\"(\") + 1, str.indexOf(\")\"));\n    }\n\n    public static String getRandomCode() {\n        StringBuilder str = new StringBuilder();\n        Random random = new Random();\n        for (int i = 0; i < 6; i++) {\n            str.append(random.nextInt(10));\n        }\n        return str.toString();\n    }\n\n    public static <T> List<T> castList(Object obj, Class<T> clazz) {\n        List<T> result = new ArrayList<T>();\n        if (obj instanceof List<?>) {\n            for (Object o : (List<?>) obj) {\n                result.add(clazz.cast(o));\n            }\n            return result;\n        }\n        return result;\n    }\n\n    public static <T> Set<T> castSet(Object obj, Class<T> clazz) {\n        Set<T> result = new HashSet<>();\n        if (obj instanceof Set<?>) {\n            for (Object o : (Set<?>) obj) {\n                result.add(clazz.cast(o));\n            }\n            return result;\n        }\n        return result;\n    }\n\n}",
        "description": "这段代码是一个通用工具类，包含了一些常用的功能方法。其中包括检查邮箱格式是否正确、获取括号中的内容、生成随机验证码、将对象转换为指定类型的列表或集合。",
        "label": "JavaClass"
    },
    {
        "id": 668,
        "fullName": "com.aurora.quartz.QuartzDisallowConcurrentExecution",
        "comment": "",
        "content": "public class QuartzDisallowConcurrentExecution extends AbstractQuartzJob {\n    @Override\n    protected void doExecute(JobExecutionContext context, Job job) throws Exception {\n        JobInvokeUtil.invokeMethod(job);\n    }\n}",
        "description": "这段代码是一个继承自抽象QuartzJob类的QuartzDisallowConcurrentExecution类，它覆盖了doExecute方法，在该方法中调用了JobInvokeUtil类的invokeMethod方法来执行Job任务。",
        "label": "JavaClass"
    },
    {
        "id": 669,
        "fullName": "com.aurora.model.vo.IsHiddenVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class IsHiddenVO {\n\n    private Integer id;\n\n    private Integer isHidden;\n}",
        "description": "这段代码定义了一个IsHiddenVO类，包含id和isHidden两个属性，使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 670,
        "fullName": "com.aurora.mapper.UserInfoMapper",
        "comment": "",
        "content": "@Repository\npublic interface UserInfoMapper extends BaseMapper<UserInfo> {\n\n}",
        "description": "这段代码定义了一个名为UserInfoMapper的接口，它是一个@Repository注解修饰的Spring Data JPA的Repository接口，继承了BaseMapper<UserInfo>泛型接口。",
        "label": "JavaClass"
    },
    {
        "id": 671,
        "fullName": "com.aurora.strategy.ArticleImportStrategy",
        "comment": "",
        "content": "public interface ArticleImportStrategy {\n\n    void importArticles(MultipartFile file);\n\n}",
        "description": "这是一个接口，用于定义文章导入策略，其中包含一个导入文章的方法。",
        "label": "JavaClass"
    },
    {
        "id": 672,
        "fullName": "com.aurora.model.vo.JobVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobVO {\n\n    @ApiModelProperty(value = \"任务id\")\n    private Integer id;\n\n    @ApiModelProperty(value = \"任务名称\")\n    private String jobName;\n\n    @ApiModelProperty(value = \"任务组名\")\n    private String jobGroup;\n\n    @ApiModelProperty(value = \"调用目标字符串\")\n    private String invokeTarget;\n\n    @ApiModelProperty(value = \"cron执行表达式\")\n    private String cronExpression;\n\n    @ApiModelProperty(value = \"计划执行错误策略（1立即执行 2执行一次 3放弃执行）\")\n    private Integer misfirePolicy;\n\n    @ApiModelProperty(value = \"是否并发执行（0允许 1禁止）\")\n    private Integer concurrent;\n\n    @ApiModelProperty(value = \"状态（0正常 1暂停）\")\n    private Integer status;\n\n    @ApiModelProperty(value = \"备注信息\")\n    private String remark;\n}",
        "description": "JobVO是一个带有各种任务属性的数据对象，用于在博客系统中表示任务的相关信息。",
        "label": "JavaClass"
    },
    {
        "id": 673,
        "fullName": "com.aurora.service.RedisService",
        "comment": "",
        "content": "@SuppressWarnings(\"all\")\npublic interface RedisService {\n\n    void set(String key, Object value, long time);\n\n    void set(String key, Object value);\n\n    Object get(String key);\n\n    Boolean del(String key);\n\n    Long del(List<String> keys);\n\n    Boolean expire(String key, long time);\n\n    Long getExpire(String key);\n\n    Boolean hasKey(String key);\n\n    Long incr(String key, long delta);\n\n    Long incrExpire(String key, long time);\n\n    Long decr(String key, long delta);\n\n    Object hGet(String key, String hashKey);\n\n    Boolean hSet(String key, String hashKey, Object value, long time);\n\n    void hSet(String key, String hashKey, Object value);\n\n    Map<String, Object> hGetAll(String key);\n\n    Boolean hSetAll(String key, Map<String, Object> map, long time);\n\n    void hSetAll(String key, Map<String, ?> map);\n\n    void hDel(String key, Object... hashKey);\n\n    Boolean hHasKey(String key, String hashKey);\n\n    Long hIncr(String key, String hashKey, Long delta);\n\n    Long hDecr(String key, String hashKey, Long delta);\n\n    Double zIncr(String key, Object value, Double score);\n\n    Double zDecr(String key, Object value, Double score);\n\n    Map<Object, Double> zReverseRangeWithScore(String key, long start, long end);\n\n    Double zScore(String key, Object value);\n\n    Map<Object, Double> zAllScore(String key);\n\n    Set<Object> sMembers(String key);\n\n    Long sAdd(String key, Object... values);\n\n    Long sAddExpire(String key, long time, Object... values);\n\n    Boolean sIsMember(String key, Object value);\n\n    Long sSize(String key);\n\n    Long sRemove(String key, Object... values);\n\n    List<Object> lRange(String key, long start, long end);\n\n    Long lSize(String key);\n\n    Object lIndex(String key, long index);\n\n    Long lPush(String key, Object value);\n\n    Long lPush(String key, Object value, long time);\n\n    Long lPushAll(String key, Object... values);\n\n    Long lPushAll(String key, Long time, Object... values);\n\n    Long lRemove(String key, long count, Object value);\n\n    Boolean bitAdd(String key, int offset, boolean b);\n\n    Boolean bitGet(String key, int offset);\n\n    Long bitCount(String key);\n\n    List<Long> bitField(String key, int limit, int offset);\n\n    byte[] bitGetAll(String key);\n\n    Long hyperAdd(String key, Object... value);\n\n    Long hyperGet(String... key);\n\n    void hyperDel(String key);\n\n    Long geoAdd(String key, Double x, Double y, String name);\n\n    List<Point> geoGetPointList(String key, Object... place);\n\n    Distance geoCalculationDistance(String key, String placeOne, String placeTow);\n\n    GeoResults<RedisGeoCommands.GeoLocation<Object>> geoNearByPlace(String key, String place, Distance distance, long limit, Sort.Direction sort);\n\n    List<String> geoGetHash(String key, String... place);\n\n}",
        "description": "This interface defines methods for interacting with Redis to perform various operations like setting, getting, deleting keys, hash operations, sorted set operations, set operations, list operations, and geo operations.",
        "label": "JavaClass"
    },
    {
        "id": 674,
        "fullName": "com.aurora.model.vo.AboutVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AboutVO {\n\n    @ApiModelProperty(name = \"About内容\", value = \"content\", required = true, dataType = \"String\")\n    private String content;\n}",
        "description": "这段代码定义了一个关于页面的值对象（VO），包含关于内容的字符串属性。使用了Lombok的注解@Data、@Builder、@NoArgsConstructor、@AllArgsConstructor，以及Swagger的注解@ApiModelProperty。",
        "label": "JavaClass"
    },
    {
        "id": 675,
        "fullName": "com.aurora.model.dto.PhotoAlbumDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class PhotoAlbumDTO {\n\n    private Integer id;\n\n    private String albumName;\n\n    private String albumDesc;\n\n    private String albumCover;\n\n}",
        "description": "这段代码定义了一个名为PhotoAlbumDTO的数据传输对象，包含id、albumName、albumDesc和albumCover属性，并使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 676,
        "fullName": "com.aurora.mapper.TagMapper",
        "comment": "",
        "content": "@Repository\npublic interface TagMapper extends BaseMapper<Tag> {\n\n    List<TagDTO> listTags();\n\n    List<TagDTO> listTopTenTags();\n\n    List<String> listTagNamesByArticleId(Integer articleId);\n\n    List<TagAdminDTO> listTagsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n}",
        "description": "TagMapper是一个接口，继承自BaseMapper<Tag>，提供了查询标签、查询前十个标签、根据文章ID查询标签名称、以及管理端查询标签的功能。",
        "label": "JavaClass"
    },
    {
        "id": 677,
        "fullName": "com.aurora.handler.AccessDeniedHandlerImpl",
        "comment": "",
        "content": "@Component\npublic class AccessDeniedHandlerImpl implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.fail(\"权限不足\")));\n    }\n}",
        "description": "这段代码是一个用于处理权限不足异常的类，通过实现AccessDeniedHandler接口来自定义处理方式。",
        "label": "JavaClass"
    },
    {
        "id": 678,
        "fullName": "com.aurora.model.dto.LabelOptionDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class LabelOptionDTO {\n\n    private Integer id;\n\n    private String label;\n\n    private List<LabelOptionDTO> children;\n\n}",
        "description": "这段代码定义了一个包含id、label和children字段的LabelOptionDTO数据传输对象，并使用@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 679,
        "fullName": "com.aurora.entity.UserAuth",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_user_auth\")\npublic class UserAuth {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userInfoId;\n\n    private String username;\n\n    private String password;\n\n    private Integer loginType;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n    private LocalDateTime lastLoginTime;\n\n}",
        "description": "这段代码定义了一个用户认证实体类UserAuth，包含了用户认证信息的各个字段，并使用了Lombok和MyBatis-Plus注解简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 680,
        "fullName": "com.aurora.service.JobService",
        "comment": "",
        "content": "public interface JobService extends IService<Job> {\n\n    void saveJob(JobVO jobVO);\n\n    void updateJob(JobVO jobVO);\n\n    void deleteJobs(List<Integer> tagIds);\n\n    JobDTO getJobById(Integer jobId);\n\n    PageResultDTO<JobDTO> listJobs(JobSearchVO jobSearchVO);\n\n    void updateJobStatus(JobStatusVO jobStatusVO);\n\n    void runJob(JobRunVO jobRunVO);\n\n    List<String> listJobGroups();\n\n}",
        "description": "该接口定义了对职位（Job）的操作，包括保存、更新、删除、按ID获取、列表查询、更新状态、运行和列出作业组等功能。",
        "label": "JavaClass"
    },
    {
        "id": 681,
        "fullName": "com.aurora.model.vo.ArticleTopFeaturedVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArticleTopFeaturedVO {\n    @NotNull(message = \"id不能为空\")\n    private Integer id;\n\n    @NotNull(message = \"是否置顶不能为空\")\n    private Integer isTop;\n\n    @NotNull(message = \"是否推荐不能为空\")\n    private Integer isFeatured;\n}",
        "description": "这段代码定义了一个包含文章ID、是否置顶和是否推荐字段的ArticleTopFeaturedVO类，并使用Lombok注解简化了代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 682,
        "fullName": "com.aurora.model.vo.UserInfoVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"用户信息对象\")\npublic class UserInfoVO {\n\n    @NotBlank(message = \"昵称不能为空\")\n    @ApiModelProperty(name = \"nickname\", value = \"昵称\", dataType = \"String\")\n    private String nickname;\n\n    @ApiModelProperty(name = \"intro\", value = \"介绍\", dataType = \"String\")\n    private String intro;\n\n    @ApiModelProperty(name = \"webSite\", value = \"个人网站\", dataType = \"String\")\n    private String website;\n\n}",
        "description": "这段代码定义了一个用户信息对象UserInfoVO，包括昵称、介绍和个人网站等属性，并使用了Lombok和Swagger注解。",
        "label": "JavaClass"
    },
    {
        "id": 683,
        "fullName": "com.aurora.service.impl.CommentServiceImpl",
        "comment": "",
        "content": "@Service\npublic class CommentServiceImpl extends ServiceImpl<CommentMapper, Comment> implements CommentService {\n\n    @Value(\"${website.url}\")\n    private String websiteUrl;\n\n    @Autowired\n    private CommentMapper commentMapper;\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private TalkMapper talkMapper;\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private AuroraInfoService auroraInfoService;\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    private static final List<Integer> types = new ArrayList<>();\n\n    @PostConstruct\n    public void init() {\n        CommentTypeEnum[] values = CommentTypeEnum.values();\n        for (CommentTypeEnum value : values) {\n            types.add(value.getType());\n        }\n    }\n\n    @Override\n    public void saveComment(CommentVO commentVO) {\n        checkCommentVO(commentVO);\n        WebsiteConfigDTO websiteConfig = auroraInfoService.getWebsiteConfig();\n        Integer isCommentReview = websiteConfig.getIsCommentReview();\n        commentVO.setCommentContent(HTMLUtil.filter(commentVO.getCommentContent()));\n        Comment comment = Comment.builder()\n                .userId(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .replyUserId(commentVO.getReplyUserId())\n                .topicId(commentVO.getTopicId())\n                .commentContent(commentVO.getCommentContent())\n                .parentId(commentVO.getParentId())\n                .type(commentVO.getType())\n                .isReview(isCommentReview == TRUE ? FALSE : TRUE)\n                .build();\n        commentMapper.insert(comment);\n        String fromNickname = UserUtil.getUserDetailsDTO().getNickname();\n        if (websiteConfig.getIsEmailNotice().equals(TRUE)) {\n            CompletableFuture.runAsync(() -> notice(comment, fromNickname));\n        }\n    }\n\n    @Override\n    public PageResultDTO<CommentDTO> listComments(CommentVO commentVO) {\n        Integer commentCount = commentMapper.selectCount(new LambdaQueryWrapper<Comment>()\n                .eq(Objects.nonNull(commentVO.getTopicId()), Comment::getTopicId, commentVO.getTopicId())\n                .eq(Comment::getType, commentVO.getType())\n                .isNull(Comment::getParentId)\n                .eq(Comment::getIsReview, TRUE));\n        if (commentCount == 0) {\n            return new PageResultDTO<>();\n        }\n        List<CommentDTO> commentDTOs = commentMapper.listComments(PageUtil.getLimitCurrent(), PageUtil.getSize(), commentVO);\n        if (CollectionUtils.isEmpty(commentDTOs)) {\n            return new PageResultDTO<>();\n        }\n        List<Integer> commentIds = commentDTOs.stream()\n                .map(CommentDTO::getId)\n                .collect(Collectors.toList());\n        List<ReplyDTO> replyDTOS = commentMapper.listReplies(commentIds);\n        Map<Integer, List<ReplyDTO>> replyMap = replyDTOS.stream()\n                .collect(Collectors.groupingBy(ReplyDTO::getParentId));\n        commentDTOs.forEach(item -> item.setReplyDTOs(replyMap.get(item.getId())));\n        return new PageResultDTO<>(commentDTOs, commentCount);\n    }\n\n    @Override\n    public List<ReplyDTO> listRepliesByCommentId(Integer commentId) {\n        return commentMapper.listReplies(Collections.singletonList(commentId));\n    }\n\n    @Override\n    public List<CommentDTO> listTopSixComments() {\n        return commentMapper.listTopSixComments();\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<CommentAdminDTO> listCommentsAdmin(ConditionVO conditionVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> commentMapper.countComments(conditionVO));\n        List<CommentAdminDTO> commentBackDTOList = commentMapper.listCommentsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(commentBackDTOList, asyncCount.get());\n    }\n\n    @Override\n    public void updateCommentsReview(ReviewVO reviewVO) {\n        List<Comment> comments = reviewVO.getIds().stream().map(item -> Comment.builder()\n                        .id(item)\n                        .isReview(reviewVO.getIsReview())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(comments);\n    }\n\n    public void checkCommentVO(CommentVO commentVO) {\n        if (!types.contains(commentVO.getType())) {\n            throw new BizException(\"参数校验异常\");\n        }\n        if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ARTICLE || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == TALK) {\n            if (Objects.isNull(commentVO.getTopicId())) {\n                throw new BizException(\"参数校验异常\");\n            } else {\n                if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ARTICLE) {\n                    Article article = articleMapper.selectOne(new LambdaQueryWrapper<Article>().select(Article::getId, Article::getUserId).eq(Article::getId, commentVO.getTopicId()));\n                    if (Objects.isNull(article)) {\n                        throw new BizException(\"参数校验异常\");\n                    }\n                }\n                if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == TALK) {\n                    Talk talk = talkMapper.selectOne(new LambdaQueryWrapper<Talk>().select(Talk::getId, Talk::getUserId).eq(Talk::getId, commentVO.getTopicId()));\n                    if (Objects.isNull(talk)) {\n                        throw new BizException(\"参数校验异常\");\n                    }\n                }\n            }\n        }\n        if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == LINK\n                || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ABOUT\n                || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == MESSAGE) {\n            if (Objects.nonNull(commentVO.getTopicId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n        }\n        if (Objects.isNull(commentVO.getParentId())) {\n            if (Objects.nonNull(commentVO.getReplyUserId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n        }\n        if (Objects.nonNull(commentVO.getParentId())) {\n            Comment parentComment = commentMapper.selectOne(new LambdaQueryWrapper<Comment>().select(Comment::getId, Comment::getParentId, Comment::getType).eq(Comment::getId, commentVO.getParentId()));\n            if (Objects.isNull(parentComment)) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (Objects.nonNull(parentComment.getParentId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (!commentVO.getType().equals(parentComment.getType())) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (Objects.isNull(commentVO.getReplyUserId())) {\n                throw new BizException(\"参数校验异常\");\n            } else {\n                UserInfo existUser = userInfoMapper.selectOne(new LambdaQueryWrapper<UserInfo>().select(UserInfo::getId).eq(UserInfo::getId, commentVO.getReplyUserId()));\n                if (Objects.isNull(existUser)) {\n                    throw new BizException(\"参数校验异常\");\n                }\n            }\n        }\n    }\n\n    private void notice(Comment comment, String fromNickname) {\n        if (comment.getUserId().equals(comment.getReplyUserId())) {\n            if (Objects.nonNull(comment.getParentId())) {\n                Comment parentComment = commentMapper.selectById(comment.getParentId());\n                if (parentComment.getUserId().equals(comment.getUserId())) {\n                    return;\n                }\n            }\n        }\n        if (comment.getUserId().equals(BLOGGER_ID) && Objects.isNull(comment.getParentId())) {\n            return;\n        }\n        if (Objects.nonNull(comment.getParentId())) {\n            Comment parentComment = commentMapper.selectById(comment.getParentId());\n            if (!comment.getReplyUserId().equals(parentComment.getUserId())\n                    && !comment.getReplyUserId().equals(comment.getUserId())) {\n                UserInfo userInfo = userInfoMapper.selectById(comment.getUserId());\n                UserInfo replyUserinfo = userInfoMapper.selectById(comment.getReplyUserId());\n                Map<String, Object> map = new HashMap<>();\n                String topicId = Objects.nonNull(comment.getTopicId()) ? comment.getTopicId().toString() : \"\";\n                String url = websiteUrl + getCommentPath(comment.getType()) + topicId;\n                map.put(\"content\", userInfo.getNickname() + \"在\" + Objects.requireNonNull(getCommentEnum(comment.getType())).getDesc()\n                        + \"的评论区@了你，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n                EmailDTO emailDTO = EmailDTO.builder()\n                        .email(replyUserinfo.getEmail())\n                        .subject(MENTION_REMIND)\n                        .template(\"common.html\")\n                        .commentMap(map)\n                        .build();\n                rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n            }\n            if (comment.getUserId().equals(parentComment.getUserId())) {\n                return;\n            }\n        }\n        String title;\n        Integer userId = BLOGGER_ID;\n        String topicId = Objects.nonNull(comment.getTopicId()) ? comment.getTopicId().toString() : \"\";\n        if (Objects.nonNull(comment.getReplyUserId())) {\n            userId = comment.getReplyUserId();\n        } else {\n            switch (Objects.requireNonNull(getCommentEnum(comment.getType()))) {\n                case ARTICLE:\n                    userId = articleMapper.selectById(comment.getTopicId()).getUserId();\n                    break;\n                case TALK:\n                    userId = talkMapper.selectById(comment.getTopicId()).getUserId();\n                default:\n                    break;\n            }\n        }\n        if (Objects.requireNonNull(getCommentEnum(comment.getType())).equals(ARTICLE)) {\n            title = articleMapper.selectById(comment.getTopicId()).getArticleTitle();\n        } else {\n            title = Objects.requireNonNull(getCommentEnum(comment.getType())).getDesc();\n        }\n        UserInfo userInfo = userInfoMapper.selectById(userId);\n        if (StringUtils.isNotBlank(userInfo.getEmail())) {\n            EmailDTO emailDTO = getEmailDTO(comment, userInfo, fromNickname, topicId, title);\n            rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n        }\n    }\n\n    private EmailDTO getEmailDTO(Comment comment, UserInfo userInfo, String fromNickname, String topicId, String title) {\n        EmailDTO emailDTO = new EmailDTO();\n        Map<String, Object> map = new HashMap<>();\n        if (comment.getIsReview().equals(TRUE)) {\n            String url = websiteUrl + getCommentPath(comment.getType()) + topicId;\n            if (Objects.isNull(comment.getParentId())) {\n                emailDTO.setEmail(userInfo.getEmail());\n                emailDTO.setSubject(COMMENT_REMIND);\n                emailDTO.setTemplate(\"owner.html\");\n                String createTime = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\").format(comment.getCreateTime());\n                map.put(\"time\", createTime);\n                map.put(\"url\", url);\n                map.put(\"title\", title);\n                map.put(\"nickname\", fromNickname);\n                map.put(\"content\", comment.getCommentContent());\n            } else {\n                Comment parentComment = commentMapper.selectOne(new LambdaQueryWrapper<Comment>().select(Comment::getUserId, Comment::getCommentContent, Comment::getCreateTime).eq(Comment::getId, comment.getParentId()));\n                if (!userInfo.getId().equals(parentComment.getUserId())) {\n                    userInfo = userInfoMapper.selectById(parentComment.getUserId());\n                }\n                emailDTO.setEmail(userInfo.getEmail());\n                emailDTO.setSubject(COMMENT_REMIND);\n                emailDTO.setTemplate(\"user.html\");\n                map.put(\"url\", url);\n                map.put(\"title\", title);\n                String createTime = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\").format(parentComment.getCreateTime());\n                map.put(\"time\", createTime);\n                map.put(\"toUser\", userInfo.getNickname());\n                map.put(\"fromUser\", fromNickname);\n                map.put(\"parentComment\", parentComment.getCommentContent());\n                if (!comment.getReplyUserId().equals(parentComment.getUserId())) {\n                    UserInfo mentionUserInfo = userInfoMapper.selectById(comment.getReplyUserId());\n                    if (Objects.nonNull(mentionUserInfo.getWebsite())) {\n                        map.put(\"replyComment\", \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\"\n                                + mentionUserInfo.getWebsite()\n                                + \"\\\">@\" + mentionUserInfo.getNickname() + \" \" + \"<\/a>\" + parentComment.getCommentContent());\n                    } else {\n                        map.put(\"replyComment\", \"@\" + mentionUserInfo.getNickname() + \" \" + parentComment.getCommentContent());\n                    }\n                } else {\n                    map.put(\"replyComment\", comment.getCommentContent());\n                }\n            }\n        } else {\n            String adminEmail = userInfoMapper.selectById(BLOGGER_ID).getEmail();\n            emailDTO.setEmail(adminEmail);\n            emailDTO.setSubject(CHECK_REMIND);\n            emailDTO.setTemplate(\"common.html\");\n            map.put(\"content\", \"您收到了一条新的回复，请前往后台管理页面审核\");\n        }\n        emailDTO.setCommentMap(map);\n        return emailDTO;\n    }\n\n}",
        "description": "这段代码是评论服务的实现类，包括保存评论、列出评论、列出回复等功能，还包括对评论参数的校验和评论通知的处理。通过异步处理评论通知，提高系统性能。",
        "label": "JavaClass"
    },
    {
        "id": 684,
        "fullName": "com.aurora.aspect.ExceptionLogAspect",
        "comment": "",
        "content": "@Aspect\n@Component\npublic class ExceptionLogAspect {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    @Pointcut(\"execution(* com.aurora.controller..*.*(..))\")\n    public void exceptionLogPointcut() {\n    }\n\n    @AfterThrowing(value = \"exceptionLogPointcut()\", throwing = \"e\")\n    public void saveExceptionLog(JoinPoint joinPoint, Exception e) {\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\n        ExceptionLog exceptionLog = new ExceptionLog();\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        exceptionLog.setOptUri(Objects.requireNonNull(request).getRequestURI());\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = method.getName();\n        methodName = className + \".\" + methodName;\n        exceptionLog.setOptMethod(methodName);\n        exceptionLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\n        if (joinPoint.getArgs().length > 0) {\n            if (joinPoint.getArgs()[0] instanceof MultipartFile) {\n                exceptionLog.setRequestParam(\"file\");\n            } else {\n                exceptionLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\n            }\n        }\n        if (Objects.nonNull(apiOperation)) {\n            exceptionLog.setOptDesc(apiOperation.value());\n        } else {\n            exceptionLog.setOptDesc(\"\");\n        }\n        exceptionLog.setExceptionInfo(ExceptionUtil.getTrace(e));\n        String ipAddress = IpUtil.getIpAddress(request);\n        exceptionLog.setIpAddress(ipAddress);\n        exceptionLog.setIpSource(IpUtil.getIpSource(ipAddress));\n        applicationContext.publishEvent(new ExceptionLogEvent(exceptionLog));\n    }\n\n}",
        "description": "这段代码是一个用于记录异常日志的切面，当控制器中的方法抛出异常时，将异常信息保存到数据库中，并发布异常日志事件。",
        "label": "JavaClass"
    },
    {
        "id": 685,
        "fullName": "com.aurora.model.dto.PhotoAdminDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class PhotoAdminDTO {\n\n    private Integer id;\n\n    private String photoName;\n\n    private String photoDesc;\n\n    private String photoSrc;\n\n}",
        "description": "PhotoAdminDTO is a data transfer object class with fields for photo information, generated using Lombok annotations.",
        "label": "JavaClass"
    },
    {
        "id": 686,
        "fullName": "com.aurora.handler.ControllerAdviceHandler",
        "comment": "",
        "content": "@Log4j2\n@RestControllerAdvice\npublic class ControllerAdviceHandler {\n\n    @ExceptionHandler(value = BizException.class)\n    public ResultVO<?> errorHandler(BizException e) {\n        return ResultVO.fail(e.getCode(), e.getMessage());\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResultVO<?> errorHandler(MethodArgumentNotValidException e) {\n        return ResultVO.fail(StatusCodeEnum.VALID_ERROR.getCode(), Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());\n    }\n\n    @ExceptionHandler(value = Exception.class)\n    public ResultVO<?> errorHandler(Exception e) {\n        e.printStackTrace();\n        return ResultVO.fail(StatusCodeEnum.SYSTEM_ERROR.getCode(), StatusCodeEnum.SYSTEM_ERROR.getDesc());\n    }\n\n}",
        "description": "这段代码是一个控制器通知处理类，用于处理不同类型的异常并返回相应的结果。其中包含处理自定义异常BizException、方法参数校验异常MethodArgumentNotValidException和其他异常的方法。",
        "label": "JavaClass"
    },
    {
        "id": 687,
        "fullName": "com.aurora.service.TokenService",
        "comment": "",
        "content": "public interface TokenService {\n\n    String createToken(UserDetailsDTO userDetailsDTO);\n\n    String createToken(String subject);\n\n    void refreshToken(UserDetailsDTO userDetailsDTO);\n\n    void renewToken(UserDetailsDTO userDetailsDTO);\n\n    Claims parseToken(String token);\n\n    UserDetailsDTO getUserDetailDTO(HttpServletRequest request);\n\n    void delLoginUser(Integer userId);\n\n}",
        "description": "这段代码定义了一个TokenService接口，包含了创建token、更新token、解析token、获取用户信息和删除登录用户等方法。",
        "label": "JavaClass"
    },
    {
        "id": 688,
        "fullName": "com.aurora.service.impl.UserRoleServiceImpl",
        "comment": "",
        "content": "@Service\npublic class UserRoleServiceImpl extends ServiceImpl<UserRoleMapper, UserRole> implements UserRoleService {\n\n}",
        "description": "这段代码定义了一个名为UserRoleServiceImpl的类，它是一个服务类，实现了UserRoleService接口。该类继承自ServiceImpl类，并指定了泛型类型为UserRole和UserRoleMapper。",
        "label": "JavaClass"
    },
    {
        "id": 689,
        "fullName": "com.aurora.util.ExceptionUtil",
        "comment": "",
        "content": "public class ExceptionUtil {\n\n    public static String getTrace(Throwable t) {\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter writer = new PrintWriter(stringWriter);\n        t.printStackTrace(writer);\n        StringBuffer buffer = stringWriter.getBuffer();\n        return buffer.toString();\n    }\n\n}",
        "description": "这段代码定义了一个静态方法ExceptionUtil.getTrace，用于获取Throwable对象的堆栈跟踪信息并以字符串形式返回。",
        "label": "JavaClass"
    },
    {
        "id": 690,
        "fullName": "com.aurora.service.JobLogService",
        "comment": "",
        "content": "public interface JobLogService extends IService<JobLog> {\n\n    PageResultDTO<JobLogDTO> listJobLogs(JobLogSearchVO jobLogSearchVO);\n\n    void deleteJobLogs(List<Integer> ids);\n\n    void cleanJobLogs();\n\n    List<String> listJobLogGroups();\n\n}",
        "description": "这段代码定义了一个名为JobLogService的接口，它继承自IService<JobLog>接口。\nJobLogService接口提供了一些方法，包括listJobLogs、deleteJobLogs、cleanJobLogs和listJobLogGroups。\n其中，listJobLogs方法用于获取JobLogDTO对象的分页结果，deleteJobLogs方法用于删除JobLog对象的列表，\ncleanJobLogs方法用于清空JobLog对象，listJobLogGroups方法用于获取JobLog对象的分组列表。",
        "label": "JavaClass"
    },
    {
        "id": 691,
        "fullName": "com.aurora.controller.BizExceptionController",
        "comment": "",
        "content": "@Api(tags = \"异常处理模块\")\n@RestController\npublic class BizExceptionController {\n\n    @SneakyThrows\n    @ApiOperation(\"\/处理BizException\")\n    @RequestMapping(\"\/bizException\")\n    public void handleBizException(HttpServletRequest request) {\n        if (request.getAttribute(\"bizException\") instanceof BizException) {\n            System.out.println(request.getAttribute(\"bizException\"));\n            throw ((BizException) request.getAttribute(\"bizException\"));\n        } else {\n            throw new Exception();\n        }\n    }\n\n}",
        "description": "这段代码是一个异常处理模块的控制器，用于处理BizException异常。",
        "label": "JavaClass"
    },
    {
        "id": 692,
        "fullName": "com.aurora.model.vo.CommentVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"评论\")\npublic class CommentVO {\n\n    @ApiModelProperty(name = \"replyUserId\", value = \"回复用户id\", dataType = \"Integer\")\n    private Integer replyUserId;\n\n    @ApiModelProperty(name = \"topicId\", value = \"主题id\", dataType = \"Integer\")\n    private Integer topicId;\n\n    @NotBlank(message = \"评论内容不能为空\")\n    @ApiModelProperty(name = \"commentContent\", value = \"评论内容\", required = true, dataType = \"String\")\n    private String commentContent;\n\n    @ApiModelProperty(name = \"parentId\", value = \"评论父id\", dataType = \"Integer\")\n    private Integer parentId;\n\n    @NotNull(message = \"评论类型不能为空\")\n    @ApiModelProperty(name = \"type\", value = \"评论类型\", dataType = \"Integer\")\n    private Integer type;\n}",
        "description": "评论值对象类 CommentVO 包含了回复用户id、主题id、评论内容、评论父id和评论类型等属性。",
        "label": "JavaClass"
    },
    {
        "id": 693,
        "fullName": "com.aurora.entity.UniqueView",
        "comment": "\/**\n * @author 花未眠\n * 网站访问量\n *\/",
        "content": "\/**\n * @author 花未眠\n * 网站访问量\n *\/\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_unique_view\")\npublic class UniqueView {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer viewsCount;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为UniqueView的实体类，用于存储网站的访问量信息。包含id、viewsCount、createTime和updateTime等字段。使用了Lombok的@Data、@Builder、@AllArgsConstructor、@NoArgsConstructor注解，以及MyBatis-Plus的@TableName、@TableId和@TableField注解。",
        "label": "JavaClass"
    },
    {
        "id": 694,
        "fullName": "com.aurora.config.WebSecurityConfig",
        "comment": "",
        "content": "@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AccessDeniedHandler accessDeniedHandler;\n\n    @Autowired\n    private AuthenticationSuccessHandler authenticationSuccessHandler;\n\n    @Autowired\n    private AuthenticationFailureHandler authenticationFailureHandler;\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    @Bean\n    public FilterInvocationSecurityMetadataSource securityMetadataSource() {\n        return new FilterInvocationSecurityMetadataSourceImpl();\n    }\n\n    @Bean\n    public AccessDecisionManager accessDecisionManager() {\n        return new AccessDecisionManagerImpl();\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.formLogin()\n                .loginProcessingUrl(\"\/users\/login\")\n                .successHandler(authenticationSuccessHandler)\n                .failureHandler(authenticationFailureHandler);\n        http.authorizeRequests()\n                .withObjectPostProcessor(new ObjectPostProcessor<FilterSecurityInterceptor>() {\n                    @Override\n                    public <O extends FilterSecurityInterceptor> O postProcess(O fsi) {\n                        fsi.setSecurityMetadataSource(securityMetadataSource());\n                        fsi.setAccessDecisionManager(accessDecisionManager());\n                        return fsi;\n                    }\n                })\n                .anyRequest().permitAll()\n                .and()\n                .csrf().disable().exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler)\n                .and()\n                .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n    }\n\n}",
        "description": "这段代码是一个Web安全配置类，用于配置权限验证、登录处理、密码加密等功能，并设置了一些安全策略和过滤器。",
        "label": "JavaClass"
    },
    {
        "id": 695,
        "fullName": "com.aurora.model.vo.JobLogSearchVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobLogSearchVO {\n\n    @ApiModelProperty(name = \"任务Id\", value = \"jobId\", dataType = \"Integer\")\n    private Integer jobId;\n\n    @ApiModelProperty(name = \"任务名称\", value = \"jobName\", dataType = \"String\")\n    private String jobName;\n\n    @ApiModelProperty(name = \"任务的组别\", value = \"jobGroup\", dataType = \"String\")\n    private String jobGroup;\n\n    @ApiModelProperty(name = \"任务状态\", value = \"status\", dataType = \"Integer\")\n    private Integer status;\n\n    @ApiModelProperty(name = \"开始时间\", value = \"startTime\", dataType = \"String\")\n    private String startTime;\n\n    @ApiModelProperty(name = \"结束时间\", value = \"endTime\", dataType = \"String\")\n    private String endTime;\n}",
        "description": "这段代码定义了一个用于搜索任务日志的数据传输对象（DTO），包含了任务Id、任务名称、任务组别、任务状态、开始时间和结束时间等属性。使用了Lombok注解@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor来简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 696,
        "fullName": "com.aurora.model.dto.SocialUserInfoDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class SocialUserInfoDTO {\n\n    private String nickname;\n\n    private String avatar;\n\n}",
        "description": "这段代码定义了一个包含昵称和头像信息的社交用户信息数据传输对象(SocialUserInfoDTO)，并使用了Lombok注解简化代码编写。",
        "label": "JavaClass"
    },
    {
        "id": 697,
        "fullName": "com.aurora.controller.ResourceController",
        "comment": "",
        "content": "@Api(tags = \"资源模块\")\n@RestController\npublic class ResourceController {\n\n    @Autowired\n    private ResourceService resourceService;\n\n    @ApiOperation(value = \"查看资源列表\")\n    @GetMapping(\"\/admin\/resources\")\n    public ResultVO<List<ResourceDTO>> listResources(ConditionVO conditionVO) {\n        return ResultVO.ok(resourceService.listResources(conditionVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除资源\")\n    @DeleteMapping(\"\/admin\/resources\/{resourceId}\")\n    public ResultVO<?> deleteResource(@PathVariable(\"resourceId\") Integer resourceId) {\n        resourceService.deleteResource(resourceId);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"新增或修改资源\")\n    @PostMapping(\"\/admin\/resources\")\n    public ResultVO<?> saveOrUpdateResource(@RequestBody @Valid ResourceVO resourceVO) {\n        resourceService.saveOrUpdateResource(resourceVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"查看角色资源选项\")\n    @GetMapping(\"\/admin\/role\/resources\")\n    public ResultVO<List<LabelOptionDTO>> listResourceOption() {\n        return ResultVO.ok(resourceService.listResourceOption());\n    }\n}",
        "description": "这段代码是一个资源模块的控制器，包含了查看资源列表、删除资源、新增或修改资源以及查看角色资源选项等功能。其中使用了Swagger注解@Api和@ApiOperation来生成接口文档，同时还使用了自定义注解@OptLog来记录操作日志。控制器中调用了ResourceService来处理资源相关的业务逻辑。",
        "label": "JavaClass"
    },
    {
        "id": 698,
        "fullName": "com.aurora.event.OperationLogEvent",
        "comment": "",
        "content": "public class OperationLogEvent extends ApplicationEvent {\n\n    public OperationLogEvent(OperationLog operationLog) {\n        super(operationLog);\n    }\n}",
        "description": "OperationLogEvent类继承自ApplicationEvent类，用于处理操作日志事件的发送。",
        "label": "JavaClass"
    },
    {
        "id": 699,
        "fullName": "com.aurora.model.dto.TagAdminDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class TagAdminDTO {\n\n    private Integer id;\n\n    private String tagName;\n\n    private Integer articleCount;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "TagAdminDTO是一个带有id、tagName、articleCount和createTime属性的数据传输对象，具有@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 700,
        "fullName": "com.aurora.mapper.JobLogMapper",
        "comment": "",
        "content": "@Repository\npublic interface JobLogMapper extends BaseMapper<JobLog> {\n\n    List<String> listJobLogGroups();\n\n}",
        "description": "JobLogMapper是一个Repository接口，继承自BaseMapper接口，并且定义了一个方法用于返回job日志的分组列表。",
        "label": "JavaClass"
    },
    {
        "id": 701,
        "fullName": "com.aurora.mapper.ElasticsearchMapper",
        "comment": "\/**\n * @author 花未眠\n * elasticsearch\n *\/",
        "content": "\/**\n * @author 花未眠\n * elasticsearch\n *\/\n@Repository\npublic interface ElasticsearchMapper extends ElasticsearchRepository<ArticleSearchDTO,Integer> {\n\n}",
        "description": "这段代码是一个使用Elasticsearch作为数据存储的博客系统后端的Repository接口，由花未眠编写。",
        "label": "JavaClass"
    },
    {
        "id": 702,
        "fullName": "com.aurora.model.dto.JobLogDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobLogDTO {\n\n    private Integer id;\n\n    private Integer jobId;\n\n    private String jobName;\n\n    private String jobGroup;\n\n    private String invokeTarget;\n\n    private String jobMessage;\n\n    private Integer status;\n\n    private String exceptionInfo;\n\n    private LocalDateTime createTime;\n\n    private Date startTime;\n\n    private Date endTime;\n\n}",
        "description": "这段代码定义了一个包含作业日志相关信息的数据传输对象（DTO），包括作业id、作业名称、作业组、调用目标、执行信息、状态、异常信息、创建时间、开始时间和结束时间。使用了Lombok注解@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor。",
        "label": "JavaClass"
    },
    {
        "id": 703,
        "fullName": "com.aurora.consumer.SubscribeConsumer",
        "comment": "",
        "content": "@Component\n@RabbitListener(queues = SUBSCRIBE_QUEUE)\npublic class SubscribeConsumer {\n\n    @Value(\"${website.url}\")\n    private String websiteUrl;\n\n    @Autowired\n    private ArticleService articleService;\n\n    @Autowired\n    private UserInfoService userInfoService;\n\n    @Autowired\n    private EmailUtil emailUtil;\n\n    @RabbitHandler\n    public void process(byte[] data) {\n        Integer articleId = JSON.parseObject(new String(data), Integer.class);\n        Article article = articleService.getOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articleId));\n        List<UserInfo> users = userInfoService.list(new LambdaQueryWrapper<UserInfo>().eq(UserInfo::getIsSubscribe, TRUE));\n        List<String> emails = users.stream().map(UserInfo::getEmail).collect(Collectors.toList());\n        for (String email : emails) {\n            EmailDTO emailDTO = new EmailDTO();\n            Map<String, Object> map = new HashMap<>();\n            emailDTO.setEmail(email);\n            emailDTO.setSubject(\"文章订阅\");\n            emailDTO.setTemplate(\"common.html\");\n            String url = websiteUrl + \"\/articles\/\" + articleId;\n            if (article.getUpdateTime() == null) {\n                map.put(\"content\", \"花未眠的个人博客发布了新的文章，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n            } else {\n                map.put(\"content\", \"花未眠的个人博客对《\" + article.getArticleTitle() + \"》进行了更新，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n            }\n            emailDTO.setCommentMap(map);\n            emailUtil.sendHtmlMail(emailDTO);\n        }\n    }\n\n}",
        "description": "这段代码是一个订阅消费者类，通过RabbitMQ监听指定队列，接收文章ID并根据订阅用户发送邮件通知。",
        "label": "JavaClass"
    },
    {
        "id": 704,
        "fullName": "com.aurora.controller.CategoryController",
        "comment": "",
        "content": "@Api(tags = \"分类模块\")\n@RestController\npublic class CategoryController {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    @ApiOperation(\"获取所有分类\")\n    @GetMapping(\"\/categories\/all\")\n    public ResultVO<List<CategoryDTO>> listCategories() {\n        return ResultVO.ok(categoryService.listCategories());\n    }\n\n    @ApiOperation(value = \"查看后台分类列表\")\n    @GetMapping(\"\/admin\/categories\")\n    public ResultVO<PageResultDTO<CategoryAdminDTO>> listCategoriesAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(categoryService.listCategoriesAdmin(conditionVO));\n    }\n\n    @ApiOperation(value = \"搜索文章分类\")\n    @GetMapping(\"\/admin\/categories\/search\")\n    public ResultVO<List<CategoryOptionDTO>> listCategoriesAdminBySearch(ConditionVO conditionVO) {\n        return ResultVO.ok(categoryService.listCategoriesBySearch(conditionVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除分类\")\n    @DeleteMapping(\"\/admin\/categories\")\n    public ResultVO<?> deleteCategories(@RequestBody List<Integer> categoryIds) {\n        categoryService.deleteCategories(categoryIds);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改分类\")\n    @PostMapping(\"\/admin\/categories\")\n    public ResultVO<?> saveOrUpdateCategory(@Valid @RequestBody CategoryVO categoryVO) {\n        categoryService.saveOrUpdateCategory(categoryVO);\n        return ResultVO.ok();\n    }\n\n\n}",
        "description": "这段代码是一个分类模块的后端控制器，包括获取所有分类、查看后台分类列表、搜索文章分类、删除分类以及添加或修改分类等功能。其中包含了使用@Api和@ApiOperation注解进行接口文档的描述，以及使用@OptLog注解记录操作日志。",
        "label": "JavaClass"
    },
    {
        "id": 705,
        "fullName": "com.aurora.model.dto.TagDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TagDTO {\n\n    private Integer id;\n\n    private String tagName;\n\n    private Integer count;\n\n}",
        "description": "这段代码定义了一个TagDTO类，包含id、tagName和count三个属性，并使用了Lombok注解@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor。",
        "label": "JavaClass"
    },
    {
        "id": 706,
        "fullName": "com.aurora.service.AuroraInfoService",
        "comment": "",
        "content": "public interface AuroraInfoService {\n\n    void report();\n\n    AuroraHomeInfoDTO getAuroraHomeInfo();\n\n    AuroraAdminInfoDTO getAuroraAdminInfo();\n\n    void updateWebsiteConfig(WebsiteConfigVO websiteConfigVO);\n\n    WebsiteConfigDTO getWebsiteConfig();\n\n    void updateAbout(AboutVO aboutVO);\n\n    AboutDTO getAbout();\n\n}",
        "description": "This interface defines methods for reporting, retrieving, updating website information and about information in a blog system.",
        "label": "JavaClass"
    },
    {
        "id": 707,
        "fullName": "com.aurora.model.vo.UserRoleVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"用户权限\")\npublic class UserRoleVO {\n\n    @NotNull(message = \"id不能为空\")\n    @ApiModelProperty(name = \"userInfoId\", value = \"用户信息id\", dataType = \"Integer\")\n    private Integer userInfoId;\n\n    @NotBlank(message = \"昵称不能为空\")\n    @ApiModelProperty(name = \"nickname\", value = \"昵称\", dataType = \"String\")\n    private String nickname;\n\n    @NotNull(message = \"用户角色不能为空\")\n    @ApiModelProperty(name = \"roleList\", value = \"角色id集合\", dataType = \"List<Integer>\")\n    private List<Integer> roleIds;\n\n}",
        "description": "这段代码定义了一个名为UserRoleVO的Java类，用于表示用户权限信息，包括用户信息id、昵称和角色id集合。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解，以及Swagger的@ApiModel和@ApiModelProperty注解。",
        "label": "JavaClass"
    },
    {
        "id": 708,
        "fullName": "com.aurora.model.dto.MaxwellDataDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class MaxwellDataDTO {\n\n    private String database;\n\n    private Integer xid;\n\n    private Map<String, Object> data;\n\n    private Boolean commit;\n\n    private String type;\n\n    private String table;\n\n    private Integer ts;\n\n}",
        "description": "MaxwellDataDTO is a data transfer object class with fields representing database, xid, data map, commit status, type, table, and timestamp. It is equipped with Lombok annotations for data handling.",
        "label": "JavaClass"
    },
    {
        "id": 709,
        "fullName": "com.aurora.handler.AccessDecisionManagerImpl",
        "comment": "",
        "content": "@Component\npublic class AccessDecisionManagerImpl implements AccessDecisionManager {\n    @Override\n    public void decide(Authentication authentication, Object o, Collection<ConfigAttribute> collection) throws AccessDeniedException, InsufficientAuthenticationException {\n        List<String> permissionList = authentication.getAuthorities()\n                .stream()\n                .map(GrantedAuthority::getAuthority)\n                .collect(Collectors.toList());\n        for (ConfigAttribute item : collection) {\n            if (permissionList.contains(item.getAttribute())) {\n                return;\n            }\n        }\n        throw new AccessDeniedException(\"权限不足\");\n    }\n\n    @Override\n    public boolean supports(ConfigAttribute configAttribute) {\n        return true;\n    }\n\n    @Override\n    public boolean supports(Class<?> aClass) {\n        return true;\n    }\n}",
        "description": "这段代码是一个实现了AccessDecisionManager接口的类，用于决定用户是否有权限访问某个资源。通过检查用户的权限列表和资源所需的权限列表来判断是否允许访问。如果权限不足则抛出AccessDeniedException异常。",
        "label": "JavaClass"
    },
    {
        "id": 710,
        "fullName": "com.aurora.entity.Role",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_role\")\npublic class Role {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String roleName;\n\n    private Integer isDisable;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Role的类，用于表示博客系统中的角色信息。该类使用了Lombok库的注解，包括@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor，用于自动生成getter、setter方法、构造方法和无参构造方法。类的属性包括id（自动生成、自增长的整数）、roleName（角色名称）、isDisable（是否禁用角色）、createTime（创建时间）和updateTime（更新时间）。该类还使用了MyBatis-Plus库的注解@TableName和@TableField，用于指定数据库表名和字段的填充策略。",
        "label": "JavaClass"
    },
    {
        "id": 711,
        "fullName": "com.aurora.entity.FriendLink",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"t_friend_link\")\npublic class FriendLink {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String linkName;\n\n    private String linkAvatar;\n\n    private String linkAddress;\n\n    private String linkIntro;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为FriendLink的实体类，用于表示博客系统中的友情链接信息，包括链接名称、头像、地址、介绍等字段，并使用Lombok注解简化代码编写。@Id注解指定id为自增主键，@TableField注解指定createTime和updateTime字段在插入和更新时自动填充时间。@Table注解指定表名为\"t_friend_link\"。",
        "label": "JavaClass"
    },
    {
        "id": 712,
        "fullName": "com.aurora.strategy.impl.MySqlSearchStrategyImpl",
        "comment": "",
        "content": "@Service(\"mySqlSearchStrategyImpl\")\npublic class MySqlSearchStrategyImpl implements SearchStrategy {\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Override\n    public List<ArticleSearchDTO> searchArticle(String keywords) {\n        if (StringUtils.isBlank(keywords)) {\n            return new ArrayList<>();\n        }\n        List<Article> articles = articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, FALSE)\n                .eq(Article::getStatus, PUBLIC.getStatus())\n                .and(i -> i.like(Article::getArticleTitle, keywords)\n                        .or()\n                        .like(Article::getArticleContent, keywords)));\n        return articles.stream().map(item -> {\n                    boolean isLowerCase = true;\n                    String articleContent = item.getArticleContent();\n                    int contentIndex = item.getArticleContent().indexOf(keywords.toLowerCase());\n                    if (contentIndex == -1) {\n                        contentIndex = item.getArticleContent().indexOf(keywords.toUpperCase());\n                        if (contentIndex != -1) {\n                            isLowerCase = false;\n                        }\n                    }\n                    if (contentIndex != -1) {\n                        int preIndex = contentIndex > 15 ? contentIndex - 15 : 0;\n                        String preText = item.getArticleContent().substring(preIndex, contentIndex);\n                        int last = contentIndex + keywords.length();\n                        int postLength = item.getArticleContent().length() - last;\n                        int postIndex = postLength > 35 ? last + 35 : last + postLength;\n                        String postText = item.getArticleContent().substring(contentIndex, postIndex);\n                        if (isLowerCase) {\n                            articleContent = (preText + postText).replaceAll(keywords.toLowerCase(), PRE_TAG + keywords.toLowerCase() + POST_TAG);\n                        } else {\n                            articleContent = (preText + postText).replaceAll(keywords.toUpperCase(), PRE_TAG + keywords.toUpperCase() + POST_TAG);\n                        }\n                    } else {\n                        return null;\n                    }\n                    isLowerCase = true;\n                    int titleIndex = item.getArticleTitle().indexOf(keywords.toLowerCase());\n                    if (titleIndex == -1) {\n                        titleIndex = item.getArticleTitle().indexOf(keywords.toUpperCase());\n                        if (titleIndex != -1) {\n                            isLowerCase = false;\n                        }\n                    }\n                    String articleTitle;\n                    if (isLowerCase) {\n                        articleTitle = item.getArticleTitle().replaceAll(keywords.toLowerCase(), PRE_TAG + keywords.toLowerCase() + POST_TAG);\n                    } else {\n                        articleTitle = item.getArticleTitle().replaceAll(keywords.toUpperCase(), PRE_TAG + keywords.toUpperCase() + POST_TAG);\n                    }\n                    return ArticleSearchDTO.builder()\n                            .id(item.getId())\n                            .articleTitle(articleTitle)\n                            .articleContent(articleContent)\n                            .build();\n                }).filter(Objects::nonNull)\n                .collect(Collectors.toList());\n    }\n\n}",
        "description": "这段代码实现了一个基于MySQL的文章搜索策略，根据关键词搜索文章标题和内容，并返回符合条件的文章列表。",
        "label": "JavaClass"
    },
    {
        "id": 713,
        "fullName": "com.aurora.model.vo.ResultVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@SuppressWarnings(\"all\")\npublic class ResultVO<T> {\n\n    private Boolean flag;\n\n    private Integer code;\n\n    private String message;\n\n    private T data;\n\n    public static <T> ResultVO<T> ok() {\n        return resultVO(true, SUCCESS.getCode(), SUCCESS.getDesc(), null);\n    }\n\n    public static <T> ResultVO<T> ok(T data) {\n        return resultVO(true, SUCCESS.getCode(), SUCCESS.getDesc(), data);\n    }\n\n    public static <T> ResultVO<T> ok(T data, String message) {\n        return resultVO(true, SUCCESS.getCode(), message, data);\n    }\n\n    public static <T> ResultVO<T> fail() {\n        return resultVO(false, FAIL.getCode(), FAIL.getDesc(), null);\n    }\n\n    public static <T> ResultVO<T> fail(StatusCodeEnum statusCodeEnum) {\n        return resultVO(false, statusCodeEnum.getCode(), statusCodeEnum.getDesc(), null);\n    }\n\n    public static <T> ResultVO<T> fail(String message) {\n        return resultVO(false, message);\n    }\n\n    public static <T> ResultVO<T> fail(T data) {\n        return resultVO(false, FAIL.getCode(), FAIL.getDesc(), data);\n    }\n\n    public static <T> ResultVO<T> fail(T data, String message) {\n        return resultVO(false, FAIL.getCode(), message, data);\n    }\n\n    public static <T> ResultVO<T> fail(Integer code, String message) {\n        return resultVO(false, code, message, null);\n    }\n\n    private static <T> ResultVO<T> resultVO(Boolean flag, String message) {\n        return ResultVO.<T>builder()\n                .flag(flag)\n                .code(flag ? SUCCESS.getCode() : FAIL.getCode())\n                .message(message).build();\n    }\n\n    private static <T> ResultVO<T> resultVO(Boolean flag, Integer code, String message, T data) {\n        return ResultVO.<T>builder()\n                .flag(flag)\n                .code(code)\n                .message(message)\n                .data(data).build();\n    }\n\n}",
        "description": "这段代码定义了一个通用的返回结果类ResultVO，包含了flag、code、message和data字段，提供了各种返回成功和失败结果的静态方法。通过Builder模式构建ResultVO对象。",
        "label": "JavaClass"
    },
    {
        "id": 714,
        "fullName": "com.aurora.model.vo.ArticleVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"文章\")\npublic class ArticleVO {\n\n    @ApiModelProperty(name = \"id\", value = \"文章id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"文章标题不能为空\")\n    @ApiModelProperty(name = \"articleTitle\", value = \"文章标题\", required = true, dataType = \"String\")\n    private String articleTitle;\n\n    @NotBlank(message = \"文章内容不能为空\")\n    @ApiModelProperty(name = \"articleContent\", value = \"文章内容\", required = true, dataType = \"String\")\n    private String articleContent;\n\n    @ApiModelProperty(name = \"articleAbstract\", value = \"文章摘要\", dataType = \"String\")\n    private String articleAbstract;\n\n    @ApiModelProperty(name = \"articleCover\", value = \"文章缩略图\", dataType = \"String\")\n    private String articleCover;\n\n    @ApiModelProperty(name = \"category\", value = \"文章分类\", dataType = \"Integer\")\n    private String categoryName;\n\n    @ApiModelProperty(name = \"tagNameList\", value = \"文章标签\", dataType = \"List<Integer>\")\n    private List<String> tagNames;\n\n    @ApiModelProperty(name = \"isTop\", value = \"是否置顶\", dataType = \"Integer\")\n    private Integer isTop;\n\n    @ApiModelProperty(name = \"isFeatured\", value = \"是否推荐\", dataType = \"Integer\")\n    private Integer isFeatured;\n\n    @ApiModelProperty(name = \"status\", value = \"文章状态\", dataType = \"String\")\n    private Integer status;\n\n    @ApiModelProperty(name = \"type\", value = \"文章类型\", dataType = \"Integer\")\n    private Integer type;\n\n    @ApiModelProperty(name = \"originalUrl\", value = \"原文链接\", dataType = \"String\")\n    private String originalUrl;\n\n    @ApiModelProperty(name = \"password\", value = \"文章访问密码\", dataType = \"String\")\n    private String password;\n}",
        "description": "这段代码定义了一个名为ArticleVO的类，它是一个后端数据对象，用于表示博客系统中的文章。该类使用了Lombok的注解，包括@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor，用于简化代码并提供一些常用的方法。该类包含了文章的各种属性，例如id、文章标题、文章内容、文章摘要、文章缩略图、文章分类、文章标签等。",
        "label": "JavaClass"
    },
    {
        "id": 715,
        "fullName": "com.aurora.util.IpUtil",
        "comment": "",
        "content": "@Slf4j\n@Component\npublic class IpUtil {\n\n    private static DbSearcher searcher;\n\n    private static Method method;\n\n    public static String getIpAddress(HttpServletRequest request) {\n        String ipAddress = request.getHeader(\"X-Real-IP\");\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"x-forwarded-for\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"HTTP_CLIENT_IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getRemoteAddr();\n            if (\"127.0.0.1\".equals(ipAddress) || \"0:0:0:0:0:0:0:1\".equals(ipAddress)) {\n                \/\/根据网卡取本机配置的IP\n                InetAddress inet = null;\n                try {\n                    inet = InetAddress.getLocalHost();\n                } catch (UnknownHostException e) {\n                    log.error(\"getIpAddress exception:\", e);\n                }\n                assert inet != null;\n                ipAddress = inet.getHostAddress();\n            }\n        }\n        return StringUtils.substringBefore(ipAddress, \",\");\n    }\n\n    @PostConstruct\n    private void initIp2regionResource() throws Exception {\n        InputStream inputStream = new ClassPathResource(\"\/ip\/ip2region.db\").getInputStream();\n        byte[] dbBinStr = FileCopyUtils.copyToByteArray(inputStream);\n        DbConfig dbConfig = new DbConfig();\n        searcher = new DbSearcher(dbConfig, dbBinStr);\n        method = searcher.getClass().getMethod(\"memorySearch\", String.class);\n    }\n\n    public static String getIpSource(String ipAddress) {\n        if (ipAddress == null || !Util.isIpAddress(ipAddress)) {\n            log.error(\"Error: Invalid ip address\");\n            return \"\";\n        }\n        try {\n            DataBlock dataBlock = (DataBlock) method.invoke(searcher, ipAddress);\n            String ipInfo = dataBlock.getRegion();\n            if (!StringUtils.isEmpty(ipInfo)) {\n                ipInfo = ipInfo.replace(\"|0\", \"\");\n                ipInfo = ipInfo.replace(\"0|\", \"\");\n                return ipInfo;\n            }\n        } catch (Exception e) {\n            log.error(\"getCityInfo exception:\", e);\n        }\n        return \"\";\n    }\n\n    public static String getIpProvince(String ipSource) {\n        if (StringUtils.isBlank(ipSource)) {\n            return CommonConstant.UNKNOWN;\n        }\n        String[] strings = ipSource.split(\"\\\\|\");\n        if (strings.length > 1 && strings[1].endsWith(\"省\")) {\n            return StringUtils.substringBefore(strings[1], \"省\");\n        }\n        return strings[0];\n    }\n\n    public static UserAgent getUserAgent(HttpServletRequest request) {\n        return UserAgent.parseUserAgentString(request.getHeader(\"User-Agent\"));\n    }\n\n}",
        "description": "这段代码是一个用于获取IP地址、IP来源、IP省份和用户代理信息的工具类，通过HttpServletRequest对象获取相应的信息，还包含了初始化IP数据库资源和处理IP地址的方法。",
        "label": "JavaClass"
    },
    {
        "id": 716,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl",
        "comment": "",
        "content": "@Service\npublic class AuroraInfoServiceImpl implements AuroraInfoService {\n\n    @Autowired\n    private WebsiteConfigMapper websiteConfigMapper;\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private CategoryMapper categoryMapper;\n\n    @Autowired\n    private TagMapper tagMapper;\n\n    @Autowired\n    private CommentMapper commentMapper;\n\n    @Autowired\n    private TalkMapper talkMapper;\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private AboutMapper aboutMapper;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private UniqueViewService uniqueViewService;\n\n    @Autowired\n    private HttpServletRequest request;\n\n    @Override\n    public void report() {\n        String ipAddress = IpUtil.getIpAddress(request);\n        UserAgent userAgent = IpUtil.getUserAgent(request);\n        Browser browser = userAgent.getBrowser();\n        OperatingSystem operatingSystem = userAgent.getOperatingSystem();\n        String uuid = ipAddress + browser.getName() + operatingSystem.getName();\n        String md5 = DigestUtils.md5DigestAsHex(uuid.getBytes());\n        if (!redisService.sIsMember(UNIQUE_VISITOR, md5)) {\n            String ipSource = IpUtil.getIpSource(ipAddress);\n            if (StringUtils.isNotBlank(ipSource)) {\n                String ipProvince = IpUtil.getIpProvince(ipSource);\n                redisService.hIncr(VISITOR_AREA, ipProvince, 1L);\n            } else {\n                redisService.hIncr(VISITOR_AREA, UNKNOWN, 1L);\n            }\n            redisService.incr(BLOG_VIEWS_COUNT, 1);\n            redisService.sAdd(UNIQUE_VISITOR, md5);\n        }\n    }\n\n    @SneakyThrows\n    @Override\n    public AuroraHomeInfoDTO getAuroraHomeInfo() {\n        CompletableFuture<Integer> asyncArticleCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(new LambdaQueryWrapper<Article>().eq(Article::getIsDelete, FALSE)));\n        CompletableFuture<Integer> asyncCategoryCount = CompletableFuture.supplyAsync(() -> categoryMapper.selectCount(null));\n        CompletableFuture<Integer> asyncTagCount = CompletableFuture.supplyAsync(() -> tagMapper.selectCount(null));\n        CompletableFuture<Integer> asyncTalkCount = CompletableFuture.supplyAsync(() -> talkMapper.selectCount(null));\n        CompletableFuture<WebsiteConfigDTO> asyncWebsiteConfig = CompletableFuture.supplyAsync(this::getWebsiteConfig);\n        CompletableFuture<Integer> asyncViewCount = CompletableFuture.supplyAsync(() -> {\n            Object count = redisService.get(BLOG_VIEWS_COUNT);\n            return Integer.parseInt(Optional.ofNullable(count).orElse(0).toString());\n        });\n        return AuroraHomeInfoDTO.builder()\n                .articleCount(asyncArticleCount.get())\n                .categoryCount(asyncCategoryCount.get())\n                .tagCount(asyncTagCount.get())\n                .talkCount(asyncTalkCount.get())\n                .websiteConfigDTO(asyncWebsiteConfig.get())\n                .viewCount(asyncViewCount.get()).build();\n    }\n\n    @Override\n    public AuroraAdminInfoDTO getAuroraAdminInfo() {\n        Object count = redisService.get(BLOG_VIEWS_COUNT);\n        Integer viewsCount = Integer.parseInt(Optional.ofNullable(count).orElse(0).toString());\n        Integer messageCount = commentMapper.selectCount(new LambdaQueryWrapper<Comment>().eq(Comment::getType, 2));\n        Integer userCount = userInfoMapper.selectCount(null);\n        Integer articleCount = articleMapper.selectCount(new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, FALSE));\n        List<UniqueViewDTO> uniqueViews = uniqueViewService.listUniqueViews();\n        List<ArticleStatisticsDTO> articleStatisticsDTOs = articleMapper.listArticleStatistics();\n        List<CategoryDTO> categoryDTOs = categoryMapper.listCategories();\n        List<TagDTO> tagDTOs = BeanCopyUtil.copyList(tagMapper.selectList(null), TagDTO.class);\n        Map<Object, Double> articleMap = redisService.zReverseRangeWithScore(ARTICLE_VIEWS_COUNT, 0, 4);\n        AuroraAdminInfoDTO auroraAdminInfoDTO = AuroraAdminInfoDTO.builder()\n                .articleStatisticsDTOs(articleStatisticsDTOs)\n                .tagDTOs(tagDTOs)\n                .viewsCount(viewsCount)\n                .messageCount(messageCount)\n                .userCount(userCount)\n                .articleCount(articleCount)\n                .categoryDTOs(categoryDTOs)\n                .uniqueViewDTOs(uniqueViews)\n                .build();\n        if (CollectionUtils.isNotEmpty(articleMap)) {\n            List<ArticleRankDTO> articleRankDTOList = listArticleRank(articleMap);\n            auroraAdminInfoDTO.setArticleRankDTOs(articleRankDTOList);\n        }\n        return auroraAdminInfoDTO;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateWebsiteConfig(WebsiteConfigVO websiteConfigVO) {\n        WebsiteConfig websiteConfig = WebsiteConfig.builder()\n                .id(DEFAULT_CONFIG_ID)\n                .config(JSON.toJSONString(websiteConfigVO))\n                .build();\n        websiteConfigMapper.updateById(websiteConfig);\n        redisService.del(WEBSITE_CONFIG);\n    }\n\n    @Override\n    public WebsiteConfigDTO getWebsiteConfig() {\n        WebsiteConfigDTO websiteConfigDTO;\n        Object websiteConfig = redisService.get(WEBSITE_CONFIG);\n        if (Objects.nonNull(websiteConfig)) {\n            websiteConfigDTO = JSON.parseObject(websiteConfig.toString(), WebsiteConfigDTO.class);\n        } else {\n            String config = websiteConfigMapper.selectById(DEFAULT_CONFIG_ID).getConfig();\n            websiteConfigDTO = JSON.parseObject(config, WebsiteConfigDTO.class);\n            redisService.set(WEBSITE_CONFIG, config);\n        }\n        return websiteConfigDTO;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateAbout(AboutVO aboutVO) {\n        About about = About.builder()\n                .id(DEFAULT_ABOUT_ID)\n                .content(JSON.toJSONString(aboutVO))\n                .build();\n        aboutMapper.updateById(about);\n        redisService.del(ABOUT);\n    }\n\n    @Override\n    public AboutDTO getAbout() {\n        AboutDTO aboutDTO;\n        Object about = redisService.get(ABOUT);\n        if (Objects.nonNull(about)) {\n            aboutDTO = JSON.parseObject(about.toString(), AboutDTO.class);\n        } else {\n            String content = aboutMapper.selectById(DEFAULT_ABOUT_ID).getContent();\n            aboutDTO = JSON.parseObject(content, AboutDTO.class);\n            redisService.set(ABOUT, content);\n        }\n        return aboutDTO;\n    }\n\n    private List<ArticleRankDTO> listArticleRank(Map<Object, Double> articleMap) {\n        List<Integer> articleIds = new ArrayList<>(articleMap.size());\n        articleMap.forEach((key, value) -> articleIds.add((Integer) key));\n        return articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                        .select(Article::getId, Article::getArticleTitle)\n                        .in(Article::getId, articleIds))\n                .stream().map(article -> ArticleRankDTO.builder()\n                        .articleTitle(article.getArticleTitle())\n                        .viewsCount(articleMap.get(article.getId()).intValue())\n                        .build())\n                .sorted(Comparator.comparingInt(ArticleRankDTO::getViewsCount).reversed())\n                .collect(Collectors.toList());\n    }\n\n}",
        "description": "AuroraInfoServiceImpl is a service class that provides methods for reporting unique visitors, fetching home and admin information, updating website configuration and about section, and handling article ranking. It interacts with multiple mappers, Redis service, and HttpServletRequest.",
        "label": "JavaClass"
    },
    {
        "id": 717,
        "fullName": "com.aurora.util.EmailUtil",
        "comment": "",
        "content": "@Component\npublic class EmailUtil {\n\n    @Value(\"${spring.mail.username}\")\n    private String email;\n\n    @Autowired\n    private JavaMailSender javaMailSender;\n\n    @Autowired\n    private TemplateEngine templateEngine;\n\n    public void sendHtmlMail(EmailDTO emailDTO) {\n        try {\n            MimeMessage mimeMessage = javaMailSender.createMimeMessage();\n            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);\n            Context context = new Context();\n            context.setVariables(emailDTO.getCommentMap());\n            String process = templateEngine.process(emailDTO.getTemplate(), context);\n            mimeMessageHelper.setFrom(email);\n            mimeMessageHelper.setTo(emailDTO.getEmail());\n            mimeMessageHelper.setSubject(emailDTO.getSubject());\n            mimeMessageHelper.setText(process, true);\n            javaMailSender.send(mimeMessage);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "description": "该类是一个邮件工具类，用于发送HTML格式的邮件。其中包括从配置文件中获取邮箱地址、注入邮件发送器和模板引擎，以及发送HTML邮件的方法。捕获了邮件发送过程中的异常并打印堆栈信息。",
        "label": "JavaClass"
    },
    {
        "id": 718,
        "fullName": "com.aurora.config.MybatisPlusConfig",
        "comment": "",
        "content": "@EnableTransactionManagement\n@Configuration\npublic class MybatisPlusConfig {\n\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n}",
        "description": "这段代码是一个Mybatis Plus配置类，使用@EnableTransactionManagement注解开启事务管理，并配置了一个Mybatis Plus拦截器用于处理分页查询。",
        "label": "JavaClass"
    },
    {
        "id": 719,
        "fullName": "com.aurora.model.dto.UserAdminDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserAdminDTO {\n\n    private Integer id;\n\n    private Integer userInfoId;\n\n    private String avatar;\n\n    private String nickname;\n\n    private List<UserRoleDTO> roles;\n\n    private Integer loginType;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private Date createTime;\n\n    private Date lastLoginTime;\n\n    private Integer isDisable;\n\n    private Integer status;\n\n}",
        "description": "UserAdminDTO is a data transfer object class representing an admin user in the blog system, containing information such as id, avatar, nickname, roles, login type, IP address, create time, last login time, disable status, and user status.",
        "label": "JavaClass"
    },
    {
        "id": 720,
        "fullName": "com.aurora.entity.Tag",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_tag\")\npublic class Tag {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String tagName;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Tag的实体类，用于映射数据库中的t_tag表，包含id、tagName、createTime和updateTime等属性。同时使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解简化代码。",
        "label": "JavaClass"
    },
    {
        "id": 721,
        "fullName": "com.aurora.mapper.ResourceMapper",
        "comment": "",
        "content": "@Repository\npublic interface ResourceMapper extends BaseMapper<Resource> {\n\n}",
        "description": "这段代码定义了一个资源映射器接口，继承自基础映射器接口，并使用@Repository注解。",
        "label": "JavaClass"
    },
    {
        "id": 722,
        "fullName": "com.aurora.mapper.TalkMapper",
        "comment": "",
        "content": "@Repository\npublic interface TalkMapper extends BaseMapper<Talk> {\n\n    List<TalkDTO> listTalks(@Param(\"current\") Long current, @Param(\"size\") Long size);\n\n    TalkDTO getTalkById(@Param(\"talkId\") Integer talkId);\n\n    List<TalkAdminDTO> listTalksAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n    TalkAdminDTO getTalkByIdAdmin(@Param(\"talkId\") Integer talkId);\n\n}",
        "description": "This code defines a TalkMapper interface that extends BaseMapper<Talk> and includes methods for listing and retrieving talks, both for regular users and admins.",
        "label": "JavaClass"
    },
    {
        "id": 723,
        "fullName": "com.aurora.mapper.ExceptionLogMapper",
        "comment": "",
        "content": "@Repository\npublic interface ExceptionLogMapper extends BaseMapper<ExceptionLog> {\n\n}",
        "description": "这段代码是一个博客系统的后端代码，它表示一个异常日志映射器接口，继承自BaseMapper接口，并使用@Repository注解标记。",
        "label": "JavaClass"
    },
    {
        "id": 724,
        "fullName": "com.aurora.service.impl.RoleServiceImpl",
        "comment": "",
        "content": "@Service\npublic class RoleServiceImpl extends ServiceImpl<RoleMapper, Role> implements RoleService {\n\n    @Autowired\n    private RoleMapper roleMapper;\n\n    @Autowired\n    private UserRoleMapper userRoleMapper;\n\n    @Autowired\n    private RoleResourceService roleResourceService;\n\n    @Autowired\n    private RoleMenuService roleMenuService;\n\n    @Autowired\n    private FilterInvocationSecurityMetadataSourceImpl filterInvocationSecurityMetadataSource;\n\n    @Override\n    public List<UserRoleDTO> listUserRoles() {\n        List<Role> roleList = roleMapper.selectList(new LambdaQueryWrapper<Role>()\n                .select(Role::getId, Role::getRoleName));\n        return BeanCopyUtil.copyList(roleList, UserRoleDTO.class);\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<RoleDTO> listRoles(ConditionVO conditionVO) {\n        LambdaQueryWrapper<Role> queryWrapper = new LambdaQueryWrapper<Role>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Role::getRoleName, conditionVO.getKeywords());\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> roleMapper.selectCount(queryWrapper));\n        List<RoleDTO> roleDTOs = roleMapper.listRoles(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(roleDTOs, asyncCount.get());\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdateRole(RoleVO roleVO) {\n        Role roleCheck = roleMapper.selectOne(new LambdaQueryWrapper<Role>()\n                .select(Role::getId)\n                .eq(Role::getRoleName, roleVO.getRoleName()));\n        if (Objects.nonNull(roleCheck) && !(roleCheck.getId().equals(roleVO.getId()))) {\n            throw new BizException(\"该角色存在\");\n        }\n        Role role = Role.builder()\n                .id(roleVO.getId())\n                .roleName(roleVO.getRoleName())\n                .isDisable(CommonConstant.FALSE)\n                .build();\n        this.saveOrUpdate(role);\n        if (Objects.nonNull(roleVO.getResourceIds())) {\n            if (Objects.nonNull(roleVO.getId())) {\n                roleResourceService.remove(new LambdaQueryWrapper<RoleResource>()\n                        .eq(RoleResource::getRoleId, roleVO.getId()));\n            }\n            List<RoleResource> roleResourceList = roleVO.getResourceIds().stream()\n                    .map(resourceId -> RoleResource.builder()\n                            .roleId(role.getId())\n                            .resourceId(resourceId)\n                            .build())\n                    .collect(Collectors.toList());\n            roleResourceService.saveBatch(roleResourceList);\n            filterInvocationSecurityMetadataSource.clearDataSource();\n        }\n        if (Objects.nonNull(roleVO.getMenuIds())) {\n            if (Objects.nonNull(roleVO.getId())) {\n                roleMenuService.remove(new LambdaQueryWrapper<RoleMenu>().eq(RoleMenu::getRoleId, roleVO.getId()));\n            }\n            List<RoleMenu> roleMenuList = roleVO.getMenuIds().stream()\n                    .map(menuId -> RoleMenu.builder()\n                            .roleId(role.getId())\n                            .menuId(menuId)\n                            .build())\n                    .collect(Collectors.toList());\n            roleMenuService.saveBatch(roleMenuList);\n        }\n    }\n\n    @Override\n    public void deleteRoles(List<Integer> roleIdList) {\n        Integer count = userRoleMapper.selectCount(new LambdaQueryWrapper<UserRole>()\n                .in(UserRole::getRoleId, roleIdList));\n        if (count > 0) {\n            throw new BizException(\"该角色下存在用户\");\n        }\n        roleMapper.deleteBatchIds(roleIdList);\n    }\n\n}",
        "description": "这段代码是一个角色服务的实现类，它继承自ServiceImpl，并实现了RoleService接口。该类主要用于角色的增删改查操作。其中包含了获取用户角色列表、获取角色列表、保存或更新角色、删除角色等方法。在保存或更新角色时，还会对角色关联的资源和菜单进行处理。",
        "label": "JavaClass"
    },
    {
        "id": 725,
        "fullName": "com.aurora.service.MenuService",
        "comment": "",
        "content": "public interface MenuService extends IService<Menu> {\n\n    List<MenuDTO> listMenus(ConditionVO conditionVO);\n\n    void saveOrUpdateMenu(MenuVO menuVO);\n\n    void updateMenuIsHidden(IsHiddenVO isHiddenVO);\n\n    void deleteMenu(Integer menuId);\n\n    List<LabelOptionDTO> listMenuOptions();\n\n    List<UserMenuDTO> listUserMenus();\n\n}",
        "description": "这段代码定义了一个接口MenuService，包括列出菜单、保存或更新菜单、更新菜单是否隐藏、删除菜单、列出菜单选项和列出用户菜单的方法。",
        "label": "JavaClass"
    },
    {
        "id": 726,
        "fullName": "com.aurora.service.impl.TokenServiceImpl",
        "comment": "",
        "content": "@Service\npublic class TokenServiceImpl implements TokenService {\n\n    @Value(\"${jwt.secret}\")\n    private String secret;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Override\n    public String createToken(UserDetailsDTO userDetailsDTO) {\n        refreshToken(userDetailsDTO);\n        String userId = userDetailsDTO.getId().toString();\n        return createToken(userId);\n    }\n\n    @Override\n    public String createToken(String subject) {\n        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;\n        SecretKey secretKey = generalKey();\n        return Jwts.builder().setId(getUuid()).setSubject(subject)\n                .setIssuer(\"huaweimian\")\n                .signWith(signatureAlgorithm, secretKey).compact();\n    }\n\n    @Override\n    public void refreshToken(UserDetailsDTO userDetailsDTO) {\n        LocalDateTime currentTime = LocalDateTime.now();\n        userDetailsDTO.setExpireTime(currentTime.plusSeconds(EXPIRE_TIME));\n        String userId = userDetailsDTO.getId().toString();\n        redisService.hSet(LOGIN_USER, userId, userDetailsDTO, EXPIRE_TIME);\n    }\n\n    @Override\n    public void renewToken(UserDetailsDTO userDetailsDTO) {\n        LocalDateTime expireTime = userDetailsDTO.getExpireTime();\n        LocalDateTime currentTime = LocalDateTime.now();\n        if (Duration.between(currentTime, expireTime).toMinutes() <= TWENTY_MINUTES) {\n            refreshToken(userDetailsDTO);\n        }\n    }\n\n    @Override\n    public Claims parseToken(String token) {\n        SecretKey secretKey = generalKey();\n        return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody();\n    }\n\n    @Override\n    public UserDetailsDTO getUserDetailDTO(HttpServletRequest request) {\n        String token = Optional.ofNullable(request.getHeader(TOKEN_HEADER)).orElse(\"\").replaceFirst(TOKEN_PREFIX, \"\");\n        if (StringUtils.hasText(token) && !token.equals(\"null\")) {\n            Claims claims = parseToken(token);\n            String userId = claims.getSubject();\n            return (UserDetailsDTO) redisService.hGet(LOGIN_USER, userId);\n        }\n        return null;\n    }\n\n    @Override\n    public void delLoginUser(Integer userId) {\n        redisService.hDel(LOGIN_USER, String.valueOf(userId));\n    }\n\n    public String getUuid() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }\n\n    public SecretKey generalKey() {\n        byte[] encodedKey = Base64.getDecoder().decode(secret);\n        return new SecretKeySpec(encodedKey, 0, encodedKey.length, \"AES\");\n    }\n\n}",
        "description": "这段代码实现了一个TokenService的接口，包括生成token、刷新token、解析token、获取用户信息等功能，并使用了JWT和Redis来实现用户认证和授权的功能。",
        "label": "JavaClass"
    },
    {
        "id": 727,
        "fullName": "com.aurora.model.vo.PhotoInfoVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"照片信息\")\npublic class PhotoInfoVO {\n\n    @NotNull(message = \"照片id不能为空\")\n    @ApiModelProperty(name = \"id\", value = \"照片id\", required = true, dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"照片名不能为空\")\n    @ApiModelProperty(name = \"photoName\", value = \"照片名\", required = true, dataType = \"String\")\n    private String photoName;\n\n    @ApiModelProperty(name = \"photoDesc\", value = \"照片描述\", dataType = \"String\")\n    private String photoDesc;\n\n}",
        "description": "这段代码定义了一个名为PhotoInfoVO的类，用于表示照片的信息。该类使用了Lombok库的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解，简化了代码的编写。该类还使用了@ApiModel注解，用于描述该类的信息。该类包含了三个字段：id、photoName和photoDesc，分别表示照片的id、照片名和照片描述。其中id和photoName字段使用了@NotNull和@NotBlank注解，表示它们不能为空。同时，该类还使用了@ApiModelProperty注解，用于描述字段的信息。",
        "label": "JavaClass"
    },
    {
        "id": 728,
        "fullName": "com.aurora.model.dto.ExceptionLogDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ExceptionLogDTO {\n\n    private Integer id;\n\n    private String optUri;\n\n    private String optMethod;\n\n    private String requestMethod;\n\n    private String requestParam;\n\n    private String optDesc;\n\n    private String exceptionInfo;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个用于记录异常日志的数据传输对象，包含了异常日志的各种信息字段。",
        "label": "JavaClass"
    },
    {
        "id": 729,
        "fullName": "com.aurora.model.vo.JobRunVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JobRunVO {\n\n    @ApiModelProperty(name=\"任务id\" ,value = \"id\",required = true, dataType = \"Integer\")\n    private Integer id;\n\n    @ApiModelProperty(name=\"任务组别\" ,value = \"jobGroup\",required = true, dataType = \"String\")\n    private String jobGroup;\n}",
        "description": "一个用于表示任务运行的数值对象，包含任务id和任务组别属性。",
        "label": "JavaClass"
    },
    {
        "id": 730,
        "fullName": "com.aurora.controller.PhotoController",
        "comment": "",
        "content": "@Api(tags = \"照片模块\")\n@RestController\npublic class PhotoController {\n\n    @Autowired\n    private PhotoService photoService;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传照片\")\n    @ApiImplicitParam(name = \"file\", value = \"照片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/photos\/upload\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\n    }\n\n    @ApiOperation(value = \"根据相册id获取照片列表\")\n    @GetMapping(\"\/admin\/photos\")\n    public ResultVO<PageResultDTO<PhotoAdminDTO>> listPhotos(ConditionVO conditionVO) {\n        return ResultVO.ok(photoService.listPhotos(conditionVO));\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新照片信息\")\n    @PutMapping(\"\/admin\/photos\")\n    public ResultVO<?> updatePhoto(@Valid @RequestBody PhotoInfoVO photoInfoVO) {\n        photoService.updatePhoto(photoInfoVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = SAVE)\n    @ApiOperation(value = \"保存照片\")\n    @PostMapping(\"\/admin\/photos\")\n    public ResultVO<?> savePhotos(@Valid @RequestBody PhotoVO photoVO) {\n        photoService.savePhotos(photoVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"移动照片相册\")\n    @PutMapping(\"\/admin\/photos\/album\")\n    public ResultVO<?> updatePhotosAlbum(@Valid @RequestBody PhotoVO photoVO) {\n        photoService.updatePhotosAlbum(photoVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新照片删除状态\")\n    @PutMapping(\"\/admin\/photos\/delete\")\n    public ResultVO<?> updatePhotoDelete(@Valid @RequestBody DeleteVO deleteVO) {\n        photoService.updatePhotoDelete(deleteVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除照片\")\n    @DeleteMapping(\"\/admin\/photos\")\n    public ResultVO<?> deletePhotos(@RequestBody List<Integer> photoIds) {\n        photoService.deletePhotos(photoIds);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"根据相册id查看照片列表\")\n    @GetMapping(\"\/albums\/{albumId}\/photos\")\n    public ResultVO<PhotoDTO> listPhotosByAlbumId(@PathVariable(\"albumId\") Integer albumId) {\n        return ResultVO.ok(photoService.listPhotosByAlbumId(albumId));\n    }\n\n}",
        "description": "这段代码是一个照片模块的后端控制器，包括上传照片、获取照片列表、更新照片信息、保存照片、移动照片相册、更新照片删除状态和删除照片等功能。",
        "label": "JavaClass"
    },
    {
        "id": 731,
        "fullName": "com.aurora.service.RoleResourceService",
        "comment": "",
        "content": "public interface RoleResourceService extends IService<RoleResource> {\n\n}",
        "description": "这段代码定义了一个接口RoleResourceService，继承自IService接口，用于处理角色资源的操作。",
        "label": "JavaClass"
    },
    {
        "id": 732,
        "fullName": "com.aurora.config.Knife4jConfig",
        "comment": "",
        "content": "@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfig {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .protocols(Collections.singleton(\"https\"))\n                .host(\"https:\/\/www.linhaojun.top\")\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.aurora.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"aurora文档\")\n                .description(\"aurora\")\n                .contact(new Contact(\"花未眠\", \"\", \"1909925152@qq.com\"))\n                .termsOfServiceUrl(\"https:\/\/www.linhaojun.top\/api\")\n                .version(\"1.0\")\n                .build();\n    }\n\n}",
        "description": "这段代码是一个配置类，用于配置Swagger2WebMvc和Knife4j。它创建了一个Docket对象，用于生成Swagger文档。配置了使用HTTPS协议和指定的主机地址。同时，定义了API的基本信息，包括标题、描述、联系人和版本号。",
        "label": "JavaClass"
    },
    {
        "id": 733,
        "fullName": "com.aurora.exception.TaskException",
        "comment": "",
        "content": "public class TaskException extends Exception {\n\n    private static final long serialVersionUID = 1L;\n\n    private final Code code;\n\n    public TaskException(String msg, Code code) {\n        this(msg, code, null);\n    }\n\n    public TaskException(String msg, Code code, Exception exception) {\n        super(msg, exception);\n        this.code = code;\n    }\n\n    public Code getCode() {\n        return code;\n    }\n\n    public enum Code {\n        TASK_EXISTS, NO_TASK_EXISTS, TASK_ALREADY_STARTED, UNKNOWN, CONFIG_ERROR, TASK_NODE_NOT_AVAILABLE\n    }\n}",
        "description": "TaskException是一个自定义的异常类，用于在博客系统后端中抛出各种与任务相关的异常情况，并包含了不同的错误代码。",
        "label": "JavaClass"
    },
    {
        "id": 734,
        "fullName": "com.aurora.service.OperationLogService",
        "comment": "",
        "content": "public interface OperationLogService extends IService<OperationLog> {\n\n    PageResultDTO<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);\n\n}",
        "description": "这段代码定义了一个OperationLogService接口，继承自IService接口，包含一个用于获取操作日志列表的方法listOperationLogs。",
        "label": "JavaClass"
    },
    {
        "id": 735,
        "fullName": "com.aurora.model.vo.RoleVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"角色\")\npublic class RoleVO {\n\n    @ApiModelProperty(name = \"id\", value = \"用户id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"角色名不能为空\")\n    @ApiModelProperty(name = \"roleName\", value = \"角色名\", required = true, dataType = \"String\")\n    private String roleName;\n\n    @ApiModelProperty(name = \"resourceIdList\", value = \"资源列表\", required = true, dataType = \"List<Integer>\")\n    private List<Integer> resourceIds;\n\n    @ApiModelProperty(name = \"menuIdList\", value = \"菜单列表\", required = true, dataType = \"List<Integer>\")\n    private List<Integer> menuIds;\n\n}",
        "description": "这段代码定义了一个名为RoleVO的Java类，用于表示角色信息，包括角色id、角色名、资源列表和菜单列表。通过使用@Data、@Builder、@AllArgsConstructor、@NoArgsConstructor和@ApiModel注解来简化代码和提供描述信息。",
        "label": "JavaClass"
    },
    {
        "id": 736,
        "fullName": "com.aurora.model.dto.PhotoAlbumAdminDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class PhotoAlbumAdminDTO {\n\n    private Integer id;\n\n    private String albumName;\n\n    private String albumDesc;\n\n    private String albumCover;\n\n    private Integer photoCount;\n\n    private Integer status;\n\n}",
        "description": "这段代码定义了一个名为PhotoAlbumAdminDTO的数据传输对象，包含相册id、相册名称、相册描述、相册封面、照片数量和状态等属性。使用了Lombok注解来自动生成getter、setter、构造函数等方法。",
        "label": "JavaClass"
    },
    {
        "id": 737,
        "fullName": "com.aurora.entity.Category",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_category\")\npublic class Category {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String categoryName;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Category的类，用于表示博客系统中的分类信息，包含id、categoryName、createTime和updateTime属性。通过使用@Data、@Builder、@NoArgsConstructor、@AllArgsConstructor和@TableName注解，简化了类的定义和操作。",
        "label": "JavaClass"
    },
    {
        "id": 738,
        "fullName": "com.aurora.entity.Job",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_job\")\npublic class Job {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String jobName;\n\n    private String jobGroup;\n\n    private String invokeTarget;\n\n    private String cronExpression;\n\n    private Integer misfirePolicy;\n\n    private Integer concurrent;\n\n    private Integer status;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n    private String remark;\n\n    @TableField(exist = false)\n    private Date nextValidTime;\n\n}",
        "description": "一个用于表示任务信息的Java实体类，包含任务名称、任务组、调用目标、定时表达式等属性，并使用了Lombok注解简化代码，同时使用MyBatis-Plus注解指定了对应的数据库表名和字段映射关系。",
        "label": "JavaClass"
    },
    {
        "id": 739,
        "fullName": "com.aurora.strategy.context.ArticleImportStrategyContext",
        "comment": "",
        "content": "@Service\npublic class ArticleImportStrategyContext {\n\n    @Autowired\n    private Map<String, ArticleImportStrategy> articleImportStrategyMap;\n\n    public void importArticles(MultipartFile file, String type) {\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\n    }\n}",
        "description": "这段代码是一个博客系统后端的文章导入策略上下文类。该类通过自动注入一个Map来存储不同类型的文章导入策略，然后提供了一个方法用于导入文章。方法根据传入的文件和类型，通过获取相应的文章导入策略来进行导入操作。",
        "label": "JavaClass"
    },
    {
        "id": 740,
        "fullName": "com.aurora.entity.Talk",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@TableName(\"t_talk\")\npublic class Talk {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private String content;\n\n    private String images;\n\n    private Integer isTop;\n\n    private Integer status;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Talk的实体类，包含了id、userId、content、images、isTop、status、createTime和updateTime等属性，并使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解，同时指定了表名为\"t_talk\"。@Id注解指定id属性为自增主键，@TableField注解指定了createTime和updateTime在插入和更新时自动填充。",
        "label": "JavaClass"
    },
    {
        "id": 741,
        "fullName": "com.aurora.util.UserUtil",
        "comment": "",
        "content": "@Component\npublic class UserUtil {\n\n    public static UserDetailsDTO getUserDetailsDTO() {\n        return (UserDetailsDTO) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    }\n\n    public static Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }\n\n}",
        "description": "这段代码是一个用于获取用户详细信息和身份验证信息的工具类，其中包括获取UserDetailsDTO和Authentication对象的静态方法。",
        "label": "JavaClass"
    },
    {
        "id": 742,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl",
        "comment": "",
        "content": "@Service\npublic class PhotoAlbumServiceImpl extends ServiceImpl<PhotoAlbumMapper, PhotoAlbum> implements PhotoAlbumService {\n\n    @Autowired\n    private PhotoAlbumMapper photoAlbumMapper;\n\n    @Autowired\n    private PhotoMapper photoMapper;\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdatePhotoAlbum(PhotoAlbumVO photoAlbumVO) {\n        PhotoAlbum album = photoAlbumMapper.selectOne(new LambdaQueryWrapper<PhotoAlbum>()\n                .select(PhotoAlbum::getId)\n                .eq(PhotoAlbum::getAlbumName, photoAlbumVO.getAlbumName()));\n        if (Objects.nonNull(album) && !album.getId().equals(photoAlbumVO.getId())) {\n            throw new BizException(\"相册名已存在\");\n        }\n        PhotoAlbum photoAlbum = BeanCopyUtil.copyObject(photoAlbumVO, PhotoAlbum.class);\n        this.saveOrUpdate(photoAlbum);\n    }\n\n    @Override\n    public PageResultDTO<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(ConditionVO conditionVO) {\n        Integer count = photoAlbumMapper.selectCount(new LambdaQueryWrapper<PhotoAlbum>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), PhotoAlbum::getAlbumName, conditionVO.getKeywords())\n                .eq(PhotoAlbum::getIsDelete, FALSE));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<PhotoAlbumAdminDTO> photoAlbumBacks = photoAlbumMapper.listPhotoAlbumsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(photoAlbumBacks, count);\n    }\n\n    @Override\n    public List<PhotoAlbumDTO> listPhotoAlbumInfosAdmin() {\n        List<PhotoAlbum> photoAlbums = photoAlbumMapper.selectList(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getIsDelete, FALSE));\n        return BeanCopyUtil.copyList(photoAlbums, PhotoAlbumDTO.class);\n    }\n\n    @Override\n    public PhotoAlbumAdminDTO getPhotoAlbumByIdAdmin(Integer albumId) {\n        PhotoAlbum photoAlbum = photoAlbumMapper.selectById(albumId);\n        Integer photoCount = photoMapper.selectCount(new LambdaQueryWrapper<Photo>()\n                .eq(Photo::getAlbumId, albumId)\n                .eq(Photo::getIsDelete, FALSE));\n        PhotoAlbumAdminDTO album = BeanCopyUtil.copyObject(photoAlbum, PhotoAlbumAdminDTO.class);\n        album.setPhotoCount(photoCount);\n        return album;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deletePhotoAlbumById(Integer albumId) {\n        Integer count = photoMapper.selectCount(new LambdaQueryWrapper<Photo>()\n                .eq(Photo::getAlbumId, albumId));\n        if (count > 0) {\n            photoAlbumMapper.updateById(PhotoAlbum.builder()\n                    .id(albumId)\n                    .isDelete(TRUE)\n                    .build());\n            photoMapper.update(new Photo(), new LambdaUpdateWrapper<Photo>()\n                    .set(Photo::getIsDelete, TRUE)\n                    .eq(Photo::getAlbumId, albumId));\n        } else {\n            photoAlbumMapper.deleteById(albumId);\n        }\n    }\n\n    @Override\n    public List<PhotoAlbumDTO> listPhotoAlbums() {\n        List<PhotoAlbum> photoAlbumList = photoAlbumMapper.selectList(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getStatus, PUBLIC.getStatus())\n                .eq(PhotoAlbum::getIsDelete, FALSE)\n                .orderByDesc(PhotoAlbum::getId));\n        return BeanCopyUtil.copyList(photoAlbumList, PhotoAlbumDTO.class);\n    }\n\n}",
        "description": "这段代码是一个实现了PhotoAlbumService接口的PhotoAlbumServiceImpl类，包含了对相册信息的增删改查等操作。通过调用对应的mapper，实现了各种与相册相关的方法。@Transactional注解用于事务管理。",
        "label": "JavaClass"
    },
    {
        "id": 743,
        "fullName": "com.aurora.handler.AuthenticationFailHandlerImpl",
        "comment": "\/**\n * 登录失败处理\n *\/",
        "content": "\/**\n * 登录失败处理\n *\/\n@Component\npublic class AuthenticationFailHandlerImpl implements AuthenticationFailureHandler {\n\n\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException {\n        httpServletResponse.setContentType(CommonConstant.APPLICATION_JSON);\n        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.fail(e.getMessage())));\n    }\n\n}",
        "description": "这段代码是一个处理登录失败的类，实现了AuthenticationFailureHandler接口，当登录失败时会返回一个包含错误信息的JSON格式的结果。",
        "label": "JavaClass"
    },
    {
        "id": 744,
        "fullName": "com.aurora.constant.SocialLoginConstant",
        "comment": "",
        "content": "public interface SocialLoginConstant {\n\n    String QQ_OPEN_ID = \"openid\";\n\n    String ACCESS_TOKEN = \"access_token\";\n\n    String OAUTH_CONSUMER_KEY = \"oauth_consumer_key\";\n\n}",
        "description": "这段代码定义了社交登录的常量，包括QQ的openid、access_token和oauth_consumer_key。",
        "label": "JavaClass"
    },
    {
        "id": 745,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl",
        "comment": "",
        "content": "@Component\npublic class FilterInvocationSecurityMetadataSourceImpl implements FilterInvocationSecurityMetadataSource {\n\n\n    @Autowired\n    private RoleMapper roleMapper;\n\n    private static List<ResourceRoleDTO> resourceRoleList;\n\n    @PostConstruct\n    private void loadResourceRoleList() {\n        resourceRoleList = roleMapper.listResourceRoles();\n    }\n\n    public void clearDataSource() {\n        resourceRoleList = null;\n    }\n\n    @Override\n    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {\n        if (CollectionUtils.isEmpty(resourceRoleList)) {\n            this.loadResourceRoleList();\n        }\n        FilterInvocation fi = (FilterInvocation) object;\n        String method = fi.getRequest().getMethod();\n        String url = fi.getRequest().getRequestURI();\n        AntPathMatcher antPathMatcher = new AntPathMatcher();\n        for (ResourceRoleDTO resourceRoleDTO : resourceRoleList) {\n            if (antPathMatcher.match(resourceRoleDTO.getUrl(), url) && resourceRoleDTO.getRequestMethod().equals(method)) {\n                List<String> roleList = resourceRoleDTO.getRoleList();\n                if (CollectionUtils.isEmpty(roleList)) {\n                    return SecurityConfig.createList(\"disable\");\n                }\n                return SecurityConfig.createList(roleList.toArray(new String[]{}));\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Collection<ConfigAttribute> getAllConfigAttributes() {\n        return null;\n    }\n\n    @Override\n    public boolean supports(Class<?> clazz) {\n        return FilterInvocation.class.isAssignableFrom(clazz);\n    }\n}",
        "description": "这段代码是一个实现了FilterInvocationSecurityMetadataSource接口的类，用于获取请求资源的权限配置信息，并根据请求的URL和方法匹配对应的权限列表。在初始化时会加载资源角色列表，并提供清除数据源的方法。",
        "label": "JavaClass"
    },
    {
        "id": 746,
        "fullName": "com.aurora.model.dto.PageResultDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class PageResultDTO<T> {\n\n    private List<T> records;\n\n    private Integer count;\n\n}",
        "description": "这段代码定义了一个泛型类PageResultDTO，用于表示带有分页结果的数据结构。该类使用Lombok注解来自动生成getter和setter方法，同时提供了构造方法，用于初始化records和count属性。",
        "label": "JavaClass"
    },
    {
        "id": 747,
        "fullName": "com.aurora.controller.UserAuthController",
        "comment": "",
        "content": "@Api(tags = \"用户账号模块\")\n@RestController\npublic class UserAuthController {\n\n    @Autowired\n    private UserAuthService userAuthService;\n\n    @AccessLimit(seconds = 60,maxCount = 1)\n    @ApiOperation(value = \"发送邮箱验证码\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\")\n    @GetMapping(\"\/users\/code\")\n    public ResultVO<?> sendCode(String username) {\n        userAuthService.sendCode(username);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"获取用户区域分布\")\n    @GetMapping(\"\/admin\/users\/area\")\n    public ResultVO<List<UserAreaDTO>> listUserAreas(ConditionVO conditionVO) {\n        return ResultVO.ok(userAuthService.listUserAreas(conditionVO));\n    }\n\n    @ApiOperation(value = \"查询后台用户列表\")\n    @GetMapping(\"\/admin\/users\")\n    public ResultVO<PageResultDTO<UserAdminDTO>> listUsers(ConditionVO conditionVO) {\n        return ResultVO.ok(userAuthService.listUsers(conditionVO));\n    }\n\n    @ApiOperation(value = \"用户注册\")\n    @PostMapping(\"\/users\/register\")\n    public ResultVO<?> register(@Valid @RequestBody UserVO userVO) {\n        userAuthService.register(userVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改密码\")\n    @PutMapping(\"\/users\/password\")\n    public ResultVO<?> updatePassword(@Valid @RequestBody UserVO user) {\n        userAuthService.updatePassword(user);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改管理员密码\")\n    @PutMapping(\"\/admin\/users\/password\")\n    public ResultVO<?> updateAdminPassword(@Valid @RequestBody PasswordVO passwordVO) {\n        userAuthService.updateAdminPassword(passwordVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"用户登出\")\n    @PostMapping(\"\/users\/logout\")\n    public ResultVO<UserLogoutStatusDTO> logout() {\n        return ResultVO.ok(userAuthService.logout());\n    }\n\n    @ApiOperation(value = \"qq登录\")\n    @PostMapping(\"\/users\/oauth\/qq\")\n    public ResultVO<UserInfoDTO> qqLogin(@Valid @RequestBody QQLoginVO qqLoginVO) {\n        return ResultVO.ok(userAuthService.qqLogin(qqLoginVO));\n    }\n\n}",
        "description": "这段代码是一个用户账号模块的后端控制器，包含了用户注册、登录、修改密码等功能的接口。其中使用了Swagger注解来生成API文档，并使用了自定义注解来限制接口访问频率。同时还通过@Autowired注解实现了依赖注入，调用了UserAuthService中的方法来处理业务逻辑。",
        "label": "JavaClass"
    },
    {
        "id": 748,
        "fullName": "com.aurora.strategy.SocialLoginStrategy",
        "comment": "",
        "content": "public interface SocialLoginStrategy {\n\n    UserInfoDTO login(String data);\n\n}",
        "description": "这段代码定义了一个接口SocialLoginStrategy，用于实现社交登录功能，其中包含一个login方法用于登录并返回用户信息。",
        "label": "JavaClass"
    },
    {
        "id": 749,
        "fullName": "com.aurora.service.impl.JobServiceImpl",
        "comment": "",
        "content": "@Service\npublic class JobServiceImpl extends ServiceImpl<JobMapper, Job> implements JobService {\n\n    @Autowired\n    private Scheduler scheduler;\n\n    @Autowired\n    private JobMapper jobMapper;\n\n    @SneakyThrows\n    @PostConstruct\n    public void init() {\n        scheduler.clear();\n        List<Job> jobs = jobMapper.selectList(null);\n        for (Job job : jobs) {\n            ScheduleUtil.createScheduleJob(scheduler, job);\n        }\n    }\n\n    @SneakyThrows\n    @Transactional(rollbackFor = Exception.class)\n    public void saveJob(JobVO jobVO) {\n        checkCronIsValid(jobVO);\n        Job job = BeanCopyUtil.copyObject(jobVO, Job.class);\n        int row = jobMapper.insert(job);\n        if (row > 0) ScheduleUtil.createScheduleJob(scheduler, job);\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateJob(JobVO jobVO) {\n        checkCronIsValid(jobVO);\n        Job temp = jobMapper.selectById(jobVO.getId());\n        Job job = BeanCopyUtil.copyObject(jobVO, Job.class);\n        int row = jobMapper.updateById(job);\n        if (row > 0) updateSchedulerJob(job, temp.getJobGroup());\n    }\n\n    @SneakyThrows\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deleteJobs(List<Integer> tagIds) {\n        List<Job> jobs = jobMapper.selectList(new LambdaQueryWrapper<Job>().in(Job::getId, tagIds));\n        int row = jobMapper.delete(new LambdaQueryWrapper<Job>().in(Job::getId, tagIds));\n        if (row > 0) {\n            jobs.forEach(item -> {\n                try {\n                    scheduler.deleteJob(ScheduleUtil.getJobKey(item.getId(), item.getJobGroup()));\n                } catch (SchedulerException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n        }\n    }\n\n    @Override\n    public JobDTO getJobById(Integer jobId) {\n        Job job = jobMapper.selectById(jobId);\n        JobDTO jobDTO = BeanCopyUtil.copyObject(job, JobDTO.class);\n        Date nextExecution = CronUtil.getNextExecution(jobDTO.getCronExpression());\n        jobDTO.setNextValidTime(nextExecution);\n        return jobDTO;\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<JobDTO> listJobs(JobSearchVO jobSearchVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> jobMapper.countJobs(jobSearchVO));\n        List<JobDTO> jobDTOs = jobMapper.listJobs(PageUtil.getLimitCurrent(), PageUtil.getSize(), jobSearchVO);\n        return new PageResultDTO<>(jobDTOs, asyncCount.get());\n    }\n\n    @SneakyThrows\n    @Override\n    public void updateJobStatus(JobStatusVO jobStatusVO) {\n        Job job = jobMapper.selectById(jobStatusVO.getId());\n        if (job.getStatus().equals(jobStatusVO.getStatus())) {\n            return;\n        }\n        Integer status = jobStatusVO.getStatus();\n        Integer jobId = job.getId();\n        String jobGroup = job.getJobGroup();\n        LambdaUpdateWrapper<Job> updateWrapper = new LambdaUpdateWrapper<>();\n        updateWrapper.eq(Job::getId, jobStatusVO.getId()).set(Job::getStatus, status);\n        int row = jobMapper.update(null, updateWrapper);\n        if (row > 0) {\n            if (JobStatusEnum.NORMAL.getValue().equals(status)) {\n                scheduler.resumeJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n            } else if (JobStatusEnum.PAUSE.getValue().equals(status)) {\n                scheduler.pauseJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n            }\n        }\n    }\n\n    @SneakyThrows\n    @Override\n    public void runJob(JobRunVO jobRunVO) {\n        Integer jobId = jobRunVO.getId();\n        String jobGroup = jobRunVO.getJobGroup();\n        scheduler.triggerJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n    }\n\n    @Override\n    public List<String> listJobGroups() {\n        return jobMapper.listJobGroups();\n    }\n\n    private void checkCronIsValid(JobVO jobVO) {\n        boolean valid = CronUtil.isValid(jobVO.getCronExpression());\n        Assert.isTrue(valid, \"Cron表达式无效!\");\n    }\n\n    @SneakyThrows\n    public void updateSchedulerJob(Job job, String jobGroup) {\n        Integer jobId = job.getId();\n        JobKey jobKey = ScheduleUtil.getJobKey(jobId, jobGroup);\n        if (scheduler.checkExists(jobKey)) {\n            scheduler.deleteJob(jobKey);\n        }\n        ScheduleUtil.createScheduleJob(scheduler, job);\n    }\n\n}",
        "description": "JobServiceImpl是一个服务类，实现了JobService接口，其中包含了对定时任务的增删改查操作，通过Scheduler执行定时任务的调度，并对定时任务的状态进行管理。",
        "label": "JavaClass"
    },
    {
        "id": 750,
        "fullName": "com.aurora.service.impl.FriendLinkServiceImpl",
        "comment": "",
        "content": "@Service\npublic class FriendLinkServiceImpl extends ServiceImpl<FriendLinkMapper, FriendLink> implements FriendLinkService {\n\n    @Autowired\n    private FriendLinkMapper friendLinkMapper;\n\n    @Override\n    public List<FriendLinkDTO> listFriendLinks() {\n        List<FriendLink> friendLinks = friendLinkMapper.selectList(null);\n        return BeanCopyUtil.copyList(friendLinks, FriendLinkDTO.class);\n    }\n\n    @Override\n    public PageResultDTO<FriendLinkAdminDTO> listFriendLinksAdmin(ConditionVO conditionVO) {\n        Page<FriendLink> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<FriendLink> friendLinkPage = friendLinkMapper.selectPage(page, new LambdaQueryWrapper<FriendLink>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), FriendLink::getLinkName, conditionVO.getKeywords()));\n        List<FriendLinkAdminDTO> friendLinkBackDTOs = BeanCopyUtil.copyList(friendLinkPage.getRecords(), FriendLinkAdminDTO.class);\n        return new PageResultDTO<>(friendLinkBackDTOs, (int) friendLinkPage.getTotal());\n    }\n\n    @Override\n    public void saveOrUpdateFriendLink(FriendLinkVO friendLinkVO) {\n        FriendLink friendLink = BeanCopyUtil.copyObject(friendLinkVO, FriendLink.class);\n        this.saveOrUpdate(friendLink);\n    }\n\n}",
        "description": "This is a service class for managing friend links in a blog system, providing methods to list friend links, list friend links for admin, and save\/update friend links.",
        "label": "JavaClass"
    },
    {
        "id": 751,
        "fullName": "com.aurora.mapper.RoleResourceMapper",
        "comment": "",
        "content": "@Repository\npublic interface RoleResourceMapper extends BaseMapper<RoleResource> {\n\n}",
        "description": "这段代码定义了一个接口RoleResourceMapper，它继承自BaseMapper接口，用于操作角色资源的数据库操作。@Repository注解表示这是一个Spring管理的持久化接口。",
        "label": "JavaClass"
    },
    {
        "id": 752,
        "fullName": "com.aurora.model.dto.ResourceDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ResourceDTO {\n\n    private Integer id;\n\n    private String resourceName;\n\n    private String url;\n\n    private String requestMethod;\n\n    private Integer isDisable;\n\n    private Integer isAnonymous;\n\n    private LocalDateTime createTime;\n\n    private List<ResourceDTO> children;\n\n}",
        "description": "这段代码定义了一个ResourceDTO类，包括id、resourceName、url、requestMethod、isDisable、isAnonymous、createTime和children等属性。同时使用了@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 753,
        "fullName": "com.aurora.util.SpringUtil",
        "comment": "",
        "content": "@Component\n@SuppressWarnings(\"all\")\npublic class SpringUtil implements BeanFactoryPostProcessor, ApplicationContextAware {\n\n    private static ConfigurableListableBeanFactory beanFactory;\n\n    private static ApplicationContext applicationContext;\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        SpringUtil.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        SpringUtil.applicationContext = applicationContext;\n    }\n\n    public static <T> T getBean(String name) throws BeansException {\n        return (T) beanFactory.getBean(name);\n    }\n\n    public static <T> T getBean(Class<T> clz) throws BeansException {\n        return (T) beanFactory.getBean(clz);\n    }\n\n    public static boolean containsBean(String name) {\n        return beanFactory.containsBean(name);\n    }\n\n    public static boolean isSingleton(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.isSingleton(name);\n    }\n\n    public static Class<?> getType(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.getType(name);\n    }\n\n    public static String[] getAliases(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.getAliases(name);\n    }\n\n    public static <T> T getAopProxy(T invoker) {\n        return (T) AopContext.currentProxy();\n    }\n\n    public static String[] getActiveProfiles() {\n        return applicationContext.getEnvironment().getActiveProfiles();\n    }\n\n    public static String getActiveProfile() {\n        final String[] activeProfiles = getActiveProfiles();\n        return activeProfiles != null && activeProfiles.length > 0 ? activeProfiles[0] : null;\n    }\n}",
        "description": "这段代码定义了一个SpringUtil类，用于获取Spring容器中的Bean对象和活动的profile信息。通过实现BeanFactoryPostProcessor和ApplicationContextAware接口，可以在容器启动时获取到BeanFactory和ApplicationContext。提供了一系列静态方法用于获取Bean对象、检查Bean是否存在、获取Bean类型等操作，同时也提供了方法用于获取活动profile信息。",
        "label": "JavaClass"
    },
    {
        "id": 754,
        "fullName": "com.aurora.model.vo.WebsiteConfigVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"网站配置\")\npublic class WebsiteConfigVO {\n\n    @ApiModelProperty(name = \"name\", value = \"网站名称\", required = true, dataType = \"String\")\n    private String name;\n\n    @ApiModelProperty(name = \"nickName\", value = \"网站作者昵称\", required = true, dataType = \"String\")\n    private String englishName;\n\n    @ApiModelProperty(name = \"author\", value = \"网站作者\", required = true, dataType = \"String\")\n    private String author;\n\n    @ApiModelProperty(name = \"avatar\", value = \"网站头像\", required = true, dataType = \"String\")\n    private String authorAvatar;\n\n    @ApiModelProperty(name = \"description\", value = \"网站作者介绍\", required = true, dataType = \"String\")\n    private String authorIntro;\n\n    @ApiModelProperty(name = \"logo\", value = \"网站logo\", required = true, dataType = \"String\")\n    private String logo;\n\n    @ApiModelProperty(name = \"multiLanguage\", value = \"多语言\", required = true, dataType = \"Integer\")\n    private Integer multiLanguage;\n\n    @ApiModelProperty(name = \"notice\", value = \"网站公告\", required = true, dataType = \"String\")\n    private String notice;\n\n    @ApiModelProperty(name = \"websiteCreateTime\", value = \"网站创建时间\", required = true, dataType = \"LocalDateTime\")\n    private String websiteCreateTime;\n\n    @ApiModelProperty(name = \"beianNumber\", value = \"网站备案号\", required = true, dataType = \"String\")\n    private String beianNumber;\n\n    @ApiModelProperty(name = \"qqLogin\", value = \"QQ登录\", required = true, dataType = \"Integer\")\n    private Integer qqLogin;\n\n    @ApiModelProperty(name = \"github\", value = \"github\", required = true, dataType = \"String\")\n    private String github;\n\n    @ApiModelProperty(name = \"gitee\", value = \"gitee\", required = true, dataType = \"String\")\n    private String gitee;\n\n    @ApiModelProperty(name = \"qq\", value = \"qq\", required = true, dataType = \"String\")\n    private String qq;\n\n    @ApiModelProperty(name = \"weChat\", value = \"微信\", required = true, dataType = \"String\")\n    private String weChat;\n\n    @ApiModelProperty(name = \"weibo\", value = \"微博\", required = true, dataType = \"String\")\n    private String weibo;\n\n    @ApiModelProperty(name = \"csdn\", value = \"csdn\", required = true, dataType = \"String\")\n    private String csdn;\n\n    @ApiModelProperty(name = \"zhihu\", value = \"zhihu\", required = true, dataType = \"String\")\n    private String zhihu;\n\n    @ApiModelProperty(name = \"juejin\", value = \"juejin\", required = true, dataType = \"String\")\n    private String juejin;\n\n    @ApiModelProperty(name = \"twitter\", value = \"twitter\", required = true, dataType = \"String\")\n    private String twitter;\n\n    @ApiModelProperty(name = \"stackoverflow\", value = \"stackoverflow\", required = true, dataType = \"String\")\n    private String stackoverflow;\n\n    @ApiModelProperty(name = \"touristAvatar\", value = \"游客头像\", required = true, dataType = \"String\")\n    private String touristAvatar;\n\n    @ApiModelProperty(name = \"userAvatar\", value = \"用户头像\", required = true, dataType = \"String\")\n    private String userAvatar;\n\n    @ApiModelProperty(name = \"isCommentReview\", value = \"是否评论审核\", required = true, dataType = \"Integer\")\n    private Integer isCommentReview;\n\n    @ApiModelProperty(name = \"isEmailNotice\", value = \"是否邮箱通知\", required = true, dataType = \"Integer\")\n    private Integer isEmailNotice;\n\n    @ApiModelProperty(name = \"isReward\", value = \"是否打赏\", required = true, dataType = \"Integer\")\n    private Integer isReward;\n\n    @ApiModelProperty(name = \"weiXinQRCode\", value = \"微信二维码\", required = true, dataType = \"String\")\n    private String weiXinQRCode;\n\n    @ApiModelProperty(name = \"alipayQRCode\", value = \"支付宝二维码\", required = true, dataType = \"String\")\n    private String alipayQRCode;\n\n    @ApiModelProperty(name = \"favicon\", value = \"favicon\", required = true, dataType = \"String\")\n    private String favicon;\n\n    @ApiModelProperty(name = \"websiteTitle\", value = \"网页标题\", required = true, dataType = \"String\")\n    private String websiteTitle;\n\n    @ApiModelProperty(name = \"gonganBeianNumber\", value = \"公安部备案编号\", required = true, dataType = \"String\")\n    private String gonganBeianNumber;\n\n}",
        "description": "这段代码是一个名为WebsiteConfigVO的类，用于表示网站的配置信息。该类使用了Lombok注解，包括@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder。类中包含了多个字段，如网站名称、作者昵称、作者、网站头像等。每个字段都使用了@ApiModel注解进行描述，指定了字段的名称、值、是否必需、数据类型等信息。",
        "label": "JavaClass"
    },
    {
        "id": 755,
        "fullName": "com.aurora.util.ScheduleUtil",
        "comment": "",
        "content": "public class ScheduleUtil {\n\n    private static Class<? extends org.quartz.Job> getQuartzJobClass(Job job) {\n        boolean isConcurrent = Integer.valueOf(1).equals(job.getConcurrent());\n        return isConcurrent ? QuartzJobExecution.class : QuartzDisallowConcurrentExecution.class;\n    }\n\n    public static TriggerKey getTriggerKey(Integer jobId, String jobGroup) {\n        return TriggerKey.triggerKey(ScheduleConstant.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    public static JobKey getJobKey(Integer jobId, String jobGroup) {\n        return JobKey.jobKey(ScheduleConstant.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    public static void createScheduleJob(Scheduler scheduler, Job job) throws SchedulerException, TaskException {\n        Class<? extends org.quartz.Job> jobClass = getQuartzJobClass(job);\n        Integer jobId = job.getId();\n        String jobGroup = job.getJobGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getJobKey(jobId, jobGroup)).build();\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n        jobDetail.getJobDataMap().put(ScheduleConstant.TASK_PROPERTIES, job);\n        if (scheduler.checkExists(getJobKey(jobId, jobGroup))) {\n            scheduler.deleteJob(getJobKey(jobId, jobGroup));\n        }\n        scheduler.scheduleJob(jobDetail, trigger);\n        if (job.getStatus().equals(JobStatusEnum.PAUSE.getValue())) {\n            scheduler.pauseJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n        }\n    }\n\n    public static CronScheduleBuilder handleCronScheduleMisfirePolicy(Job job, CronScheduleBuilder cb)\n            throws TaskException {\n        switch (job.getMisfirePolicy()) {\n            case ScheduleConstant.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstant.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstant.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstant.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(\"The task misfire policy '\" + job.getMisfirePolicy()\n                        + \"' cannot be used in cron schedule tasks\", TaskException.Code.CONFIG_ERROR);\n        }\n    }\n}",
        "description": "这段代码是一个调度工具类，其中包含了创建调度任务、处理任务调度策略等方法。它通过Quartz框架来实现任务调度，并提供了设置任务触发器和任务键的方法。",
        "label": "JavaClass"
    },
    {
        "id": 756,
        "fullName": "com.aurora.model.vo.ConditionVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"查询条件\")\npublic class ConditionVO {\n\n    @ApiModelProperty(name = \"current\", value = \"页码\", dataType = \"Long\")\n    private Long current;\n\n    @ApiModelProperty(name = \"size\", value = \"条数\", dataType = \"Long\")\n    private Long size;\n\n    @ApiModelProperty(name = \"keywords\", value = \"搜索内容\", dataType = \"String\")\n    private String keywords;\n\n    @ApiModelProperty(name = \"categoryId\", value = \"分类id\", dataType = \"Integer\")\n    private Integer categoryId;\n\n    @ApiModelProperty(name = \"tagId\", value = \"标签id\", dataType = \"Integer\")\n    private Integer tagId;\n\n    @ApiModelProperty(name = \"albumId\", value = \"相册id\", dataType = \"Integer\")\n    private Integer albumId;\n\n    @ApiModelProperty(name = \"loginType\", value = \"登录类型\", dataType = \"Integer\")\n    private Integer loginType;\n\n    @ApiModelProperty(name = \"type\", value = \"类型\", dataType = \"Integer\")\n    private Integer type;\n\n    @ApiModelProperty(name = \"status\", value = \"状态\", dataType = \"Integer\")\n    private Integer status;\n\n    @ApiModelProperty(name = \"startTime\", value = \"开始时间\", dataType = \"LocalDateTime\")\n    private LocalDateTime startTime;\n\n    @ApiModelProperty(name = \"endTime\", value = \"结束时间\", dataType = \"LocalDateTime\")\n    private LocalDateTime endTime;\n\n    @ApiModelProperty(name = \"isDelete\", value = \"是否删除\", dataType = \"Integer\")\n    private Integer isDelete;\n\n    @ApiModelProperty(name = \"isReview\", value = \"是否审核\", dataType = \"Integer\")\n    private Integer isReview;\n\n    @ApiModelProperty(name = \"isTop\", value = \"是否置顶\", dataType = \"Integer\")\n    private Integer isTop;\n\n    @ApiModelProperty(name = \"isFeatured\", value = \"是否推荐\", dataType = \"Integer\")\n    private Integer isFeatured;\n\n\n}",
        "description": "这段代码定义了一个名为ConditionVO的数据类，用于表示查询条件，包括页码、条数、搜索内容、分类id、标签id、相册id、登录类型、类型、状态、开始时间、结束时间、是否删除、是否审核、是否置顶、是否推荐等属性。",
        "label": "JavaClass"
    },
    {
        "id": 757,
        "fullName": "com.aurora.model.dto.ArticleSearchDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@Document(indexName = \"article\")\npublic class ArticleSearchDTO {\n\n    @Id\n    private Integer id;\n\n    @Field(type = FieldType.Text, analyzer = \"ik_max_word\")\n    private String articleTitle;\n\n    @Field(type = FieldType.Text, analyzer = \"ik_max_word\")\n    private String articleContent;\n\n    @Field(type = FieldType.Integer)\n    private Integer isDelete;\n\n    @Field(type = FieldType.Integer)\n    private Integer status;\n\n}",
        "description": "这段代码定义了一个名为ArticleSearchDTO的数据传输对象，用于在博客系统中存储文章的信息，包括文章标题、内容、删除状态和状态。使用了Lombok的注解简化代码编写，并通过Elasticsearch的注解指定了文档索引名称为\"article\"。",
        "label": "JavaClass"
    },
    {
        "id": 758,
        "fullName": "com.aurora.util.JobInvokeUtil",
        "comment": "",
        "content": "public class JobInvokeUtil {\n\n    public static void invokeMethod(Job job) throws Exception {\n        String invokeTarget = job.getInvokeTarget();\n        String beanName = getBeanName(invokeTarget);\n        String methodName = getMethodName(invokeTarget);\n        List<Object[]> methodParams = getMethodParams(invokeTarget);\n\n        if (!isValidClassName(beanName)) {\n            Object bean = SpringUtil.getBean(beanName);\n            invokeMethod(bean, methodName, methodParams);\n        } else {\n            Object bean = Class.forName(beanName).newInstance();\n            invokeMethod(bean, methodName, methodParams);\n        }\n    }\n\n    private static void invokeMethod(Object bean, String methodName, List<Object[]> methodParams)\n            throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n            InvocationTargetException {\n        if (methodParams != null && methodParams.size() > 0) {\n            Method method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n            method.invoke(bean, getMethodParamsValue(methodParams));\n        } else {\n            Method method = bean.getClass().getDeclaredMethod(methodName);\n            method.invoke(bean);\n        }\n    }\n\n    public static boolean isValidClassName(String invokeTarget) {\n        return StringUtils.countMatches(invokeTarget, \".\") > 1;\n    }\n\n    public static String getBeanName(String invokeTarget) {\n        String beanName = StringUtils.substringBefore(invokeTarget, \"(\");\n        return StringUtils.substringBeforeLast(beanName, \".\");\n    }\n\n    public static String getMethodName(String invokeTarget) {\n        String methodName = StringUtils.substringBefore(invokeTarget, \"(\");\n        return StringUtils.substringAfterLast(methodName, \".\");\n    }\n\n    public static List<Object[]> getMethodParams(String invokeTarget) {\n        String methodStr = StringUtils.substringBetween(invokeTarget, \"(\", \")\");\n        if (StringUtils.isEmpty(methodStr)) {\n            return null;\n        }\n        String[] methodParams = methodStr.split(\",\");\n        List<Object[]> classes = new LinkedList<>();\n        for (String methodParam : methodParams) {\n            String str = StringUtils.trimToEmpty(methodParam);\n            if (StringUtils.contains(str, \"'\")) {\n                classes.add(new Object[]{StringUtils.replace(str, \"'\", \"\"), String.class});\n            } else if (StringUtils.equals(str, \"true\") || StringUtils.equalsIgnoreCase(str, \"false\")) {\n                classes.add(new Object[]{Boolean.valueOf(str), Boolean.class});\n            } else if (StringUtils.containsIgnoreCase(str, \"L\")) {\n                classes.add(new Object[]{Long.valueOf(StringUtils.replaceIgnoreCase(str, \"L\", \"\")), Long.class});\n            } else if (StringUtils.containsIgnoreCase(str, \"D\")) {\n                classes.add(new Object[]{Double.valueOf(StringUtils.replaceIgnoreCase(str, \"D\", \"\")), Double.class});\n            } else {\n                classes.add(new Object[]{Integer.valueOf(str), Integer.class});\n            }\n        }\n        return classes;\n    }\n\n    public static Class<?>[] getMethodParamsType(List<Object[]> methodParams) {\n        Class<?>[] classes = new Class<?>[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classes[index] = (Class<?>) os[1];\n            index++;\n        }\n        return classes;\n    }\n\n    public static Object[] getMethodParamsValue(List<Object[]> methodParams) {\n        Object[] classes = new Object[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classes[index] = os[0];\n            index++;\n        }\n        return classes;\n    }\n}",
        "description": "这段代码是一个包含了静态方法的工具类，用于调用指定对象的方法，根据传入的参数动态生成对象并调用对应的方法。其中包含了对方法参数类型的处理和转换。",
        "label": "JavaClass"
    },
    {
        "id": 759,
        "fullName": "com.aurora.entity.WebsiteConfig",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@TableName(value = \"t_website_config\")\npublic class WebsiteConfig {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String config;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为WebsiteConfig的实体类，用于映射数据库中的t_website_config表，包含id、config、createTime和updateTime等属性。使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解，以及MyBatis-Plus的@TableName和@TableId注解。createTime和updateTime属性使用了@TableField注解指定填充策略。",
        "label": "JavaClass"
    },
    {
        "id": 760,
        "fullName": "com.aurora.model.vo.MenuVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"菜单\")\npublic class MenuVO {\n\n    @ApiModelProperty(name = \"id\", value = \"菜单id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"菜单名不能为空\")\n    @ApiModelProperty(name = \"name\", value = \"菜单名\", dataType = \"String\")\n    private String name;\n\n    @NotBlank(message = \"菜单icon不能为空\")\n    @ApiModelProperty(name = \"icon\", value = \"菜单icon\", dataType = \"String\")\n    private String icon;\n\n    @NotBlank(message = \"路径不能为空\")\n    @ApiModelProperty(name = \"path\", value = \"路径\", dataType = \"String\")\n    private String path;\n\n    @NotBlank(message = \"组件不能为空\")\n    @ApiModelProperty(name = \"component\", value = \"组件\", dataType = \"String\")\n    private String component;\n\n    @NotNull(message = \"排序不能为空\")\n    @ApiModelProperty(name = \"orderNum\", value = \"排序\", dataType = \"Integer\")\n    private Integer orderNum;\n\n    @ApiModelProperty(name = \"parentId\", value = \"父id\", dataType = \"Integer\")\n    private Integer parentId;\n\n    @ApiModelProperty(name = \"isHidden\", value = \"是否隐藏\", dataType = \"Integer\")\n    private Integer isHidden;\n\n}",
        "description": "这段代码定义了一个名为MenuVO的Java类，用于表示菜单对象，包含菜单id、名称、图标、路径、组件、排序等属性。同时使用了Lombok的注解简化代码编写，以及Swagger的注解描述API信息。",
        "label": "JavaClass"
    },
    {
        "id": 761,
        "fullName": "com.aurora.strategy.impl.NormalArticleImportStrategyImpl",
        "comment": "",
        "content": "@Slf4j\n@Service(\"normalArticleImportStrategyImpl\")\npublic class NormalArticleImportStrategyImpl implements ArticleImportStrategy {\n    @Autowired\n    private ArticleService articleService;\n\n    @Override\n    public void importArticles(MultipartFile file) {\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\"\\\\.\")[0];\n        StringBuilder articleContent = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\n            while (reader.ready()) {\n                articleContent.append((char) reader.read());\n            }\n        } catch (IOException e) {\n            log.error(StrUtil.format(\"导入文章失败, 堆栈:{}\", ExceptionUtil.stacktraceToString(e)));\n            throw new BizException(\"导入文章失败\");\n        }\n        ArticleVO articleVO = ArticleVO.builder()\n                .articleTitle(articleTitle)\n                .articleContent(articleContent.toString())\n                .status(DRAFT.getStatus())\n                .build();\n        articleService.saveOrUpdateArticle(articleVO);\n    }\n}",
        "description": "这段代码是一个实现了文章导入策略接口的类，通过读取上传的文件，解析文章标题和内容，并保存为草稿状态的文章。在导入过程中，如果发生异常则记录日志并抛出业务异常。",
        "label": "JavaClass"
    },
    {
        "id": 762,
        "fullName": "com.aurora.exception.BizException",
        "comment": "",
        "content": "@Getter\n@AllArgsConstructor\npublic class BizException extends RuntimeException {\n\n    private Integer code = StatusCodeEnum.FAIL.getCode();\n\n    private final String message;\n\n    public BizException(String message) {\n        this.message = message;\n    }\n\n    public BizException(StatusCodeEnum statusCodeEnum) {\n        this.code = statusCodeEnum.getCode();\n        this.message = statusCodeEnum.getDesc();\n    }\n\n}",
        "description": "这段代码定义了一个名为BizException的异常类，用于表示业务异常，并包含code和message属性，通过构造函数可以传入不同的message或者使用枚举类StatusCodeEnum来设置code和message。@Getter注解用于生成属性的get方法，@AllArgsConstructor注解用于生成全参构造函数。",
        "label": "JavaClass"
    },
    {
        "id": 763,
        "fullName": "com.aurora.model.dto.ArticleStatisticsDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class ArticleStatisticsDTO {\n\n    private String date;\n\n    private Integer count;\n\n}",
        "description": "ArticleStatisticsDTO是一个数据传输对象（DTO），用于存储文章统计信息，包括日期和计数。该类使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 764,
        "fullName": "com.aurora.interceptor.AccessLimitInterceptor",
        "comment": "",
        "content": "@Log4j2\n@Component\n@SuppressWarnings(\"all\")\npublic class AccessLimitInterceptor implements HandlerInterceptor {\n\n    @Autowired\n    private RedisService redisService;\n\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler) throws Exception {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod handlerMethod = (HandlerMethod) handler;\n            AccessLimit accessLimit = handlerMethod.getMethodAnnotation(AccessLimit.class);\n            if (accessLimit != null) {\n                long seconds = accessLimit.seconds();\n                int maxCount = accessLimit.maxCount();\n                String key = IpUtil.getIpAddress(httpServletRequest) + \"-\" + handlerMethod.getMethod().getName();\n                try {\n                    long q = redisService.incrExpire(key, seconds);\n                    if (q > maxCount) {\n                        render(httpServletResponse, ResultVO.fail(\"请求过于频繁，\" + seconds + \"秒后再试\"));\n                        log.warn(key + \"请求次数超过每\" + seconds + \"秒\" + maxCount + \"次\");\n                        return false;\n                    }\n                    return true;\n                } catch (RedisConnectionFailureException e) {\n                    log.warn(\"redis错误: \" + e.getMessage());\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private void render(HttpServletResponse response, ResultVO<?> resultVO) throws Exception {\n        response.setContentType(APPLICATION_JSON);\n        OutputStream out = response.getOutputStream();\n        String str = JSON.toJSONString(resultVO);\n        out.write(str.getBytes(StandardCharsets.UTF_8));\n        out.flush();\n        out.close();\n    }\n\n}",
        "description": "这段代码是一个拦截器，用于限制用户访问频率。当用户请求超过设定的频率限制时，会返回错误信息并记录日志。",
        "label": "JavaClass"
    },
    {
        "id": 765,
        "fullName": "com.aurora.util.HTMLUtil",
        "comment": "",
        "content": "public class HTMLUtil {\n\n    \/\/ temporary unused\n    private static final SensitiveWordBs sensitiveWordBs = SensitiveWordBs.newInstance()\n            .ignoreCase(true)\n            .ignoreWidth(true)\n            .ignoreNumStyle(true)\n            .ignoreChineseStyle(true)\n            .ignoreEnglishStyle(true)\n            .ignoreRepeat(true)\n            .enableNumCheck(false)\n            .enableEmailCheck(false)\n            .enableUrlCheck(false)\n            .init();\n\n    public static String filter(String source) {\n        source = source.replaceAll(\"(?!<(img).*?>)<.*?>\", \"\")\n                .replaceAll(\"(onload(.*?)=)\", \"\")\n                .replaceAll(\"(onerror(.*?)=)\", \"\");\n        return deleteHMTLTag(source);\n    }\n\n    public static String deleteHMTLTag(String source) {\n        source = source.replaceAll(\"&.{2,6}?;\", \"\");\n        source = source.replaceAll(\"<[\\\\s]*?script[^>]*?>[\\\\s\\\\S]*?<[\\\\s]*?\\\\\/[\\\\s]*?script[\\\\s]*?>\", \"\");\n        source = source.replaceAll(\"<[\\\\s]*?style[^>]*?>[\\\\s\\\\S]*?<[\\\\s]*?\\\\\/[\\\\s]*?style[\\\\s]*?>\", \"\");\n        return source;\n    }\n\n}",
        "description": "一个用于过滤HTML内容中敏感词和标签的工具类。包含敏感词过滤和HTML标签删除功能。",
        "label": "JavaClass"
    },
    {
        "id": 766,
        "fullName": "com.aurora.controller.PhotoAlbumController",
        "comment": "",
        "content": "@Api(tags = \"相册模块\")\n@RestController\npublic class PhotoAlbumController {\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @Autowired\n    private PhotoAlbumService photoAlbumService;\n\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传相册封面\")\n    @ApiImplicitParam(name = \"file\", value = \"相册封面\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/photos\/albums\/upload\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或更新相册\")\n    @PostMapping(\"\/admin\/photos\/albums\")\n    public ResultVO<?> saveOrUpdatePhotoAlbum(@Valid @RequestBody PhotoAlbumVO photoAlbumVO) {\n        photoAlbumService.saveOrUpdatePhotoAlbum(photoAlbumVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"查看后台相册列表\")\n    @GetMapping(\"\/admin\/photos\/albums\")\n    public ResultVO<PageResultDTO<PhotoAlbumAdminDTO>> listPhotoAlbumBacks(ConditionVO conditionVO) {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbumsAdmin(conditionVO));\n    }\n\n    @ApiOperation(value = \"获取后台相册列表信息\")\n    @GetMapping(\"\/admin\/photos\/albums\/info\")\n    public ResultVO<List<PhotoAlbumDTO>> listPhotoAlbumBackInfos() {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbumInfosAdmin());\n    }\n\n    @ApiOperation(value = \"根据id获取后台相册信息\")\n    @ApiImplicitParam(name = \"albumId\", value = \"相册id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/photos\/albums\/{albumId}\/info\")\n    public ResultVO<PhotoAlbumAdminDTO> getPhotoAlbumBackById(@PathVariable(\"albumId\") Integer albumId) {\n        return ResultVO.ok(photoAlbumService.getPhotoAlbumByIdAdmin(albumId));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"根据id删除相册\")\n    @ApiImplicitParam(name = \"albumId\", value = \"相册id\", required = true, dataType = \"Integer\")\n    @DeleteMapping(\"\/admin\/photos\/albums\/{albumId}\")\n    public ResultVO<?> deletePhotoAlbumById(@PathVariable(\"albumId\") Integer albumId) {\n        photoAlbumService.deletePhotoAlbumById(albumId);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"获取相册列表\")\n    @GetMapping(\"\/photos\/albums\")\n    public ResultVO<List<PhotoAlbumDTO>> listPhotoAlbums() {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbums());\n    }\n\n}",
        "description": "这段代码是相册模块的后端控制器，包括上传相册封面、保存或更新相册、查看后台相册列表、获取后台相册列表信息、根据id获取后台相册信息、根据id删除相册和获取相册列表等功能。其中包含了使用不同操作类型的日志记录和对参数进行验证。",
        "label": "JavaClass"
    },
    {
        "id": 767,
        "fullName": "com.aurora.model.dto.ReplyDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ReplyDTO {\n\n    private Integer id;\n\n    private Integer parentId;\n\n    private Integer userId;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String webSite;\n\n    private Integer replyUserId;\n\n    private String replyNickname;\n\n    private String replyWebsite;\n\n    private String commentContent;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个包含回复信息的数据传输对象ReplyDTO，包括回复内容、用户信息和回复时间等属性。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 768,
        "fullName": "com.aurora.model.vo.PasswordVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"密码\")\npublic class PasswordVO {\n\n    @NotBlank(message = \"旧密码不能为空\")\n    @ApiModelProperty(name = \"oldPassword\", value = \"旧密码\", required = true, dataType = \"String\")\n    private String oldPassword;\n\n    @Size(min = 6, message = \"新密码不能少于6位\")\n    @NotBlank(message = \"新密码不能为空\")\n    @ApiModelProperty(name = \"newPassword\", value = \"新密码\", required = true, dataType = \"String\")\n    private String newPassword;\n}",
        "description": "这段代码定义了一个名为PasswordVO的类，用于表示密码的数据模型。该类使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解，以简化代码编写。类中包含了两个属性oldPassword和newPassword，分别表示旧密码和新密码。属性都添加了相关的注解，用于指定属性的校验规则和描述信息。",
        "label": "JavaClass"
    },
    {
        "id": 769,
        "fullName": "com.aurora.model.dto.ArticleDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArticleDTO {\n    private Integer id;\n\n    private UserInfo author;\n\n    private String categoryName;\n\n    private String articleCover;\n\n    private String articleTitle;\n\n    private String articleContent;\n\n    private Integer isTop;\n\n    private Integer isFeatured;\n\n    private Integer isDelete;\n\n    private Integer status;\n\n    private List<Tag> tags;\n\n    private Integer viewCount;\n\n    private Integer type;\n\n    private String originalUrl;\n\n    private LocalDateTime createTime;\n\n    private LocalDateTime updateTime;\n\n    private ArticleCardDTO preArticleCard;\n\n    private ArticleCardDTO nextArticleCard;\n\n}",
        "description": "这段代码定义了一个包含文章相关信息的数据传输对象（DTO），包括文章的id、作者信息、分类名、封面图、标题、内容等字段。同时还包括文章的置顶、特色、删除、状态等标识字段，以及标签列表、浏览量、类型、原始链接、创建时间、更新时间等属性。前一篇文章卡片和后一篇文章卡片也被包含在其中。",
        "label": "JavaClass"
    },
    {
        "id": 770,
        "fullName": "com.aurora.constant.CommonConstant",
        "comment": "",
        "content": "public interface CommonConstant {\n\n    int ONE = 1;\n\n    int ZERO = 0;\n\n    int FALSE = 0;\n\n    int TRUE = 1;\n\n    int BLOGGER_ID = 1;\n\n    int DEFAULT_CONFIG_ID = 1;\n\n    int DEFAULT_ABOUT_ID = 1;\n\n    String PRE_TAG = \"<mark>\";\n\n    String POST_TAG = \"<\/mark>\";\n\n    String CURRENT = \"current\";\n\n    String SIZE = \"size\";\n\n    String DEFAULT_SIZE = \"10\";\n\n    String DEFAULT_NICKNAME = \"用户\";\n\n    String COMPONENT = \"Layout\";\n\n    String UNKNOWN = \"未知\";\n\n    String APPLICATION_JSON = \"application\/json;charset=utf-8\";\n\n    String CAPTCHA = \"验证码\";\n\n    String CHECK_REMIND = \"审核提醒\";\n\n    String COMMENT_REMIND = \"评论提醒\";\n\n    String MENTION_REMIND = \"@提醒\";\n\n}",
        "description": "这段代码定义了一些常用的常量，包括数字常量、字符串常量和一些固定值的常量。",
        "label": "JavaClass"
    },
    {
        "id": 771,
        "fullName": "com.aurora.mapper.ArticleMapper",
        "comment": "",
        "content": "@Repository\npublic interface ArticleMapper extends BaseMapper<Article> {\n\n    List<ArticleCardDTO> listTopAndFeaturedArticles();\n\n    List<ArticleCardDTO> listArticles(@Param(\"current\") Long current, @Param(\"size\") Long size);\n\n    List<ArticleCardDTO> getArticlesByCategoryId(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"categoryId\") Integer categoryId);\n\n    ArticleDTO getArticleById(@Param(\"articleId\") Integer articleId);\n\n    ArticleCardDTO getPreArticleById(@Param(\"articleId\") Integer articleId);\n\n    ArticleCardDTO getNextArticleById(@Param(\"articleId\") Integer articleId);\n\n    ArticleCardDTO getFirstArticle();\n\n    ArticleCardDTO getLastArticle();\n\n    List<ArticleCardDTO> listArticlesByTagId(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"tagId\") Integer tagId);\n\n    List<ArticleCardDTO> listArchives(@Param(\"current\") Long current, @Param(\"size\") Long size);\n\n    Integer countArticleAdmins(@Param(\"conditionVO\") ConditionVO conditionVO);\n\n    List<ArticleAdminDTO> listArticlesAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);\n\n    List<ArticleStatisticsDTO> listArticleStatistics();\n\n}",
        "description": "这段代码定义了一个ArticleMapper接口，包含了对文章的各种操作方法，如获取置顶和精选文章、根据分类ID获取文章列表、根据标签ID获取文章列表等。同时还包括了一些管理端的方法，如统计文章数量、获取文章管理员列表等。",
        "label": "JavaClass"
    },
    {
        "id": 772,
        "fullName": "com.aurora.service.UserAuthService",
        "comment": "",
        "content": "public interface UserAuthService {\n\n    void sendCode(String username);\n\n    List<UserAreaDTO> listUserAreas(ConditionVO conditionVO);\n\n    void register(UserVO userVO);\n\n    void updatePassword(UserVO userVO);\n\n    void updateAdminPassword(PasswordVO passwordVO);\n\n    PageResultDTO<UserAdminDTO> listUsers(ConditionVO condition);\n\n    UserLogoutStatusDTO logout();\n\n    UserInfoDTO qqLogin(QQLoginVO qqLoginVO);\n\n}",
        "description": "This code defines an interface for user authentication and management operations in a blog system, including sending verification codes, listing user areas, registering users, updating passwords, listing users, logging out users, and implementing QQ login functionality.",
        "label": "JavaClass"
    },
    {
        "id": 773,
        "fullName": "com.aurora.controller.ArticleController",
        "comment": "",
        "content": "@Api(tags = \"文章模块\")\n@RestController\npublic class ArticleController {\n\n    @Autowired\n    private ArticleService articleService;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n    @Autowired\n    private ArticleImportStrategyContext articleImportStrategyContext;\n\n    @ApiOperation(\"获取置顶和推荐文章\")\n    @GetMapping(\"\/articles\/topAndFeatured\")\n    public ResultVO<TopAndFeaturedArticlesDTO> listTopAndFeaturedArticles() {\n        return ResultVO.ok(articleService.listTopAndFeaturedArticles());\n    }\n\n    @ApiOperation(\"获取所有文章\")\n    @GetMapping(\"\/articles\/all\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> listArticles() {\n        return ResultVO.ok(articleService.listArticles());\n    }\n\n    @ApiOperation(\"根据分类id获取文章\")\n    @GetMapping(\"\/articles\/categoryId\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> getArticlesByCategoryId(@RequestParam Integer categoryId) {\n        return ResultVO.ok(articleService.listArticlesByCategoryId(categoryId));\n    }\n\n    @ApiOperation(\"根据id获取文章\")\n    @GetMapping(\"\/articles\/{articleId}\")\n    public ResultVO<ArticleDTO> getArticleById(@PathVariable(\"articleId\") Integer articleId) {\n        return ResultVO.ok(articleService.getArticleById(articleId));\n    }\n\n    @ApiOperation(\"校验文章访问密码\")\n    @PostMapping(\"\/articles\/access\")\n    public ResultVO<?> accessArticle(@Valid @RequestBody ArticlePasswordVO articlePasswordVO) {\n        articleService.accessArticle(articlePasswordVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"根据标签id获取文章\")\n    @GetMapping(\"\/articles\/tagId\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> listArticlesByTagId(@RequestParam Integer tagId) {\n        return ResultVO.ok(articleService.listArticlesByTagId(tagId));\n    }\n\n    @ApiOperation(\"获取所有文章归档\")\n    @GetMapping(\"\/archives\/all\")\n    public ResultVO<PageResultDTO<ArchiveDTO>> listArchives() {\n        return ResultVO.ok(articleService.listArchives());\n    }\n\n    @ApiOperation(\"获取后台文章\")\n    @GetMapping(\"\/admin\/articles\")\n    public ResultVO<PageResultDTO<ArticleAdminDTO>> listArticlesAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(articleService.listArticlesAdmin(conditionVO));\n    }\n\n    @OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(\"保存和修改文章\")\n    @PostMapping(\"\/admin\/articles\")\n    public ResultVO<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\n        articleService.saveOrUpdateArticle(articleVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(\"修改文章是否置顶和推荐\")\n    @PutMapping(\"\/admin\/articles\/topAndFeatured\")\n    public ResultVO<?> updateArticleTopAndFeatured(@Valid @RequestBody ArticleTopFeaturedVO articleTopFeaturedVO) {\n        articleService.updateArticleTopAndFeatured(articleTopFeaturedVO);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(\"删除或者恢复文章\")\n    @PutMapping(\"\/admin\/articles\")\n    public ResultVO<?> updateArticleDelete(@Valid @RequestBody DeleteVO deleteVO) {\n        articleService.updateArticleDelete(deleteVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"物理删除文章\")\n    @DeleteMapping(\"\/admin\/articles\/delete\")\n    public ResultVO<?> deleteArticles(@RequestBody List<Integer> articleIds) {\n        articleService.deleteArticles(articleIds);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(\"上传文章图片\")\n    @ApiImplicitParam(name = \"file\", value = \"文章图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/articles\/images\")\n    public ResultVO<String> saveArticleImages(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\n    }\n\n    @ApiOperation(\"根据id查看后台文章\")\n    @ApiImplicitParam(name = \"articleId\", value = \"文章id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/articles\/{articleId}\")\n    public ResultVO<ArticleAdminViewDTO> getArticleBackById(@PathVariable(\"articleId\") Integer articleId) {\n        return ResultVO.ok(articleService.getArticleByIdAdmin(articleId));\n    }\n\n    @OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"导入文章\")\n    @PostMapping(\"\/admin\/articles\/import\")\n    public ResultVO<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\n        articleImportStrategyContext.importArticles(file, type);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = EXPORT)\n    @ApiOperation(value = \"导出文章\")\n    @ApiImplicitParam(name = \"articleIdList\", value = \"文章id\", required = true, dataType = \"List<Integer>\")\n    @PostMapping(\"\/admin\/articles\/export\")\n    public ResultVO<List<String>> exportArticles(@RequestBody List<Integer> articleIds) {\n        return ResultVO.ok(articleService.exportArticles(articleIds));\n    }\n\n    @ApiOperation(value = \"搜索文章\")\n    @GetMapping(\"\/articles\/search\")\n    public ResultVO<List<ArticleSearchDTO>> listArticlesBySearch(ConditionVO condition) {\n        return ResultVO.ok(articleService.listArticlesBySearch(condition));\n    }\n\n}",
        "description": "这段代码是一个文章模块的控制器，包含了获取置顶和推荐文章、获取所有文章、根据分类id获取文章、根据id获取文章等功能的接口。同时还包括了保存、修改、删除文章以及上传、导入、导出文章等管理后台功能的接口。",
        "label": "JavaClass"
    },
    {
        "id": 774,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl",
        "comment": "",
        "content": "@Service\npublic class UserInfoServiceImpl extends ServiceImpl<UserInfoMapper, UserInfo> implements UserInfoService {\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private UserRoleService userRoleService;\n\n    @Autowired\n    private UploadStrategyContext uploadStrategyContext;\n\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserInfo(UserInfoVO userInfoVO) {\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .nickname(userInfoVO.getNickname())\n                .intro(userInfoVO.getIntro())\n                .website(userInfoVO.getWebsite())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }\n\n    @Override\n    public String updateUserAvatar(MultipartFile file) {\n        String avatar = uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.AVATAR.getPath());\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .avatar(avatar)\n                .build();\n        userInfoMapper.updateById(userInfo);\n        return avatar;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveUserEmail(EmailVO emailVO) {\n        if (Objects.isNull(redisService.get(USER_CODE_KEY + emailVO.getEmail()))) {\n            throw new BizException(\"验证码错误\");\n        }\n        if (!emailVO.getCode().equals(redisService.get(USER_CODE_KEY + emailVO.getEmail()).toString())) {\n            throw new BizException(\"验证码错误！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .email(emailVO.getEmail())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserSubscribe(SubscribeVO subscribeVO) {\n        UserInfo temp = userInfoMapper.selectOne(new LambdaQueryWrapper<UserInfo>().eq(UserInfo::getId, subscribeVO.getUserId()));\n        if (StringUtils.isEmpty(temp.getEmail())) {\n            throw new BizException(\"邮箱未绑定！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .id(subscribeVO.getUserId())\n                .isSubscribe(subscribeVO.getIsSubscribe())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserRole(UserRoleVO userRoleVO) {\n        UserInfo userInfo = UserInfo.builder()\n                .id(userRoleVO.getUserInfoId())\n                .nickname(userRoleVO.getNickname())\n                .build();\n        userInfoMapper.updateById(userInfo);\n        userRoleService.remove(new LambdaQueryWrapper<UserRole>()\n                .eq(UserRole::getUserId, userRoleVO.getUserInfoId()));\n        List<UserRole> userRoleList = userRoleVO.getRoleIds().stream()\n                .map(roleId -> UserRole.builder()\n                        .roleId(roleId)\n                        .userId(userRoleVO.getUserInfoId())\n                        .build())\n                .collect(Collectors.toList());\n        userRoleService.saveBatch(userRoleList);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserDisable(UserDisableVO userDisableVO) {\n        removeOnlineUser(userDisableVO.getId());\n        UserInfo userInfo = UserInfo.builder()\n                .id(userDisableVO.getId())\n                .isDisable(userDisableVO.getIsDisable())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }\n\n    @Override\n    public PageResultDTO<UserOnlineDTO> listOnlineUsers(ConditionVO conditionVO) {\n        Map<String, Object> userMaps = redisService.hGetAll(\"login_user\");\n        Collection<Object> values = userMaps.values();\n        ArrayList<UserDetailsDTO> userDetailsDTOs = new ArrayList<>();\n        for (Object value : values) {\n            userDetailsDTOs.add((UserDetailsDTO) value);\n        }\n        List<UserOnlineDTO> userOnlineDTOs = BeanCopyUtil.copyList(userDetailsDTOs, UserOnlineDTO.class);\n        List<UserOnlineDTO> onlineUsers = userOnlineDTOs.stream()\n                .filter(item -> StringUtils.isBlank(conditionVO.getKeywords()) || item.getNickname().contains(conditionVO.getKeywords()))\n                .sorted(Comparator.comparing(UserOnlineDTO::getLastLoginTime).reversed())\n                .collect(Collectors.toList());\n        int fromIndex = getLimitCurrent().intValue();\n        int size = getSize().intValue();\n        int toIndex = onlineUsers.size() - fromIndex > size ? fromIndex + size : onlineUsers.size();\n        List<UserOnlineDTO> userOnlineList = onlineUsers.subList(fromIndex, toIndex);\n        return new PageResultDTO<>(userOnlineList, onlineUsers.size());\n    }\n\n    @Override\n    public void removeOnlineUser(Integer userInfoId) {\n        Integer userId = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>().eq(UserAuth::getUserInfoId, userInfoId)).getId();\n        tokenService.delLoginUser(userId);\n    }\n\n    @Override\n    public UserInfoDTO getUserInfoById(Integer id) {\n        UserInfo userInfo = userInfoMapper.selectById(id);\n        return BeanCopyUtil.copyObject(userInfo, UserInfoDTO.class);\n    }\n\n}",
        "description": "这段代码是一个用户信息服务类，包含了更新用户信息、更新用户头像、保存用户邮箱、更新用户订阅、更新用户角色、更新用户禁用状态等功能的实现。同时还包括了列出在线用户和移除在线用户的方法。",
        "label": "JavaClass"
    },
    {
        "id": 775,
        "fullName": "com.aurora.service.impl.TagServiceImpl",
        "comment": "",
        "content": "@Service\npublic class TagServiceImpl extends ServiceImpl<TagMapper, Tag> implements TagService {\n\n    @Autowired\n    private TagMapper tagMapper;\n\n    @Autowired\n    private ArticleTagMapper articleTagMapper;\n\n    @Override\n    public List<TagDTO> listTags() {\n        return tagMapper.listTags();\n    }\n\n    @Override\n    public List<TagDTO> listTopTenTags() {\n        return tagMapper.listTopTenTags();\n    }\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<TagAdminDTO> listTagsAdmin(ConditionVO conditionVO) {\n        Integer count = tagMapper.selectCount(new LambdaQueryWrapper<Tag>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Tag::getTagName, conditionVO.getKeywords()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TagAdminDTO> tags = tagMapper.listTagsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(tags, count);\n    }\n\n    @SneakyThrows\n    @Override\n    public List<TagAdminDTO> listTagsAdminBySearch(ConditionVO conditionVO) {\n        List<Tag> tags = tagMapper.selectList(new LambdaQueryWrapper<Tag>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Tag::getTagName, conditionVO.getKeywords())\n                .orderByDesc(Tag::getId));\n        return BeanCopyUtil.copyList(tags, TagAdminDTO.class);\n    }\n\n    @Override\n    public void saveOrUpdateTag(TagVO tagVO) {\n        Tag existTag = tagMapper.selectOne(new LambdaQueryWrapper<Tag>()\n                .select(Tag::getId)\n                .eq(Tag::getTagName, tagVO.getTagName()));\n        if (Objects.nonNull(existTag) && !existTag.getId().equals(tagVO.getId())) {\n            throw new BizException(\"标签名已存在\");\n        }\n        Tag tag = BeanCopyUtil.copyObject(tagVO, Tag.class);\n        this.saveOrUpdate(tag);\n    }\n\n    @Override\n    public void deleteTag(List<Integer> tagIds) {\n        Integer count = articleTagMapper.selectCount(new LambdaQueryWrapper<ArticleTag>()\n                .in(ArticleTag::getTagId, tagIds));\n        if (count > 0) {\n            throw new BizException(\"删除失败，该标签下存在文章\");\n        }\n        tagMapper.deleteBatchIds(tagIds);\n    }\n\n}",
        "description": "该代码是一个标签服务的实现类，包含了标签的增删改查功能，以及对标签进行管理员操作的方法。其中包括获取标签列表、获取前十个标签、根据条件获取管理员标签列表、根据关键字搜索标签、保存或更新标签、删除标签等功能。",
        "label": "JavaClass"
    },
    {
        "id": 776,
        "fullName": "com.aurora.model.vo.UserDisableVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"用户禁用状态\")\npublic class UserDisableVO {\n\n    @NotNull(message = \"用户id不能为空\")\n    private Integer id;\n\n    @NotNull(message = \"用户禁用状态不能为空\")\n    private Integer isDisable;\n\n}",
        "description": "UserDisableVO是一个用于表示用户禁用状态的Java类，包含用户id和禁用状态两个属性。",
        "label": "JavaClass"
    },
    {
        "id": 777,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl",
        "comment": "",
        "content": "@Service\npublic class PhotoServiceImpl extends ServiceImpl<PhotoMapper, Photo> implements PhotoService {\n\n    @Autowired\n    private PhotoMapper photoMapper;\n\n    @Autowired\n    private PhotoAlbumService photoAlbumService;\n\n    @Override\n    public PageResultDTO<PhotoAdminDTO> listPhotos(ConditionVO conditionVO) {\n        Page<Photo> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<Photo> photoPage = photoMapper.selectPage(page, new LambdaQueryWrapper<Photo>()\n                .eq(Objects.nonNull(conditionVO.getAlbumId()), Photo::getAlbumId, conditionVO.getAlbumId())\n                .eq(Photo::getIsDelete, conditionVO.getIsDelete())\n                .orderByDesc(Photo::getId)\n                .orderByDesc(Photo::getUpdateTime));\n        List<PhotoAdminDTO> photos = BeanCopyUtil.copyList(photoPage.getRecords(), PhotoAdminDTO.class);\n        return new PageResultDTO<>(photos, (int) photoPage.getTotal());\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhoto(PhotoInfoVO photoInfoVO) {\n        Photo photo = BeanCopyUtil.copyObject(photoInfoVO, Photo.class);\n        photoMapper.updateById(photo);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void savePhotos(PhotoVO photoVO) {\n        List<Photo> photoList = photoVO.getPhotoUrls().stream().map(item -> Photo.builder()\n                        .albumId(photoVO.getAlbumId())\n                        .photoName(IdWorker.getIdStr())\n                        .photoSrc(item)\n                        .build())\n                .collect(Collectors.toList());\n        this.saveBatch(photoList);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhotosAlbum(PhotoVO photoVO) {\n        List<Photo> photoList = photoVO.getPhotoIds().stream().map(item -> Photo.builder()\n                        .id(item)\n                        .albumId(photoVO.getAlbumId())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(photoList);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhotoDelete(DeleteVO deleteVO) {\n        List<Photo> photoList = deleteVO.getIds().stream().map(item -> Photo.builder()\n                        .id(item)\n                        .isDelete(deleteVO.getIsDelete())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(photoList);\n        if (deleteVO.getIsDelete().equals(FALSE)) {\n            List<PhotoAlbum> photoAlbumList = photoMapper.selectList(new LambdaQueryWrapper<Photo>()\n                            .select(Photo::getAlbumId)\n                            .in(Photo::getId, deleteVO.getIds())\n                            .groupBy(Photo::getAlbumId))\n                    .stream()\n                    .map(item -> PhotoAlbum.builder()\n                            .id(item.getAlbumId())\n                            .isDelete(FALSE)\n                            .build())\n                    .collect(Collectors.toList());\n            photoAlbumService.updateBatchById(photoAlbumList);\n        }\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void deletePhotos(List<Integer> photoIds) {\n        photoMapper.deleteBatchIds(photoIds);\n    }\n\n    @Override\n    public PhotoDTO listPhotosByAlbumId(Integer albumId) {\n        PhotoAlbum photoAlbum = photoAlbumService.getOne(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getId, albumId)\n                .eq(PhotoAlbum::getIsDelete, FALSE)\n                .eq(PhotoAlbum::getStatus, PUBLIC.getStatus()));\n        if (Objects.isNull(photoAlbum)) {\n            throw new BizException(\"相册不存在\");\n        }\n        Page<Photo> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        List<String> photos = photoMapper.selectPage(page, new LambdaQueryWrapper<Photo>()\n                        .select(Photo::getPhotoSrc)\n                        .eq(Photo::getAlbumId, albumId)\n                        .eq(Photo::getIsDelete, FALSE)\n                        .orderByDesc(Photo::getId))\n                .getRecords()\n                .stream()\n                .map(Photo::getPhotoSrc)\n                .collect(Collectors.toList());\n        return PhotoDTO.builder()\n                .photoAlbumCover(photoAlbum.getAlbumCover())\n                .photoAlbumName(photoAlbum.getAlbumName())\n                .photos(photos)\n                .build();\n    }\n\n}",
        "description": "PhotoServiceImpl是一个服务类，实现了PhotoService接口，包含了对照片的增删改查等操作，并且涉及到事务处理。",
        "label": "JavaClass"
    },
    {
        "id": 778,
        "fullName": "com.aurora.handler.MyMetaObjectHandler",
        "comment": "",
        "content": "@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info(\"start insert fill ....\");\n        this.strictInsertFill(metaObject, \"createTime\", LocalDateTime.class, LocalDateTime.now());\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info(\"start update fill ....\");\n        this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now());\n    }\n}",
        "description": "这段代码是一个用于填充实体类中时间字段的MetaObjectHandler类，实现了insertFill和updateFill方法来自动填充createTime和updateTime字段为当前时间。通过@Slf4j注解实现日志记录。",
        "label": "JavaClass"
    },
    {
        "id": 779,
        "fullName": "com.aurora.model.dto.UserMenuDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserMenuDTO {\n\n    private String name;\n\n    private String path;\n\n    private String component;\n\n    private String icon;\n\n    private Boolean hidden;\n\n    private List<UserMenuDTO> children;\n\n}",
        "description": "这段代码定义了一个用户菜单数据传输对象（DTO），包括菜单名称、路径、组件、图标、是否隐藏以及子菜单列表。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 780,
        "fullName": "com.aurora.service.impl.RoleMenuServiceImpl",
        "comment": "",
        "content": "@Service\npublic class RoleMenuServiceImpl extends ServiceImpl<RoleMenuMapper, RoleMenu> implements RoleMenuService {\n\n}",
        "description": "这段代码是一个服务类，实现了RoleMenuService接口，并继承了ServiceImpl类，用于处理角色菜单相关的业务逻辑。",
        "label": "JavaClass"
    },
    {
        "id": 781,
        "fullName": "com.aurora.mapper.ArticleTagMapper",
        "comment": "",
        "content": "@Repository\npublic interface ArticleTagMapper extends BaseMapper<ArticleTag> {\n\n}",
        "description": "这段代码是一个ArticleTagMapper接口，用于与数据库中的ArticleTag实体进行交互。",
        "label": "JavaClass"
    },
    {
        "id": 782,
        "fullName": "com.aurora.model.vo.TalkVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"说说对象\")\npublic class TalkVO {\n\n    @ApiModelProperty(name = \"id\", value = \"说说id\", dataType = \"Integer\")\n    private Integer id;\n\n    @ApiModelProperty(name = \"content\", value = \"说说内容\", dataType = \"String\")\n    @NotBlank(message = \"说说内容不能为空\")\n    private String content;\n\n    @ApiModelProperty(name = \"images\", value = \"说说图片\", dataType = \"String\")\n    private String images;\n\n    @ApiModelProperty(name = \"isTop\", value = \"置顶状态\", dataType = \"Integer\")\n    @NotNull(message = \"置顶状态不能为空\")\n    private Integer isTop;\n\n    @ApiModelProperty(name = \"status\", value = \"说说状态\", dataType = \"Integer\")\n    @NotNull(message = \"说说状态不能为空\")\n    private Integer status;\n\n}",
        "description": "一个用于描述说说对象的数据模型，包括id、内容、图片、置顶状态和状态等属性。",
        "label": "JavaClass"
    },
    {
        "id": 783,
        "fullName": "com.aurora.model.dto.FriendLinkDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FriendLinkDTO {\n\n    private Integer id;\n\n    private String linkName;\n\n    private String linkAvatar;\n\n    private String linkAddress;\n\n    private String linkIntro;\n\n}",
        "description": "FriendLinkDTO is a data transfer object class representing a friend link with id, name, avatar, address, and introduction. It is equipped with Lombok annotations for data generation.",
        "label": "JavaClass"
    },
    {
        "id": 784,
        "fullName": "com.aurora.model.dto.TalkDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class TalkDTO {\n\n    private Integer id;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String content;\n\n    private String images;\n\n    private List<String> imgs;\n\n    private Integer isTop;\n\n    private Integer commentCount;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个TalkDTO类，包含了与博客相关的字段，如id、昵称、头像、内容、图片、图片列表、是否置顶、评论数、创建时间。同时使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor、@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 785,
        "fullName": "com.aurora.quartz.AuroraQuartz",
        "comment": "",
        "content": "@Slf4j\n@Component(\"auroraQuartz\")\npublic class AuroraQuartz {\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private ArticleService articleService;\n\n    @Autowired\n    private JobLogService jobLogService;\n\n    @Autowired\n    private ResourceService resourceService;\n\n    @Autowired\n    private RoleResourceService roleResourceService;\n\n    @Autowired\n    private UniqueViewMapper uniqueViewMapper;\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Autowired\n    private ElasticsearchMapper elasticsearchMapper;\n\n\n    @Value(\"${website.url}\")\n    private String websiteUrl;\n\n    public void saveUniqueView() {\n        Long count = redisService.sSize(UNIQUE_VISITOR);\n        UniqueView uniqueView = UniqueView.builder()\n                .createTime(LocalDateTimeUtil.offset(LocalDateTime.now(), -1, ChronoUnit.DAYS))\n                .viewsCount(Optional.of(count.intValue()).orElse(0))\n                .build();\n        uniqueViewMapper.insert(uniqueView);\n    }\n\n    public void clear() {\n        redisService.del(UNIQUE_VISITOR);\n        redisService.del(VISITOR_AREA);\n    }\n\n    public void statisticalUserArea() {\n        Map<String, Long> userAreaMap = userAuthMapper.selectList(new LambdaQueryWrapper<UserAuth>().select(UserAuth::getIpSource))\n                .stream()\n                .map(item -> {\n                    if (Objects.nonNull(item) && StringUtils.isNotBlank(item.getIpSource())) {\n                        return IpUtil.getIpProvince(item.getIpSource());\n                    }\n                    return UNKNOWN;\n                })\n                .collect(Collectors.groupingBy(item -> item, Collectors.counting()));\n        List<UserAreaDTO> userAreaList = userAreaMap.entrySet().stream()\n                .map(item -> UserAreaDTO.builder()\n                        .name(item.getKey())\n                        .value(item.getValue())\n                        .build())\n                .collect(Collectors.toList());\n        redisService.set(USER_AREA, JSON.toJSONString(userAreaList));\n    }\n\n    public void baiduSeo() {\n        List<Integer> ids = articleService.list().stream().map(Article::getId).collect(Collectors.toList());\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Host\", \"data.zz.baidu.com\");\n        headers.add(\"User-Agent\", \"curl\/7.12.1\");\n        headers.add(\"Content-Length\", \"83\");\n        headers.add(\"Content-Type\", \"text\/plain\");\n        ids.forEach(item -> {\n            String url = websiteUrl + \"\/articles\/\" + item;\n            HttpEntity<String> entity = new HttpEntity<>(url, headers);\n            restTemplate.postForObject(\"https:\/\/www.baidu.com\", entity, String.class);\n        });\n    }\n\n    public void clearJobLogs() {\n        jobLogService.cleanJobLogs();\n    }\n\n    public void importSwagger() {\n        resourceService.importSwagger();\n        List<Integer> resourceIds = resourceService.list().stream().map(Resource::getId).collect(Collectors.toList());\n        List<RoleResource> roleResources = new ArrayList<>();\n        for (Integer resourceId : resourceIds) {\n            roleResources.add(RoleResource.builder()\n                    .roleId(1)\n                    .resourceId(resourceId)\n                    .build());\n        }\n        roleResourceService.saveBatch(roleResources);\n    }\n\n    public void importDataIntoES() {\n        elasticsearchMapper.deleteAll();\n        List<Article> articles = articleService.list();\n        for (Article article : articles) {\n            elasticsearchMapper.save(BeanCopyUtil.copyObject(article, ArticleSearchDTO.class));\n        }\n    }\n}",
        "description": "AuroraQuartz class in the blog system's backend code handles unique view tracking, user area statistics, search engine optimization, job log management, Swagger import, and data import into Elasticsearch. It also interacts with services like Redis, Article, JobLog, Resource, UserAuth, and Elasticsearch.",
        "label": "JavaClass"
    },
    {
        "id": 786,
        "fullName": "com.aurora.entity.Article",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_article\")\npublic class Article {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private Integer categoryId;\n\n    private String articleCover;\n\n    private String articleTitle;\n\n    private String articleAbstract;\n\n    private String articleContent;\n\n    private Integer isTop;\n\n    private Integer isFeatured;\n\n    private Integer isDelete;\n\n    private Integer status;\n\n    private Integer type;\n\n    private String password;\n\n    private String originalUrl;\n\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n\n    @TableField(fill = FieldFill.UPDATE)\n    private LocalDateTime updateTime;\n\n}",
        "description": "这段代码定义了一个名为Article的Java类，用于表示博客系统中的文章信息，并包含了各种属性和注解。",
        "label": "JavaClass"
    },
    {
        "id": 787,
        "fullName": "com.aurora.model.vo.SubscribeVO",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SubscribeVO {\n\n    private Integer userId;\n\n    private Integer isSubscribe;\n}",
        "description": "SubscribeVO是一个具有userId和isSubscribe属性的数据对象类，使用了Lombok的@Data、@Builder、@NoArgsConstructor和@AllArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 788,
        "fullName": "com.aurora.service.impl.ArticleTagServiceImpl",
        "comment": "",
        "content": "@Service\npublic class ArticleTagServiceImpl extends ServiceImpl<ArticleTagMapper, ArticleTag> implements ArticleTagService {\n\n}",
        "description": "这段代码是一个实现了ArticleTagService接口的ArticleTagServiceImpl类，负责处理博客系统中文章标签的业务逻辑。",
        "label": "JavaClass"
    },
    {
        "id": 789,
        "fullName": "com.aurora.constant.RabbitMQConstant",
        "comment": "",
        "content": "public interface RabbitMQConstant {\n\n    String MAXWELL_QUEUE = \"maxwell_queue\";\n\n    String MAXWELL_EXCHANGE = \"maxwell_exchange\";\n\n    String EMAIL_QUEUE = \"email_queue\";\n\n    String EMAIL_EXCHANGE = \"email_exchange\";\n\n    String SUBSCRIBE_QUEUE = \"subscribe_queue\";\n\n    String SUBSCRIBE_EXCHANGE = \"subscribe_exchange\";\n\n}",
        "description": "This interface defines constants for RabbitMQ queue and exchange names related to a blog system.",
        "label": "JavaClass"
    },
    {
        "id": 790,
        "fullName": "com.aurora.config.GlobalZoneConfig",
        "comment": "",
        "content": "@Configuration\npublic class GlobalZoneConfig {\n\n    @PostConstruct\n    public void setGlobalZone() {\n        TimeZone.setDefault(TimeZone.getTimeZone(SHANGHAI.getZone()));\n    }\n\n}",
        "description": "该代码是一个全局时区配置类，通过在应用程序启动时将默认时区设置为上海时区。",
        "label": "JavaClass"
    },
    {
        "id": 791,
        "fullName": "com.aurora.controller.ExceptionLogController",
        "comment": "",
        "content": "@Api(tags = \"异常日志模块\")\n@RestController\npublic class ExceptionLogController {\n\n    @Autowired\n    private ExceptionLogService exceptionLogService;\n\n    @ApiOperation(\"获取异常日志\")\n    @GetMapping(\"\/admin\/exception\/logs\")\n    public ResultVO<PageResultDTO<ExceptionLogDTO>> listExceptionLogs(ConditionVO conditionVO) {\n        return ResultVO.ok(exceptionLogService.listExceptionLogs(conditionVO));\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除异常日志\")\n    @DeleteMapping(\"\/admin\/exception\/logs\")\n    public ResultVO<?> deleteExceptionLogs(@RequestBody List<Integer> exceptionLogIds) {\n        exceptionLogService.removeByIds(exceptionLogIds);\n        return ResultVO.ok();\n    }\n\n}",
        "description": "这段代码是一个异常日志模块的后端控制器，包括获取异常日志和删除异常日志的功能。",
        "label": "JavaClass"
    },
    {
        "id": 792,
        "fullName": "com.aurora.entity.ArticleTag",
        "comment": "",
        "content": "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_article_tag\")\npublic class ArticleTag {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private Integer articleId;\n\n    private Integer tagId;\n\n}",
        "description": "这段代码定义了一个名为ArticleTag的实体类，用于表示文章和标签的关联关系，并且使用了Lombok的@Data、@Builder、@NoArgsConstructor、@AllArgsConstructor注解来简化代码编写。@TableId注解指定了id字段作为主键，并且自增。@TableNam注解指定了对应数据库表名为\"t_article_tag\"。",
        "label": "JavaClass"
    },
    {
        "id": 793,
        "fullName": "com.aurora.model.vo.FriendLinkVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"友链\")\npublic class FriendLinkVO {\n\n    @ApiModelProperty(name = \"categoryId\", value = \"友链id\", dataType = \"Integer\")\n    private Integer id;\n\n    @NotBlank(message = \"链接名不能为空\")\n    @ApiModelProperty(name = \"linkName\", value = \"友链名\", dataType = \"String\", required = true)\n    private String linkName;\n\n    @NotBlank(message = \"链接头像不能为空\")\n    @ApiModelProperty(name = \"linkAvatar\", value = \"友链头像\", dataType = \"String\", required = true)\n    private String linkAvatar;\n\n    @NotBlank(message = \"链接地址不能为空\")\n    @ApiModelProperty(name = \"linkAddress\", value = \"友链头像\", dataType = \"String\", required = true)\n    private String linkAddress;\n\n    @NotBlank(message = \"链接介绍不能为空\")\n    @ApiModelProperty(name = \"linkIntro\", value = \"友链头像\", dataType = \"String\", required = true)\n    private String linkIntro;\n\n}",
        "description": "这段代码定义了一个名为FriendLinkVO的类，它代表了一个友链对象。该类使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解来自动生成getter、setter、构造函数和默认构造函数。此外，该类还使用了@ApiModel和@ApiModelProperty注解来指定友链对象的描述信息和属性的描述信息。FriendLinkVO类包含了友链的id、名称、头像、地址和介绍等属性。",
        "label": "JavaClass"
    },
    {
        "id": 794,
        "fullName": "com.aurora.model.dto.SocialTokenDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class SocialTokenDTO {\n\n    private String openId;\n\n    private String accessToken;\n\n    private Integer loginType;\n\n}",
        "description": "这段代码定义了一个名为SocialTokenDTO的数据传输对象，包含openId、accessToken和loginType属性，并使用@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 795,
        "fullName": "com.aurora.model.dto.UserDetailsDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserDetailsDTO implements UserDetails {\n\n    private Integer id;\n\n    private Integer userInfoId;\n\n    private String email;\n\n    private Integer loginType;\n\n    private String username;\n\n    private String password;\n\n    private List<String> roles;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String intro;\n\n    private String website;\n\n    private Integer isSubscribe;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private Integer isDisable;\n\n    private String browser;\n\n    private String os;\n\n    @JsonDeserialize(using = LocalDateTimeDeserializer.class)\n    @JsonSerialize(using = LocalDateTimeSerializer.class)\n    private LocalDateTime expireTime;\n\n    @JsonDeserialize(using = LocalDateTimeDeserializer.class)\n    @JsonSerialize(using = LocalDateTimeSerializer.class)\n    private LocalDateTime lastLoginTime;\n\n    @Override\n    @Transient\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toSet());\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    @Transient\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    @Transient\n    public boolean isAccountNonLocked() {\n        return this.isDisable.equals(CommonConstant.FALSE);\n    }\n\n    @Override\n    @Transient\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    @Transient\n    public boolean isEnabled() {\n        return true;\n    }\n}",
        "description": "这段代码定义了一个包含用户详细信息的DTO类，并实现了UserDetails接口，包括用户的基本信息和权限信息。",
        "label": "JavaClass"
    },
    {
        "id": 796,
        "fullName": "com.aurora.quartz.QuartzJobExecution",
        "comment": "",
        "content": "public class QuartzJobExecution extends AbstractQuartzJob {\n\n    @Override\n    protected void doExecute(JobExecutionContext context, Job job) throws Exception {\n        JobInvokeUtil.invokeMethod(job);\n    }\n}",
        "description": "这段代码定义了一个Quartz任务执行类QuartzJobExecution，继承自AbstractQuartzJob，实现了doExecute方法，用于执行传入的Job任务。",
        "label": "JavaClass"
    },
    {
        "id": 797,
        "fullName": "com.aurora.model.dto.CommentCountDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class CommentCountDTO {\n\n    private Integer id;\n\n    private Integer commentCount;\n\n}",
        "description": "CommentCountDTO is a data transfer object class with id and commentCount fields, generated using Lombok annotations.",
        "label": "JavaClass"
    },
    {
        "id": 798,
        "fullName": "com.aurora.strategy.context.SocialLoginStrategyContext",
        "comment": "",
        "content": "@Service\npublic class SocialLoginStrategyContext {\n\n    @Autowired\n    private Map<String, SocialLoginStrategy> socialLoginStrategyMap;\n\n    public UserInfoDTO executeLoginStrategy(String data, LoginTypeEnum loginTypeEnum) {\n        return socialLoginStrategyMap.get(loginTypeEnum.getStrategy()).login(data);\n    }\n\n}",
        "description": "这段代码是一个博客系统后端的服务类，用于执行社交登录策略。它通过自动注入一个Map类型的socialLoginStrategyMap来获取不同登录类型对应的社交登录策略，然后根据传入的登录类型和数据，执行相应的登录策略并返回一个UserInfoDTO对象。",
        "label": "JavaClass"
    },
    {
        "id": 799,
        "fullName": "com.aurora.service.impl.JobLogServiceImpl",
        "comment": "",
        "content": "@Service\npublic class JobLogServiceImpl extends ServiceImpl<JobLogMapper, JobLog> implements JobLogService {\n\n    @Autowired\n    private JobLogMapper jobLogMapper;\n\n    @SneakyThrows\n    @Override\n    public PageResultDTO<JobLogDTO> listJobLogs(JobLogSearchVO jobLogSearchVO) {\n        LambdaQueryWrapper<JobLog> queryWrapper = new LambdaQueryWrapper<JobLog>()\n                .orderByDesc(JobLog::getCreateTime)\n                .eq(Objects.nonNull(jobLogSearchVO.getJobId()), JobLog::getJobId, jobLogSearchVO.getJobId())\n                .like(StringUtils.isNotBlank(jobLogSearchVO.getJobName()), JobLog::getJobName, jobLogSearchVO.getJobName())\n                .like(StringUtils.isNotBlank(jobLogSearchVO.getJobGroup()), JobLog::getJobGroup, jobLogSearchVO.getJobGroup())\n                .eq(Objects.nonNull(jobLogSearchVO.getStatus()), JobLog::getStatus, jobLogSearchVO.getStatus())\n                .between(Objects.nonNull(jobLogSearchVO.getStartTime()) && Objects.nonNull(jobLogSearchVO.getEndTime()),\n                        JobLog::getCreateTime,\n                        jobLogSearchVO.getStartTime(),\n                        jobLogSearchVO.getEndTime());\n        Page<JobLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<JobLog> jobLogPage = jobLogMapper.selectPage(page, queryWrapper);\n        List<JobLogDTO> jobLogDTOs = BeanCopyUtil.copyList(jobLogPage.getRecords(), JobLogDTO.class);\n        return new PageResultDTO<>(jobLogDTOs, (int)jobLogPage.getTotal());\n    }\n\n    @Override\n    public void deleteJobLogs(List<Integer> ids) {\n        LambdaQueryWrapper<JobLog> queryWrapper = new LambdaQueryWrapper<JobLog>().in(JobLog::getId, ids);\n        jobLogMapper.delete(queryWrapper);\n    }\n\n    @Override\n    public void cleanJobLogs() {\n        jobLogMapper.delete(null);\n    }\n\n    @Override\n    public List<String> listJobLogGroups() {\n        return jobLogMapper.listJobLogGroups();\n    }\n\n}",
        "description": "这段代码是一个博客系统的后端代码，其中包含了一个名为JobLogServiceImpl的服务类。该类实现了JobLogService接口，并使用了JobLogMapper接口来操作数据库。\n\n该类中的listJobLogs方法用于查询任务日志列表，并根据一些条件进行过滤和排序。deleteJobLogs方法用于删除指定ID的任务日志。cleanJobLogs方法用于清空任务日志表中的所有数据。listJobLogGroups方法用于获取任务日志的分组信息。\n\n整体而言，这段代码实现了博客系统中与任务日志相关的一些功能。",
        "label": "JavaClass"
    },
    {
        "id": 800,
        "fullName": "com.aurora.model.dto.CommentDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommentDTO {\n\n    private Integer id;\n\n    private Integer userId;\n\n    private String nickname;\n\n    private String avatar;\n\n    private String webSite;\n\n    private String commentContent;\n\n    private LocalDateTime createTime;\n\n    private List<ReplyDTO> replyDTOs;\n\n}",
        "description": "这段代码定义了一个评论数据传输对象 CommentDTO，包含评论的各种属性。",
        "label": "JavaClass"
    },
    {
        "id": 801,
        "fullName": "com.aurora.model.dto.OperationLogDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class OperationLogDTO {\n\n    private Integer id;\n\n    private String optModule;\n\n    private String optUri;\n\n    private String optType;\n\n    private String optMethod;\n\n    private String optDesc;\n\n    private String requestMethod;\n\n    private String requestParam;\n\n    private String responseData;\n\n    private String nickname;\n\n    private String ipAddress;\n\n    private String ipSource;\n\n    private LocalDateTime createTime;\n}",
        "description": "OperationLogDTO是一个包含操作日志信息的数据传输对象，包括id、操作模块、操作URI、操作类型、操作方法、操作描述、请求方法、请求参数、响应数据、昵称、IP地址、IP来源和创建时间等属性。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 802,
        "fullName": "com.aurora.mapper.OperationLogMapper",
        "comment": "",
        "content": "@Repository\npublic interface OperationLogMapper extends BaseMapper<OperationLog> {\n\n}",
        "description": "这段代码定义了一个操作日志映射器接口，用于与数据库交互操作日志数据。继承了BaseMapper接口，可以实现基本的数据库操作功能。@Repository注解表明这是一个Spring管理的仓库类。",
        "label": "JavaClass"
    },
    {
        "id": 803,
        "fullName": "com.aurora.model.dto.QQUserInfoDTO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class QQUserInfoDTO {\n\n    private String nickname;\n\n    private String figureurl_qq_1;\n}",
        "description": "这段代码定义了一个名为QQUserInfoDTO的数据传输对象，包含了昵称和QQ头像URL字段，并使用了Lombok的@Data、@AllArgsConstructor、@NoArgsConstructor和@Builder注解。",
        "label": "JavaClass"
    },
    {
        "id": 804,
        "fullName": "com.aurora.model.dto.ArticleAdminDTO",
        "comment": "\/**\n * @author 花未眠\n * 后台文章\n *\/",
        "content": "\/**\n * @author 花未眠\n * 后台文章\n *\/\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ArticleAdminDTO {\n\n    private Integer id;\n\n    private String articleCover;\n\n    private String articleTitle;\n\n    private LocalDateTime createTime;\n\n    private Integer viewsCount;\n\n    private String categoryName;\n\n    private List<TagDTO> tagDTOs;\n\n    private Integer isTop;\n\n    private Integer isFeatured;\n\n    private Integer isDelete;\n\n    private Integer status;\n\n    private Integer type;\n\n}",
        "description": "这段代码定义了一个用于后台文章管理的数据传输对象(ArticleAdminDTO)，包括文章的各种属性信息。",
        "label": "JavaClass"
    },
    {
        "id": 805,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl",
        "comment": "",
        "content": "@Service\npublic class UserAuthServiceImpl implements UserAuthService {\n\n    @Autowired\n    private UserAuthMapper userAuthMapper;\n\n    @Autowired\n    private UserInfoMapper userInfoMapper;\n\n    @Autowired\n    private UserRoleMapper userRoleMapper;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private AuroraInfoService auroraInfoService;\n\n    @Autowired\n    private TokenService tokenService;\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @Autowired\n    private SocialLoginStrategyContext socialLoginStrategyContext;\n\n    @Override\n    public void sendCode(String username) {\n        if (!checkEmail(username)) {\n            throw new BizException(\"请输入正确邮箱\");\n        }\n        String code = getRandomCode();\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"content\", \"您的验证码为 \" + code + \" 有效期15分钟，请不要告诉他人哦！\");\n        EmailDTO emailDTO = EmailDTO.builder()\n                .email(username)\n                .subject(CommonConstant.CAPTCHA)\n                .template(\"common.html\")\n                .commentMap(map)\n                .build();\n        rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n        redisService.set(USER_CODE_KEY + username, code, CODE_EXPIRE_TIME);\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<UserAreaDTO> listUserAreas(ConditionVO conditionVO) {\n        List<UserAreaDTO> userAreaDTOs = new ArrayList<>();\n        switch (Objects.requireNonNull(getUserAreaType(conditionVO.getType()))) {\n            case USER:\n                Object userArea = redisService.get(USER_AREA);\n                if (Objects.nonNull(userArea)) {\n                    userAreaDTOs = JSON.parseObject(userArea.toString(), List.class);\n                }\n                return userAreaDTOs;\n            case VISITOR:\n                Map<String, Object> visitorArea = redisService.hGetAll(VISITOR_AREA);\n                if (Objects.nonNull(visitorArea)) {\n                    userAreaDTOs = visitorArea.entrySet().stream()\n                            .map(item -> UserAreaDTO.builder()\n                                    .name(item.getKey())\n                                    .value(Long.valueOf(item.getValue().toString()))\n                                    .build())\n                            .collect(Collectors.toList());\n                }\n                return userAreaDTOs;\n            default:\n                break;\n        }\n        return userAreaDTOs;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void register(UserVO userVO) {\n        if (!checkEmail(userVO.getUsername())) {\n            throw new BizException(\"邮箱格式不对!\");\n        }\n        if (checkUser(userVO)) {\n            throw new BizException(\"邮箱已被注册！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .email(userVO.getUsername())\n                .nickname(CommonConstant.DEFAULT_NICKNAME + IdWorker.getId())\n                .avatar(auroraInfoService.getWebsiteConfig().getUserAvatar())\n                .build();\n        userInfoMapper.insert(userInfo);\n        UserRole userRole = UserRole.builder()\n                .userId(userInfo.getId())\n                .roleId(RoleEnum.USER.getRoleId())\n                .build();\n        userRoleMapper.insert(userRole);\n        UserAuth userAuth = UserAuth.builder()\n                .userInfoId(userInfo.getId())\n                .username(userVO.getUsername())\n                .password(BCrypt.hashpw(userVO.getPassword(), BCrypt.gensalt()))\n                .loginType(LoginTypeEnum.EMAIL.getType())\n                .build();\n        userAuthMapper.insert(userAuth);\n    }\n\n    @Override\n    public void updatePassword(UserVO userVO) {\n        if (!checkUser(userVO)) {\n            throw new BizException(\"邮箱尚未注册！\");\n        }\n        userAuthMapper.update(new UserAuth(), new LambdaUpdateWrapper<UserAuth>()\n                .set(UserAuth::getPassword, BCrypt.hashpw(userVO.getPassword(), BCrypt.gensalt()))\n                .eq(UserAuth::getUsername, userVO.getUsername()));\n    }\n\n    @Override\n    @SuppressWarnings(\"all\")\n    public void updateAdminPassword(PasswordVO passwordVO) {\n        UserAuth user = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .eq(UserAuth::getId, UserUtil.getUserDetailsDTO().getId()));\n        if (Objects.nonNull(user) && BCrypt.checkpw(passwordVO.getOldPassword(), user.getPassword())) {\n            UserAuth userAuth = UserAuth.builder()\n                    .id(UserUtil.getUserDetailsDTO().getId())\n                    .password(BCrypt.hashpw(passwordVO.getNewPassword(), BCrypt.gensalt()))\n                    .build();\n            userAuthMapper.updateById(userAuth);\n        } else {\n            throw new BizException(\"旧密码不正确\");\n        }\n    }\n\n    @Override\n    public PageResultDTO<UserAdminDTO> listUsers(ConditionVO conditionVO) {\n        Integer count = userAuthMapper.countUser(conditionVO);\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<UserAdminDTO> UserAdminDTOs = userAuthMapper.listUsers(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(UserAdminDTOs, count);\n    }\n\n    @SneakyThrows\n    @Override\n    public UserLogoutStatusDTO logout() {\n        tokenService.delLoginUser(UserUtil.getUserDetailsDTO().getId());\n        return new UserLogoutStatusDTO(\"注销成功\");\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public UserInfoDTO qqLogin(QQLoginVO qqLoginVO) {\n        return socialLoginStrategyContext.executeLoginStrategy(JSON.toJSONString(qqLoginVO), LoginTypeEnum.QQ);\n    }\n\n    private Boolean checkUser(UserVO user) {\n        if (!user.getCode().equals(redisService.get(USER_CODE_KEY + user.getUsername()))) {\n            throw new BizException(\"验证码错误！\");\n        }\n        UserAuth userAuth = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .select(UserAuth::getUsername)\n                .eq(UserAuth::getUsername, user.getUsername()));\n        return Objects.nonNull(userAuth);\n    }\n\n}",
        "description": "这段代码是一个用户认证服务的实现类，包括发送验证码、列出用户区域、注册用户、更新密码等功能的实现。其中使用了Redis缓存、RabbitMQ消息队列、BCrypt密码加密等技术。",
        "label": "JavaClass"
    },
    {
        "id": 806,
        "fullName": "com.aurora.model.dto.CommentAdminDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommentAdminDTO {\n\n    private Integer id;\n\n    private String avatar;\n\n    private String nickname;\n\n    private String replyNickname;\n\n    private String articleTitle;\n\n    private String commentContent;\n\n    private Integer type;\n\n    private Integer isReview;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "CommentAdminDTO is a data transfer object class with attributes for representing comments in the admin interface, including id, avatar, nickname, replyNickname, articleTitle, commentContent, type, isReview, and createTime.",
        "label": "JavaClass"
    },
    {
        "id": 807,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl",
        "comment": "",
        "content": "@Service\npublic class ResourceServiceImpl extends ServiceImpl<ResourceMapper, Resource> implements ResourceService {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Autowired\n    private ResourceMapper resourceMapper;\n\n    @Autowired\n    private RoleResourceMapper roleResourceMapper;\n\n\n    @Autowired\n    private FilterInvocationSecurityMetadataSourceImpl filterInvocationSecurityMetadataSource;\n\n    @SuppressWarnings(\"all\")\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void importSwagger() {\n        this.remove(null);\n        roleResourceMapper.delete(null);\n        List<Resource> resources = new ArrayList<>();\n        Map<String, Object> data = restTemplate.getForObject(\"http:\/\/localhost:8080\/v2\/api-docs\", Map.class);\n        List<Map<String, String>> tagList = (List<Map<String, String>>) data.get(\"tags\");\n        tagList.forEach(item -> {\n            Resource resource = Resource.builder()\n                    .resourceName(item.get(\"name\"))\n                    .isAnonymous(FALSE)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            resources.add(resource);\n        });\n        this.saveBatch(resources);\n        Map<String, Integer> permissionMap = resources.stream()\n                .collect(Collectors.toMap(Resource::getResourceName, Resource::getId));\n        resources.clear();\n        Map<String, Map<String, Map<String, Object>>> path = (Map<String, Map<String, Map<String, Object>>>) data.get(\"paths\");\n        path.forEach((url, value) -> value.forEach((requestMethod, info) -> {\n            String permissionName = info.get(\"summary\").toString();\n            List<String> tag = (List<String>) info.get(\"tags\");\n            Integer parentId = permissionMap.get(tag.get(0));\n            Resource resource = Resource.builder()\n                    .resourceName(permissionName)\n                    .url(url.replaceAll(\"\\\\{[^}]*\\\\}\", \"*\"))\n                    .parentId(parentId)\n                    .requestMethod(requestMethod.toUpperCase())\n                    .isAnonymous(FALSE)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            resources.add(resource);\n        }));\n        this.saveBatch(resources);\n    }\n\n    @Override\n    public void saveOrUpdateResource(ResourceVO resourceVO) {\n        Resource resource = BeanCopyUtil.copyObject(resourceVO, Resource.class);\n        this.saveOrUpdate(resource);\n        filterInvocationSecurityMetadataSource.clearDataSource();\n    }\n\n    @Override\n    public void deleteResource(Integer resourceId) {\n        Integer count = roleResourceMapper.selectCount(new LambdaQueryWrapper<RoleResource>()\n                .eq(RoleResource::getResourceId, resourceId));\n        if (count > 0) {\n            throw new BizException(\"该资源下存在角色\");\n        }\n        List<Integer> resourceIds = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                        .select(Resource::getId).\n                        eq(Resource::getParentId, resourceId))\n                .stream()\n                .map(Resource::getId)\n                .collect(Collectors.toList());\n        resourceIds.add(resourceId);\n        resourceMapper.deleteBatchIds(resourceIds);\n    }\n\n    @Override\n    public List<ResourceDTO> listResources(ConditionVO conditionVO) {\n        List<Resource> resources = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Resource::getResourceName, conditionVO.getKeywords()));\n        List<Resource> parents = listResourceModule(resources);\n        Map<Integer, List<Resource>> childrenMap = listResourceChildren(resources);\n        List<ResourceDTO> resourceDTOs = parents.stream().map(item -> {\n            ResourceDTO resourceDTO = BeanCopyUtil.copyObject(item, ResourceDTO.class);\n            List<ResourceDTO> child = BeanCopyUtil.copyList(childrenMap.get(item.getId()), ResourceDTO.class);\n            resourceDTO.setChildren(child);\n            childrenMap.remove(item.getId());\n            return resourceDTO;\n        }).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(childrenMap)) {\n            List<Resource> childrenList = new ArrayList<>();\n            childrenMap.values().forEach(childrenList::addAll);\n            List<ResourceDTO> childrenDTOs = childrenList.stream()\n                    .map(item -> BeanCopyUtil.copyObject(item, ResourceDTO.class))\n                    .collect(Collectors.toList());\n            resourceDTOs.addAll(childrenDTOs);\n        }\n        return resourceDTOs;\n    }\n\n    @Override\n    public List<LabelOptionDTO> listResourceOption() {\n        List<Resource> resources = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                .select(Resource::getId, Resource::getResourceName, Resource::getParentId)\n                .eq(Resource::getIsAnonymous, FALSE));\n        List<Resource> parents = listResourceModule(resources);\n        Map<Integer, List<Resource>> childrenMap = listResourceChildren(resources);\n        return parents.stream().map(item -> {\n            List<LabelOptionDTO> list = new ArrayList<>();\n            List<Resource> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                list = children.stream()\n                        .map(resource -> LabelOptionDTO.builder()\n                                .id(resource.getId())\n                                .label(resource.getResourceName())\n                                .build())\n                        .collect(Collectors.toList());\n            }\n            return LabelOptionDTO.builder()\n                    .id(item.getId())\n                    .label(item.getResourceName())\n                    .children(list)\n                    .build();\n        }).collect(Collectors.toList());\n    }\n\n\n    private List<Resource> listResourceModule(List<Resource> resourceList) {\n        return resourceList.stream()\n                .filter(item -> Objects.isNull(item.getParentId()))\n                .collect(Collectors.toList());\n    }\n\n    private Map<Integer, List<Resource>> listResourceChildren(List<Resource> resourceList) {\n        return resourceList.stream()\n                .filter(item -> Objects.nonNull(item.getParentId()))\n                .collect(Collectors.groupingBy(Resource::getParentId));\n    }\n\n}",
        "description": "这段代码是一个博客系统的后端代码，主要包含了一个名为ResourceServiceImpl的类，实现了ResourceService接口。该类使用@Service注解进行标记，表示它是一个服务类。该类主要实现了一些与资源相关的操作，包括导入Swagger接口文档、保存或更新资源、删除资源、获取资源列表等功能。其中还包括了一些私有方法用于处理资源的父子关系。该类还注入了一些依赖，包括RestTemplate、ResourceMapper、RoleResourceMapper和FilterInvocationSecurityMetadataSourceImpl。",
        "label": "JavaClass"
    },
    {
        "id": 808,
        "fullName": "com.aurora.mapper.PhotoAlbumMapper",
        "comment": "",
        "content": "@Repository\npublic interface PhotoAlbumMapper extends BaseMapper<PhotoAlbum> {\n\n    List<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"condition\") ConditionVO conditionVO);\n\n}",
        "description": "PhotoAlbumMapper是一个用于操作相册信息的Mapper接口，其中包含了一个用于获取管理员展示相册列表的方法listPhotoAlbumsAdmin。方法参数包括当前页码、每页数量和条件对象。",
        "label": "JavaClass"
    },
    {
        "id": 809,
        "fullName": "com.aurora.mapper.PhotoMapper",
        "comment": "",
        "content": "@Repository\npublic interface PhotoMapper extends BaseMapper<Photo> {\n\n}",
        "description": "PhotoMapper是一个用于操作Photo实体的数据访问接口，继承自BaseMapper。",
        "label": "JavaClass"
    },
    {
        "id": 810,
        "fullName": "com.aurora.service.ArticleTagService",
        "comment": "",
        "content": "public interface ArticleTagService extends IService<ArticleTag> {\n\n}",
        "description": "这段代码定义了一个接口ArticleTagService，该接口继承自IService接口，并指定泛型为ArticleTag。",
        "label": "JavaClass"
    },
    {
        "id": 811,
        "fullName": "com.aurora.model.dto.FriendLinkAdminDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FriendLinkAdminDTO {\n\n    private Integer id;\n\n    private String linkName;\n\n    private String linkAvatar;\n\n    private String linkAddress;\n\n    private String linkIntro;\n\n    private LocalDateTime createTime;\n\n}",
        "description": "这段代码定义了一个FriendLinkAdminDTO数据传输对象，包含友情链接的信息，包括id、链接名称、链接头像、链接地址、链接简介和创建时间。使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 812,
        "fullName": "com.aurora.model.vo.UserVO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"用户账号\")\npublic class UserVO {\n\n    @NotBlank(message = \"邮箱不能为空\")\n    @Email(message = \"邮箱格式不正确\")\n    @ApiModelProperty(name = \"username\", value = \"用户名\", required = true, dataType = \"String\")\n    private String username;\n\n    @Size(min = 6, message = \"密码不能少于6位\")\n    @NotBlank(message = \"密码不能为空\")\n    @ApiModelProperty(name = \"password\", value = \"密码\", required = true, dataType = \"String\")\n    private String password;\n\n    @NotBlank(message = \"验证码不能为空\")\n    @ApiModelProperty(name = \"code\", value = \"邮箱验证码\", required = true, dataType = \"String\")\n    private String code;\n\n}",
        "description": "这段代码定义了一个用户账号的数据对象（UserVO），包括用户名、密码和验证码等字段，并设置了相应的校验规则和描述信息。",
        "label": "JavaClass"
    },
    {
        "id": 813,
        "fullName": "com.aurora.controller.MenuController",
        "comment": "",
        "content": "@Api(tags = \"菜单模块\")\n@RestController\npublic class MenuController {\n\n    @Autowired\n    private MenuService menuService;\n\n    @ApiOperation(value = \"查看菜单列表\")\n    @GetMapping(\"\/admin\/menus\")\n    public ResultVO<List<MenuDTO>> listMenus(ConditionVO conditionVO) {\n        return ResultVO.ok(menuService.listMenus(conditionVO));\n    }\n\n    @OptLog(optType =SAVE_OR_UPDATE)\n    @ApiOperation(value = \"新增或修改菜单\")\n    @PostMapping(\"\/admin\/menus\")\n    public ResultVO<?> saveOrUpdateMenu(@Valid @RequestBody MenuVO menuVO) {\n        menuService.saveOrUpdateMenu(menuVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改目录是否隐藏\")\n    @PutMapping(\"\/admin\/menus\/isHidden\")\n    public ResultVO<?> updateMenuIsHidden(@RequestBody IsHiddenVO isHiddenVO) {\n        menuService.updateMenuIsHidden(isHiddenVO);\n        return ResultVO.ok();\n    }\n\n    @OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除菜单\")\n    @DeleteMapping(\"\/admin\/menus\/{menuId}\")\n    public ResultVO<?> deleteMenu(@PathVariable(\"menuId\") Integer menuId) {\n        menuService.deleteMenu(menuId);\n        return ResultVO.ok();\n    }\n\n    @ApiOperation(value = \"查看角色菜单选项\")\n    @GetMapping(\"\/admin\/role\/menus\")\n    public ResultVO<List<LabelOptionDTO>> listMenuOptions() {\n        return ResultVO.ok(menuService.listMenuOptions());\n    }\n\n    @ApiOperation(value = \"查看当前用户菜单\")\n    @GetMapping(\"\/admin\/user\/menus\")\n    public ResultVO<List<UserMenuDTO>> listUserMenus() {\n        return ResultVO.ok(menuService.listUserMenus());\n    }\n}",
        "description": "这段代码是一个菜单模块的控制器，包含了对菜单的增删改查操作以及查看角色菜单选项和当前用户菜单的功能。其中包括查看菜单列表、新增或修改菜单、修改目录是否隐藏、删除菜单、查看角色菜单选项和查看当前用户菜单等功能。并且使用了Swagger的注解@Api和@ApiOperation对接口进行描述。",
        "label": "JavaClass"
    },
    {
        "id": 814,
        "fullName": "com.aurora.model.dto.RoleDTO",
        "comment": "",
        "content": "@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class RoleDTO {\n\n    private Integer id;\n\n    private String roleName;\n\n    private LocalDateTime createTime;\n\n    private Integer isDisable;\n\n    private List<Integer> resourceIds;\n\n    private List<Integer> menuIds;\n\n}",
        "description": "RoleDTO是一个带有id、roleName、createTime、isDisable、resourceIds和menuIds属性的数据传输对象，使用了Lombok的@Data、@Builder、@AllArgsConstructor和@NoArgsConstructor注解。",
        "label": "JavaClass"
    },
    {
        "id": 815,
        "fullName": "com.aurora.model.vo.PhotoVO",
        "comment": "",
        "content": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@ApiModel(description = \"照片\")\npublic class PhotoVO {\n\n    @NotNull(message = \"相册id不能为空\")\n    @ApiModelProperty(name = \"id\", value = \"相册id\", required = true, dataType = \"Integer\")\n    private Integer albumId;\n\n    @ApiModelProperty(name = \"photoUrlList\", value = \"照片列表\", required = true, dataType = \"List<String>\")\n    private List<String> photoUrls;\n\n    @ApiModelProperty(name = \"photoIdList\", value = \"照片id列表\", required = true, dataType = \"List<Integer>\")\n    private List<Integer> photoIds;\n\n}",
        "description": "这段代码定义了一个名为PhotoVO的Java类，用于表示照片信息，包含相册id、照片列表和照片id列表字段，并使用了Lombok和Swagger注解。",
        "label": "JavaClass"
    },
    {
        "id": 816,
        "fullName": "com.aurora.exception.BizException.BizException( StatusCodeEnum statusCodeEnum )",
        "comment": "",
        "content": "public BizException(StatusCodeEnum statusCodeEnum) {\n        this.code = statusCodeEnum.getCode();\n        this.message = statusCodeEnum.getDesc();\n    }",
        "description": "创建一个业务异常类，根据传入的状态码枚举设置异常的代码和消息。",
        "label": "JavaMethod"
    },
    {
        "id": 817,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.listResources( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public List<ResourceDTO> listResources(ConditionVO conditionVO) {\n        List<Resource> resources = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Resource::getResourceName, conditionVO.getKeywords()));\n        List<Resource> parents = listResourceModule(resources);\n        Map<Integer, List<Resource>> childrenMap = listResourceChildren(resources);\n        List<ResourceDTO> resourceDTOs = parents.stream().map(item -> {\n            ResourceDTO resourceDTO = BeanCopyUtil.copyObject(item, ResourceDTO.class);\n            List<ResourceDTO> child = BeanCopyUtil.copyList(childrenMap.get(item.getId()), ResourceDTO.class);\n            resourceDTO.setChildren(child);\n            childrenMap.remove(item.getId());\n            return resourceDTO;\n        }).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(childrenMap)) {\n            List<Resource> childrenList = new ArrayList<>();\n            childrenMap.values().forEach(childrenList::addAll);\n            List<ResourceDTO> childrenDTOs = childrenList.stream()\n                    .map(item -> BeanCopyUtil.copyObject(item, ResourceDTO.class))\n                    .collect(Collectors.toList());\n            resourceDTOs.addAll(childrenDTOs);\n        }\n        return resourceDTOs;\n    }",
        "description": "该方法用于根据条件筛选资源列表，并将资源按照父子关系组织成DTO对象返回。",
        "label": "JavaMethod"
    },
    {
        "id": 818,
        "fullName": "com.aurora.service.CategoryService.deleteCategories( List<Integer> categoryIds )",
        "comment": "",
        "content": "void deleteCategories(List<Integer> categoryIds);",
        "description": "这段代码定义了一个函数，用于删除一组分类的信息。函数接收一个包含整数类型元素的列表作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 819,
        "fullName": "com.aurora.service.UserInfoService.listOnlineUsers( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<UserOnlineDTO> listOnlineUsers(ConditionVO conditionVO);",
        "description": "这段代码是用于获取在线用户列表的方法，返回一个带有用户在线信息的DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 820,
        "fullName": "com.aurora.controller.MenuController.deleteMenu( Integer menuId )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除菜单\")\n    @DeleteMapping(\"\/admin\/menus\/{menuId}\")\n    public ResultVO<?> deleteMenu(@PathVariable(\"menuId\") Integer menuId) {\n        menuService.deleteMenu(menuId);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于删除菜单，接收菜单ID作为参数，通过调用menuService的deleteMenu方法来实现删除操作。同时，该方法带有@OptLog注解，表示为删除操作，并在Swagger文档中有对应的描述信息。",
        "label": "JavaMethod"
    },
    {
        "id": 821,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.saveOrUpdateArticle( ArticleVO articleVO )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void saveOrUpdateArticle(ArticleVO articleVO) {\n        Category category = saveArticleCategory(articleVO);\n        Article article = BeanCopyUtil.copyObject(articleVO, Article.class);\n        if (Objects.nonNull(category)) {\n            article.setCategoryId(category.getId());\n        }\n        article.setUserId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        this.saveOrUpdate(article);\n        saveArticleTag(articleVO, article.getId());\n        if (article.getStatus().equals(1)) {\n            rabbitTemplate.convertAndSend(SUBSCRIBE_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(article.getId()), new MessageProperties()));\n        }\n    }",
        "description": "该方法用于保存或更新博客文章信息，包括保存文章分类、标签和发布状态，并在需要时发送消息到RabbitMQ。",
        "label": "JavaMethod"
    },
    {
        "id": 822,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.listPhotosByAlbumId( Integer albumId )",
        "comment": "",
        "content": "@Override\n    public PhotoDTO listPhotosByAlbumId(Integer albumId) {\n        PhotoAlbum photoAlbum = photoAlbumService.getOne(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getId, albumId)\n                .eq(PhotoAlbum::getIsDelete, FALSE)\n                .eq(PhotoAlbum::getStatus, PUBLIC.getStatus()));\n        if (Objects.isNull(photoAlbum)) {\n            throw new BizException(\"相册不存在\");\n        }\n        Page<Photo> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        List<String> photos = photoMapper.selectPage(page, new LambdaQueryWrapper<Photo>()\n                        .select(Photo::getPhotoSrc)\n                        .eq(Photo::getAlbumId, albumId)\n                        .eq(Photo::getIsDelete, FALSE)\n                        .orderByDesc(Photo::getId))\n                .getRecords()\n                .stream()\n                .map(Photo::getPhotoSrc)\n                .collect(Collectors.toList());\n        return PhotoDTO.builder()\n                .photoAlbumCover(photoAlbum.getAlbumCover())\n                .photoAlbumName(photoAlbum.getAlbumName())\n                .photos(photos)\n                .build();\n    }",
        "description": "该方法根据相册ID列出相册中的照片，包括相册封面、相册名称和照片列表。如果相册不存在，则抛出异常。",
        "label": "JavaMethod"
    },
    {
        "id": 823,
        "fullName": "com.aurora.service.RedisService.get( String key )",
        "comment": "",
        "content": "Object get(String key);",
        "description": "这段代码实现了一个方法，根据键值获取对象。",
        "label": "JavaMethod"
    },
    {
        "id": 824,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.saveOrUpdatePhotoAlbum( PhotoAlbumVO photoAlbumVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdatePhotoAlbum(PhotoAlbumVO photoAlbumVO) {\n        PhotoAlbum album = photoAlbumMapper.selectOne(new LambdaQueryWrapper<PhotoAlbum>()\n                .select(PhotoAlbum::getId)\n                .eq(PhotoAlbum::getAlbumName, photoAlbumVO.getAlbumName()));\n        if (Objects.nonNull(album) && !album.getId().equals(photoAlbumVO.getId())) {\n            throw new BizException(\"相册名已存在\");\n        }\n        PhotoAlbum photoAlbum = BeanCopyUtil.copyObject(photoAlbumVO, PhotoAlbum.class);\n        this.saveOrUpdate(photoAlbum);\n    }",
        "description": "这段代码实现了在博客系统中保存或更新相册信息的功能，同时使用事务控制确保操作的原子性，若相册名已存在则抛出业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 825,
        "fullName": "com.aurora.controller.JobLogController.cleanJobLogs(  )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(\"清除定时任务的日志\")\n    @DeleteMapping(\"\/admin\/jobLogs\/clean\")\n    public ResultVO<?> cleanJobLogs() {\n        jobLogService.cleanJobLogs();\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于清除定时任务日志的后端接口，使用了DELETE请求方式，并添加了操作日志记录。",
        "label": "JavaMethod"
    },
    {
        "id": 826,
        "fullName": "com.aurora.config.Knife4jConfig.apiInfo(  )",
        "comment": "",
        "content": "private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"aurora文档\")\n                .description(\"aurora\")\n                .contact(new Contact(\"花未眠\", \"\", \"1909925152@qq.com\"))\n                .termsOfServiceUrl(\"https:\/\/www.linhaojun.top\/api\")\n                .version(\"1.0\")\n                .build();\n    }",
        "description": "这段代码是用于创建一个API信息对象，其中包含了标题、描述、联系人信息、服务条款URL和版本号。",
        "label": "JavaMethod"
    },
    {
        "id": 827,
        "fullName": "com.aurora.quartz.AuroraQuartz.clearJobLogs(  )",
        "comment": "",
        "content": "public void clearJobLogs() {\n        jobLogService.cleanJobLogs();\n    }",
        "description": "这段代码是一个清除工作日志的方法，它调用了一个服务的cleanJobLogs方法来实现清除工作日志的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 828,
        "fullName": "com.aurora.service.JobService.listJobGroups(  )",
        "comment": "",
        "content": "List<String> listJobGroups();",
        "description": "该方法返回一个字符串列表，其中包含所有作业组的名称。",
        "label": "JavaMethod"
    },
    {
        "id": 829,
        "fullName": "com.aurora.service.impl.TagServiceImpl.listTags(  )",
        "comment": "",
        "content": "@Override\n    public List<TagDTO> listTags() {\n        return tagMapper.listTags();\n    }",
        "description": "该方法实现了获取博客系统中所有标签的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 830,
        "fullName": "com.aurora.consumer.CommentNoticeConsumer.process( byte[] data )",
        "comment": "",
        "content": "@RabbitHandler\n    public void process(byte[] data) {\n        EmailDTO emailDTO = JSON.parseObject(new String(data), EmailDTO.class);\n        emailUtil.sendHtmlMail(emailDTO);\n    }",
        "description": "这段代码是一个RabbitMQ消息处理器，将接收到的字节数组转换为EmailDTO对象，并使用emailUtil发送HTML邮件。",
        "label": "JavaMethod"
    },
    {
        "id": 831,
        "fullName": "com.aurora.service.impl.JobServiceImpl.init(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @PostConstruct\n    public void init() {\n        scheduler.clear();\n        List<Job> jobs = jobMapper.selectList(null);\n        for (Job job : jobs) {\n            ScheduleUtil.createScheduleJob(scheduler, job);\n        }\n    }",
        "description": "这段代码通过@PostConstruct注解在初始化时清除调度器中的任务，并根据数据库中的Job数据创建新的调度任务。使用了Lombok的@SneakyThrows注解处理异常。",
        "label": "JavaMethod"
    },
    {
        "id": 832,
        "fullName": "com.aurora.util.JobInvokeUtil.invokeMethod( Object bean, String methodName, List<Object[]> methodParams )",
        "comment": "",
        "content": "private static void invokeMethod(Object bean, String methodName, List<Object[]> methodParams)\n            throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n            InvocationTargetException {\n        if (methodParams != null && methodParams.size() > 0) {\n            Method method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n            method.invoke(bean, getMethodParamsValue(methodParams));\n        } else {\n            Method method = bean.getClass().getDeclaredMethod(methodName);\n            method.invoke(bean);\n        }\n    }",
        "description": "这段代码实现了根据方法名和参数列表动态调用对象的方法。如果有参数，则根据参数类型和值调用相应的方法；如果没有参数，则直接调用方法。",
        "label": "JavaMethod"
    },
    {
        "id": 833,
        "fullName": "com.aurora.consumer.MaxWellConsumer.process( byte[] data )",
        "comment": "",
        "content": "@RabbitHandler\n    public void process(byte[] data) {\n        MaxwellDataDTO maxwellDataDTO = JSON.parseObject(new String(data), MaxwellDataDTO.class);\n        Article article = JSON.parseObject(JSON.toJSONString(maxwellDataDTO.getData()), Article.class);\n        switch (maxwellDataDTO.getType()) {\n            case \"insert\":\n            case \"update\":\n                elasticsearchMapper.save(BeanCopyUtil.copyObject(article, ArticleSearchDTO.class));\n                break;\n            case \"delete\":\n                elasticsearchMapper.deleteById(article.getId());\n                break;\n            default:\n                break;\n        }\n    }",
        "description": "This code processes data received from a RabbitMQ queue, parses it into MaxwellDataDTO and Article objects, and then performs different operations in Elasticsearch based on the type of the data (insert, update, delete).",
        "label": "JavaMethod"
    },
    {
        "id": 834,
        "fullName": "com.aurora.aspect.ExceptionLogAspect.saveExceptionLog( JoinPoint joinPoint, Exception e )",
        "comment": "",
        "content": "@AfterThrowing(value = \"exceptionLogPointcut()\", throwing = \"e\")\n    public void saveExceptionLog(JoinPoint joinPoint, Exception e) {\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\n        ExceptionLog exceptionLog = new ExceptionLog();\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        exceptionLog.setOptUri(Objects.requireNonNull(request).getRequestURI());\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = method.getName();\n        methodName = className + \".\" + methodName;\n        exceptionLog.setOptMethod(methodName);\n        exceptionLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\n        if (joinPoint.getArgs().length > 0) {\n            if (joinPoint.getArgs()[0] instanceof MultipartFile) {\n                exceptionLog.setRequestParam(\"file\");\n            } else {\n                exceptionLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\n            }\n        }\n        if (Objects.nonNull(apiOperation)) {\n            exceptionLog.setOptDesc(apiOperation.value());\n        } else {\n            exceptionLog.setOptDesc(\"\");\n        }\n        exceptionLog.setExceptionInfo(ExceptionUtil.getTrace(e));\n        String ipAddress = IpUtil.getIpAddress(request);\n        exceptionLog.setIpAddress(ipAddress);\n        exceptionLog.setIpSource(IpUtil.getIpSource(ipAddress));\n        applicationContext.publishEvent(new ExceptionLogEvent(exceptionLog));\n    }",
        "description": "该方法用于捕获异常并保存异常日志信息，包括请求的URI、请求方法、请求参数、异常信息等，并通过事件发布机制将异常日志信息传递给其他组件。",
        "label": "JavaMethod"
    },
    {
        "id": 835,
        "fullName": "com.aurora.mapper.PhotoAlbumMapper.listPhotoAlbumsAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"condition\") ConditionVO conditionVO);",
        "description": "这段代码是一个后端方法，用于获取相册列表的管理员端数据。方法接受三个参数，分别是当前页码、每页显示的数量和条件对象。返回的是一个包含管理员端相册信息的DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 836,
        "fullName": "com.aurora.mapper.ArticleMapper.listArticleStatistics(  )",
        "comment": "",
        "content": "List<ArticleStatisticsDTO> listArticleStatistics();",
        "description": "该方法返回一个包含文章统计信息的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 837,
        "fullName": "com.aurora.config.RabbitMQConfig.maxWellExchange(  )",
        "comment": "",
        "content": "@Bean\n    public FanoutExchange maxWellExchange() {\n        return new FanoutExchange(MAXWELL_EXCHANGE, true, false);\n    }",
        "description": "这段代码创建了一个名为\"maxWellExchange\"的FanoutExchange实例，并设置其durable为true，autoDelete为false。",
        "label": "JavaMethod"
    },
    {
        "id": 838,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.saveArticleCategory( ArticleVO articleVO )",
        "comment": "",
        "content": "private Category saveArticleCategory(ArticleVO articleVO) {\n        Category category = categoryMapper.selectOne(new LambdaQueryWrapper<Category>()\n                .eq(Category::getCategoryName, articleVO.getCategoryName()));\n        if (Objects.isNull(category) && !articleVO.getStatus().equals(DRAFT.getStatus())) {\n            category = Category.builder()\n                    .categoryName(articleVO.getCategoryName())\n                    .build();\n            categoryMapper.insert(category);\n        }\n        return category;\n    }",
        "description": "这段代码是一个私有方法，用于保存文章的分类信息。它首先通过分类名称从数据库中查询分类对象，如果查询结果为空且文章的状态不是草稿状态，就创建一个新的分类对象并插入到数据库中，最后返回该分类对象。",
        "label": "JavaMethod"
    },
    {
        "id": 839,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.notice( Comment comment, String fromNickname )",
        "comment": "",
        "content": "private void notice(Comment comment, String fromNickname) {\n        if (comment.getUserId().equals(comment.getReplyUserId())) {\n            if (Objects.nonNull(comment.getParentId())) {\n                Comment parentComment = commentMapper.selectById(comment.getParentId());\n                if (parentComment.getUserId().equals(comment.getUserId())) {\n                    return;\n                }\n            }\n        }\n        if (comment.getUserId().equals(BLOGGER_ID) && Objects.isNull(comment.getParentId())) {\n            return;\n        }\n        if (Objects.nonNull(comment.getParentId())) {\n            Comment parentComment = commentMapper.selectById(comment.getParentId());\n            if (!comment.getReplyUserId().equals(parentComment.getUserId())\n                    && !comment.getReplyUserId().equals(comment.getUserId())) {\n                UserInfo userInfo = userInfoMapper.selectById(comment.getUserId());\n                UserInfo replyUserinfo = userInfoMapper.selectById(comment.getReplyUserId());\n                Map<String, Object> map = new HashMap<>();\n                String topicId = Objects.nonNull(comment.getTopicId()) ? comment.getTopicId().toString() : \"\";\n                String url = websiteUrl + getCommentPath(comment.getType()) + topicId;\n                map.put(\"content\", userInfo.getNickname() + \"在\" + Objects.requireNonNull(getCommentEnum(comment.getType())).getDesc()\n                        + \"的评论区@了你，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n                EmailDTO emailDTO = EmailDTO.builder()\n                        .email(replyUserinfo.getEmail())\n                        .subject(MENTION_REMIND)\n                        .template(\"common.html\")\n                        .commentMap(map)\n                        .build();\n                rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n            }\n            if (comment.getUserId().equals(parentComment.getUserId())) {\n                return;\n            }\n        }\n        String title;\n        Integer userId = BLOGGER_ID;\n        String topicId = Objects.nonNull(comment.getTopicId()) ? comment.getTopicId().toString() : \"\";\n        if (Objects.nonNull(comment.getReplyUserId())) {\n            userId = comment.getReplyUserId();\n        } else {\n            switch (Objects.requireNonNull(getCommentEnum(comment.getType()))) {\n                case ARTICLE:\n                    userId = articleMapper.selectById(comment.getTopicId()).getUserId();\n                    break;\n                case TALK:\n                    userId = talkMapper.selectById(comment.getTopicId()).getUserId();\n                default:\n                    break;\n            }\n        }\n        if (Objects.requireNonNull(getCommentEnum(comment.getType())).equals(ARTICLE)) {\n            title = articleMapper.selectById(comment.getTopicId()).getArticleTitle();\n        } else {\n            title = Objects.requireNonNull(getCommentEnum(comment.getType())).getDesc();\n        }\n        UserInfo userInfo = userInfoMapper.selectById(userId);\n        if (StringUtils.isNotBlank(userInfo.getEmail())) {\n            EmailDTO emailDTO = getEmailDTO(comment, userInfo, fromNickname, topicId, title);\n            rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n        }\n    }",
        "description": "这段代码是用来发送评论通知邮件的方法，根据评论者、被评论者以及评论的类型和内容来生成邮件内容并发送。",
        "label": "JavaMethod"
    },
    {
        "id": 840,
        "fullName": "com.aurora.mapper.MenuMapper.listMenusByUserInfoId( Integer userInfoId )",
        "comment": "",
        "content": "List<Menu> listMenusByUserInfoId(Integer userInfoId);",
        "description": "根据用户信息ID获取菜单列表。",
        "label": "JavaMethod"
    },
    {
        "id": 841,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.listPhotoAlbumsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(ConditionVO conditionVO) {\n        Integer count = photoAlbumMapper.selectCount(new LambdaQueryWrapper<PhotoAlbum>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), PhotoAlbum::getAlbumName, conditionVO.getKeywords())\n                .eq(PhotoAlbum::getIsDelete, FALSE));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<PhotoAlbumAdminDTO> photoAlbumBacks = photoAlbumMapper.listPhotoAlbumsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(photoAlbumBacks, count);\n    }",
        "description": "该方法用于获取后台管理系统中的相册列表。根据传入的条件进行筛选，并返回符合条件的相册列表及总数。如果没有符合条件的相册，则返回一个空的分页结果对象。",
        "label": "JavaMethod"
    },
    {
        "id": 842,
        "fullName": "com.aurora.service.ArticleService.listArticlesBySearch( ConditionVO condition )",
        "comment": "",
        "content": "List<ArticleSearchDTO> listArticlesBySearch(ConditionVO condition);",
        "description": "根据条件搜索文章并返回文章列表。",
        "label": "JavaMethod"
    },
    {
        "id": 843,
        "fullName": "com.aurora.util.SpringUtil.getActiveProfile(  )",
        "comment": "",
        "content": "public static String getActiveProfile() {\n        final String[] activeProfiles = getActiveProfiles();\n        return activeProfiles != null && activeProfiles.length > 0 ? activeProfiles[0] : null;\n    }",
        "description": "该方法用于获取当前活动的配置文件的名称。",
        "label": "JavaMethod"
    },
    {
        "id": 844,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hGet( String key, String hashKey )",
        "comment": "",
        "content": "@Override\n    public Object hGet(String key, String hashKey) {\n        return redisTemplate.opsForHash().get(key, hashKey);\n    }",
        "description": "这段代码是一个方法，用于从Redis中获取指定key和hashKey对应的值。",
        "label": "JavaMethod"
    },
    {
        "id": 845,
        "fullName": "com.aurora.service.RedisService.sAdd( String key, Object values )",
        "comment": "",
        "content": "Long sAdd(String key, Object... values);",
        "description": "这段代码实现了向指定键值对应的集合中添加多个元素的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 846,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.checkCommentVO( CommentVO commentVO )",
        "comment": "",
        "content": "public void checkCommentVO(CommentVO commentVO) {\n        if (!types.contains(commentVO.getType())) {\n            throw new BizException(\"参数校验异常\");\n        }\n        if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ARTICLE || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == TALK) {\n            if (Objects.isNull(commentVO.getTopicId())) {\n                throw new BizException(\"参数校验异常\");\n            } else {\n                if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ARTICLE) {\n                    Article article = articleMapper.selectOne(new LambdaQueryWrapper<Article>().select(Article::getId, Article::getUserId).eq(Article::getId, commentVO.getTopicId()));\n                    if (Objects.isNull(article)) {\n                        throw new BizException(\"参数校验异常\");\n                    }\n                }\n                if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == TALK) {\n                    Talk talk = talkMapper.selectOne(new LambdaQueryWrapper<Talk>().select(Talk::getId, Talk::getUserId).eq(Talk::getId, commentVO.getTopicId()));\n                    if (Objects.isNull(talk)) {\n                        throw new BizException(\"参数校验异常\");\n                    }\n                }\n            }\n        }\n        if (Objects.requireNonNull(getCommentEnum(commentVO.getType())) == LINK\n                || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == ABOUT\n                || Objects.requireNonNull(getCommentEnum(commentVO.getType())) == MESSAGE) {\n            if (Objects.nonNull(commentVO.getTopicId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n        }\n        if (Objects.isNull(commentVO.getParentId())) {\n            if (Objects.nonNull(commentVO.getReplyUserId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n        }\n        if (Objects.nonNull(commentVO.getParentId())) {\n            Comment parentComment = commentMapper.selectOne(new LambdaQueryWrapper<Comment>().select(Comment::getId, Comment::getParentId, Comment::getType).eq(Comment::getId, commentVO.getParentId()));\n            if (Objects.isNull(parentComment)) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (Objects.nonNull(parentComment.getParentId())) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (!commentVO.getType().equals(parentComment.getType())) {\n                throw new BizException(\"参数校验异常\");\n            }\n            if (Objects.isNull(commentVO.getReplyUserId())) {\n                throw new BizException(\"参数校验异常\");\n            } else {\n                UserInfo existUser = userInfoMapper.selectOne(new LambdaQueryWrapper<UserInfo>().select(UserInfo::getId).eq(UserInfo::getId, commentVO.getReplyUserId()));\n                if (Objects.isNull(existUser)) {\n                    throw new BizException(\"参数校验异常\");\n                }\n            }\n        }\n    }",
        "description": "这段代码用于检查评论对象的有效性，包括评论类型、主题ID、父评论ID等参数的合法性。如果参数不符合要求，将抛出\"参数校验异常\"的业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 847,
        "fullName": "com.aurora.service.RoleService.deleteRoles( List<Integer> ids )",
        "comment": "",
        "content": "void deleteRoles(List<Integer> ids);",
        "description": "这段代码负责删除给定ID列表中的角色信息。",
        "label": "JavaMethod"
    },
    {
        "id": 848,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lPush( String key, Object value )",
        "comment": "",
        "content": "@Override\n    public Long lPush(String key, Object value) {\n        return redisTemplate.opsForList().rightPush(key, value);\n    }",
        "description": "这段代码是一个将值插入到Redis列表右侧的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 849,
        "fullName": "com.aurora.service.TagService.saveOrUpdateTag( TagVO tagVO )",
        "comment": "",
        "content": "void saveOrUpdateTag(TagVO tagVO);",
        "description": "这段代码定义了一个函数saveOrUpdateTag，用于保存或更新标签信息。",
        "label": "JavaMethod"
    },
    {
        "id": 850,
        "fullName": "com.aurora.service.impl.JobServiceImpl.updateSchedulerJob( Job job, String jobGroup )",
        "comment": "",
        "content": "@SneakyThrows\n    public void updateSchedulerJob(Job job, String jobGroup) {\n        Integer jobId = job.getId();\n        JobKey jobKey = ScheduleUtil.getJobKey(jobId, jobGroup);\n        if (scheduler.checkExists(jobKey)) {\n            scheduler.deleteJob(jobKey);\n        }\n        ScheduleUtil.createScheduleJob(scheduler, job);\n    }",
        "description": "这段代码用于更新调度作业，首先检查作业是否存在，如果存在则删除，然后创建新的调度作业。",
        "label": "JavaMethod"
    },
    {
        "id": 851,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.saveUserEmail( EmailVO emailVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveUserEmail(EmailVO emailVO) {\n        if (Objects.isNull(redisService.get(USER_CODE_KEY + emailVO.getEmail()))) {\n            throw new BizException(\"验证码错误\");\n        }\n        if (!emailVO.getCode().equals(redisService.get(USER_CODE_KEY + emailVO.getEmail()).toString())) {\n            throw new BizException(\"验证码错误！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .email(emailVO.getEmail())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }",
        "description": "这段代码是一个方法，用于保存用户的电子邮件地址，并在保存前验证验证码的正确性。如果验证码错误，则抛出业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 852,
        "fullName": "com.aurora.exception.TaskException.TaskException( String msg, Code code )",
        "comment": "",
        "content": "public TaskException(String msg, Code code) {\n        this(msg, code, null);\n    }",
        "description": "构造一个具有消息、代码和空异常的任务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 853,
        "fullName": "com.aurora.controller.CategoryController.listCategoriesAdminBySearch( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"搜索文章分类\")\n    @GetMapping(\"\/admin\/categories\/search\")\n    public ResultVO<List<CategoryOptionDTO>> listCategoriesAdminBySearch(ConditionVO conditionVO) {\n        return ResultVO.ok(categoryService.listCategoriesBySearch(conditionVO));\n    }",
        "description": "这段代码是一个用于搜索文章分类的接口，通过GET请求访问\"\/admin\/categories\/search\"路径。它接受一个ConditionVO对象作为参数，返回一个包含CategoryOptionDTO对象的ResultVO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 854,
        "fullName": "com.aurora.util.PageUtil.getPage(  )",
        "comment": "",
        "content": "public static Page<?> getPage() {\n        Page<?> page = PAGE_HOLDER.get();\n        if (Objects.isNull(page)) {\n            setCurrentPage(new Page<>());\n        }\n        return PAGE_HOLDER.get();\n    }",
        "description": "这段代码用于获取当前页面对象，如果当前页面对象为空则创建一个新的页面对象并返回。",
        "label": "JavaMethod"
    },
    {
        "id": 855,
        "fullName": "com.aurora.util.FileUtil.getMd5( InputStream inputStream )",
        "comment": "",
        "content": "public static String getMd5(InputStream inputStream) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"md5\");\n            byte[] buffer = new byte[8192];\n            int length;\n            while ((length = inputStream.read(buffer)) != -1) {\n                md5.update(buffer, 0, length);\n            }\n            return new String(Hex.encodeHex(md5.digest()));\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "description": "这段代码用于计算输入流的MD5哈希值并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 856,
        "fullName": "com.aurora.mapper.TalkMapper.listTalksAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<TalkAdminDTO> listTalksAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是用于获取博客系统中Talks的管理信息列表，接受当前页码、每页显示数量和条件VO作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 857,
        "fullName": "com.aurora.aspect.OperationLogAspect.operationLogPointCut(  )",
        "comment": "",
        "content": "@Pointcut(\"@annotation(com.aurora.annotation.OptLog)\")\n    public void operationLogPointCut() {\n    }",
        "description": "This code defines a pointcut for logging operations annotated with @OptLog in a blog system.",
        "label": "JavaMethod"
    },
    {
        "id": 858,
        "fullName": "com.aurora.config.RedisConfig.redisTemplate( RedisConnectionFactory factory )",
        "comment": "",
        "content": "@Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n        jackson2JsonRedisSerializer.setObjectMapper(mapper);\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }",
        "description": "这段代码是一个用于创建RedisTemplate对象的方法。它配置了RedisTemplate的连接工厂、序列化器和其他属性，以便于在博客系统中与Redis进行交互。",
        "label": "JavaMethod"
    },
    {
        "id": 859,
        "fullName": "com.aurora.controller.PhotoAlbumController.deletePhotoAlbumById( Integer albumId )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"根据id删除相册\")\n    @ApiImplicitParam(name = \"albumId\", value = \"相册id\", required = true, dataType = \"Integer\")\n    @DeleteMapping(\"\/admin\/photos\/albums\/{albumId}\")\n    public ResultVO<?> deletePhotoAlbumById(@PathVariable(\"albumId\") Integer albumId) {\n        photoAlbumService.deletePhotoAlbumById(albumId);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了根据相册id删除相册的功能，并记录了删除操作的日志。",
        "label": "JavaMethod"
    },
    {
        "id": 860,
        "fullName": "com.aurora.service.CommentService.listRepliesByCommentId( Integer commentId )",
        "comment": "",
        "content": "List<ReplyDTO> listRepliesByCommentId(Integer commentId);",
        "description": "该方法用于根据评论ID获取回复列表。",
        "label": "JavaMethod"
    },
    {
        "id": 861,
        "fullName": "com.aurora.service.JobLogService.deleteJobLogs( List<Integer> ids )",
        "comment": "",
        "content": "void deleteJobLogs(List<Integer> ids);",
        "description": "这段代码用于删除博客系统中指定id的工作日志。",
        "label": "JavaMethod"
    },
    {
        "id": 862,
        "fullName": "com.aurora.mapper.TalkMapper.getTalkById( Integer talkId )",
        "comment": "",
        "content": "TalkDTO getTalkById(@Param(\"talkId\") Integer talkId);",
        "description": "这段代码是一个博客系统的后端代码，它根据给定的talkId参数获取特定的TalkDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 863,
        "fullName": "com.aurora.interceptor.AccessLimitInterceptor.render( HttpServletResponse response, ResultVO<?> resultVO )",
        "comment": "",
        "content": "private void render(HttpServletResponse response, ResultVO<?> resultVO) throws Exception {\n        response.setContentType(APPLICATION_JSON);\n        OutputStream out = response.getOutputStream();\n        String str = JSON.toJSONString(resultVO);\n        out.write(str.getBytes(StandardCharsets.UTF_8));\n        out.flush();\n        out.close();\n    }",
        "description": "这段代码是一个用于渲染HTTP响应的方法，它将ResultVO对象转换为JSON格式并写入到响应流中。",
        "label": "JavaMethod"
    },
    {
        "id": 864,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.convertUserMenuList( List<Menu> catalogList, Map<Integer,List<Menu>> childrenMap )",
        "comment": "",
        "content": "private List<UserMenuDTO> convertUserMenuList(List<Menu> catalogList, Map<Integer, List<Menu>> childrenMap) {\n        return catalogList.stream().map(item -> {\n            UserMenuDTO userMenuDTO = new UserMenuDTO();\n            List<UserMenuDTO> list = new ArrayList<>();\n            List<Menu> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                userMenuDTO = BeanCopyUtil.copyObject(item, UserMenuDTO.class);\n                list = children.stream()\n                        .sorted(Comparator.comparing(Menu::getOrderNum))\n                        .map(menu -> {\n                            UserMenuDTO dto = BeanCopyUtil.copyObject(menu, UserMenuDTO.class);\n                            dto.setHidden(menu.getIsHidden().equals(TRUE));\n                            return dto;\n                        })\n                        .collect(Collectors.toList());\n            } else {\n                userMenuDTO.setPath(item.getPath());\n                userMenuDTO.setComponent(COMPONENT);\n                list.add(UserMenuDTO.builder()\n                        .path(\"\")\n                        .name(item.getName())\n                        .icon(item.getIcon())\n                        .component(item.getComponent())\n                        .build());\n            }\n            userMenuDTO.setHidden(item.getIsHidden().equals(TRUE));\n            userMenuDTO.setChildren(list);\n            return userMenuDTO;\n        }).collect(Collectors.toList());\n    }",
        "description": "这段代码用于将菜单列表转换为用户菜单DTO列表，并根据层级关系进行组装和排序。",
        "label": "JavaMethod"
    },
    {
        "id": 865,
        "fullName": "com.aurora.service.TalkService.saveOrUpdateTalk( TalkVO talkVO )",
        "comment": "",
        "content": "void saveOrUpdateTalk(TalkVO talkVO);",
        "description": "这段代码用于保存或更新一个谈话对象的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 866,
        "fullName": "com.aurora.controller.ResourceController.listResourceOption(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看角色资源选项\")\n    @GetMapping(\"\/admin\/role\/resources\")\n    public ResultVO<List<LabelOptionDTO>> listResourceOption() {\n        return ResultVO.ok(resourceService.listResourceOption());\n    }",
        "description": "该方法用于获取角色资源选项的接口，并返回一个包含资源选项的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 867,
        "fullName": "com.aurora.service.impl.JobServiceImpl.checkCronIsValid( JobVO jobVO )",
        "comment": "",
        "content": "private void checkCronIsValid(JobVO jobVO) {\n        boolean valid = CronUtil.isValid(jobVO.getCronExpression());\n        Assert.isTrue(valid, \"Cron表达式无效!\");\n    }",
        "description": "这段代码是一个私有方法，用于检查给定的JobVO对象中的Cron表达式是否有效。如果无效，将抛出一个断言异常。",
        "label": "JavaMethod"
    },
    {
        "id": 868,
        "fullName": "com.aurora.service.CategoryService.listCategoriesBySearch( ConditionVO conditionVO )",
        "comment": "",
        "content": "List<CategoryOptionDTO> listCategoriesBySearch(ConditionVO conditionVO);",
        "description": "这段代码是一个博客系统后端的方法，用于根据搜索条件查询并返回一个包含CategoryOptionDTO对象的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 869,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lPush( String key, Object value, long time )",
        "comment": "",
        "content": "@Override\n    public Long lPush(String key, Object value, long time) {\n        Long index = redisTemplate.opsForList().rightPush(key, value);\n        expire(key, time);\n        return index;\n    }",
        "description": "该方法实现了在Redis中将一个值插入到列表的左侧，并设置了过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 870,
        "fullName": "com.aurora.strategy.impl.OssUploadStrategyImpl.exists( String filePath )",
        "comment": "",
        "content": "@Override\n    public Boolean exists(String filePath) {\n        return getOssClient().doesObjectExist(ossConfigProperties.getBucketName(), filePath);\n    }",
        "description": "此方法用于检查指定文件路径在OSS存储桶中是否存在。",
        "label": "JavaMethod"
    },
    {
        "id": 871,
        "fullName": "com.aurora.service.TokenService.refreshToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "void refreshToken(UserDetailsDTO userDetailsDTO);",
        "description": "这段代码是一个用于刷新用户详细信息的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 872,
        "fullName": "com.aurora.controller.UserInfoController.listOnlineUsers( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看在线用户\")\n    @GetMapping(\"\/admin\/users\/online\")\n    public ResultVO<PageResultDTO<UserOnlineDTO>> listOnlineUsers(ConditionVO conditionVO) {\n        return ResultVO.ok(userInfoService.listOnlineUsers(conditionVO));\n    }",
        "description": "这段代码实现了一个用于查看在线用户的接口，接受条件参数并返回在线用户列表的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 873,
        "fullName": "com.aurora.service.RoleService.saveOrUpdateRole( RoleVO roleVO )",
        "comment": "",
        "content": "void saveOrUpdateRole(RoleVO roleVO);",
        "description": "该函数用于保存或更新角色信息。",
        "label": "JavaMethod"
    },
    {
        "id": 874,
        "fullName": "com.aurora.controller.UserInfoController.updateUserAvatar( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"更新用户头像\")\n    @ApiImplicitParam(name = \"file\", value = \"用户头像\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/users\/avatar\")\n    public ResultVO<String> updateUserAvatar(MultipartFile file) {\n        return ResultVO.ok(userInfoService.updateUserAvatar(file));\n    }",
        "description": "这段代码是一个用于更新用户头像的接口，通过接收用户上传的头像文件并调用userInfoService来更新用户头像信息。",
        "label": "JavaMethod"
    },
    {
        "id": 875,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.saveOrUpdateResource( ResourceVO resourceVO )",
        "comment": "",
        "content": "@Override\n    public void saveOrUpdateResource(ResourceVO resourceVO) {\n        Resource resource = BeanCopyUtil.copyObject(resourceVO, Resource.class);\n        this.saveOrUpdate(resource);\n        filterInvocationSecurityMetadataSource.clearDataSource();\n    }",
        "description": "这段代码实现了保存或更新资源的功能，首先将ResourceVO对象转换为Resource对象，然后调用saveOrUpdate方法进行保存或更新操作，最后清除数据源以更新权限配置。",
        "label": "JavaMethod"
    },
    {
        "id": 876,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.geoAdd( String key, Double x, Double y, String name )",
        "comment": "",
        "content": "@Override\n    public Long geoAdd(String key, Double x, Double y, String name) {\n        return redisTemplate.opsForGeo().add(key, new Point(x, y), name);\n    }",
        "description": "该方法用于向Redis的地理位置数据结构中添加一个地点及其经纬度信息。",
        "label": "JavaMethod"
    },
    {
        "id": 877,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.deletePhotos( List<Integer> photoIds )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void deletePhotos(List<Integer> photoIds) {\n        photoMapper.deleteBatchIds(photoIds);\n    }",
        "description": "这段代码实现了一个删除照片的方法，通过批量删除相应的照片记录。@Transactional注解表示在方法执行过程中发生异常时会进行事务回滚。",
        "label": "JavaMethod"
    },
    {
        "id": 878,
        "fullName": "com.aurora.mapper.RoleMapper.listRolesByUserInfoId( Integer userInfoId )",
        "comment": "",
        "content": "List<String> listRolesByUserInfoId(@Param(\"userInfoId\") Integer userInfoId);",
        "description": "根据用户信息ID查询角色列表。",
        "label": "JavaMethod"
    },
    {
        "id": 879,
        "fullName": "com.aurora.controller.JobController.getJobById( Integer jobId )",
        "comment": "",
        "content": "@ApiOperation(\"根据id获取任务\")\n    @GetMapping(\"\/admin\/jobs\/{id}\")\n    public ResultVO<JobDTO> getJobById(@PathVariable(\"id\") Integer jobId) {\n        return ResultVO.ok(jobService.getJobById(jobId));\n    }",
        "description": "根据id获取任务的接口，根据传入的任务id返回相应的任务信息。",
        "label": "JavaMethod"
    },
    {
        "id": 880,
        "fullName": "com.aurora.controller.TagController.listTagsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查询后台标签列表\")\n    @GetMapping(\"\/admin\/tags\")\n    public ResultVO<PageResultDTO<TagAdminDTO>> listTagsAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(tagService.listTagsAdmin(conditionVO));\n    }",
        "description": "这段代码实现了查询后台标签列表的功能，通过GET请求访问\"\/admin\/tags\"接口，返回包含标签列表的PageResultDTO<TagAdminDTO>对象。",
        "label": "JavaMethod"
    },
    {
        "id": 881,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.listMenuOptions(  )",
        "comment": "",
        "content": "@Override\n    public List<LabelOptionDTO> listMenuOptions() {\n        List<Menu> menus = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                .select(Menu::getId, Menu::getName, Menu::getParentId, Menu::getOrderNum));\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        return catalogs.stream().map(item -> {\n            List<LabelOptionDTO> list = new ArrayList<>();\n            List<Menu> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                list = children.stream()\n                        .sorted(Comparator.comparing(Menu::getOrderNum))\n                        .map(menu -> LabelOptionDTO.builder()\n                                .id(menu.getId())\n                                .label(menu.getName())\n                                .build())\n                        .collect(Collectors.toList());\n            }\n            return LabelOptionDTO.builder()\n                    .id(item.getId())\n                    .label(item.getName())\n                    .children(list)\n                    .build();\n        }).collect(Collectors.toList());\n    }",
        "description": "该方法用于获取菜单选项列表，首先从数据库中查询菜单数据，然后对菜单进行分类和排序，最终返回一个包含菜单选项DTO的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 882,
        "fullName": "com.aurora.service.ArticleService.accessArticle( ArticlePasswordVO articlePasswordVO )",
        "comment": "",
        "content": "void accessArticle(ArticlePasswordVO articlePasswordVO);",
        "description": "这段代码实现了访问文章的功能，需要输入文章密码作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 883,
        "fullName": "com.aurora.service.AuroraInfoService.getAuroraHomeInfo(  )",
        "comment": "",
        "content": "AuroraHomeInfoDTO getAuroraHomeInfo();",
        "description": "获取Aurora博客系统首页信息的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 884,
        "fullName": "com.aurora.strategy.ArticleImportStrategy.importArticles( MultipartFile file )",
        "comment": "",
        "content": "void importArticles(MultipartFile file);",
        "description": "importArticles方法用于导入文章文件。",
        "label": "JavaMethod"
    },
    {
        "id": 885,
        "fullName": "com.aurora.service.UserInfoService.updateUserInfo( UserInfoVO userInfoVO )",
        "comment": "",
        "content": "void updateUserInfo(UserInfoVO userInfoVO);",
        "description": "这段代码实现了一个用于更新用户信息的函数，参数为用户信息的值对象。",
        "label": "JavaMethod"
    },
    {
        "id": 886,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hSetAll( String key, Map<String,?> map )",
        "comment": "",
        "content": "@Override\n    public void hSetAll(String key, Map<String, ?> map) {\n        redisTemplate.opsForHash().putAll(key, map);\n    }",
        "description": "该方法用于向Redis中的指定key中存储一个Map类型的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 887,
        "fullName": "com.aurora.util.JobInvokeUtil.getMethodParamsValue( List<Object[]> methodParams )",
        "comment": "",
        "content": "public static Object[] getMethodParamsValue(List<Object[]> methodParams) {\n        Object[] classes = new Object[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classes[index] = os[0];\n            index++;\n        }\n        return classes;\n    }",
        "description": "该方法用于从给定的方法参数列表中提取参数值，并返回一个包含参数值的数组。",
        "label": "JavaMethod"
    },
    {
        "id": 888,
        "fullName": "com.aurora.service.RedisService.zReverseRangeWithScore( String key, long start, long end )",
        "comment": "",
        "content": "Map<Object, Double> zReverseRangeWithScore(String key, long start, long end);",
        "description": "该方法用于返回指定key中score在指定范围内的元素，并按照score值从大到小的顺序排列。",
        "label": "JavaMethod"
    },
    {
        "id": 889,
        "fullName": "com.aurora.controller.FriendLinkController.listFriendLinkDTO( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看后台友链列表\")\n    @GetMapping(\"\/admin\/links\")\n    public ResultVO<PageResultDTO<FriendLinkAdminDTO>> listFriendLinkDTO(ConditionVO conditionVO) {\n        return ResultVO.ok(friendLinkService.listFriendLinksAdmin(conditionVO));\n    }",
        "description": "这段代码是一个用于查看后台友链列表的接口，通过GET请求\/admin\/links可以获取友链列表数据，并返回一个包含友链信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 890,
        "fullName": "com.aurora.service.impl.JobLogServiceImpl.listJobLogGroups(  )",
        "comment": "",
        "content": "@Override\n    public List<String> listJobLogGroups() {\n        return jobLogMapper.listJobLogGroups();\n    }",
        "description": "该方法重写了接口中的方法，用于获取作业日志的分组信息列表。",
        "label": "JavaMethod"
    },
    {
        "id": 891,
        "fullName": "com.aurora.strategy.UploadStrategy.uploadFile( MultipartFile file, String path )",
        "comment": "",
        "content": "String uploadFile(MultipartFile file, String path);",
        "description": "这段代码是一个用于上传文件的方法，接受一个MultipartFile类型的文件和一个路径参数。",
        "label": "JavaMethod"
    },
    {
        "id": 892,
        "fullName": "com.aurora.service.RedisService.getExpire( String key )",
        "comment": "",
        "content": "Long getExpire(String key);",
        "description": "获取指定键值的过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 893,
        "fullName": "com.aurora.handler.AuthenticationEntryPointImpl.commence( HttpServletRequest request, HttpServletResponse response, AuthenticationException authException )",
        "comment": "",
        "content": "@Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.fail(40001, \"用户未登录\")));\n    }",
        "description": "这段代码是用于处理用户未登录情况的逻辑，在用户未登录时返回一个错误信息。",
        "label": "JavaMethod"
    },
    {
        "id": 894,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.saveUserDetail( SocialTokenDTO socialToken, String ipAddress, String ipSource )",
        "comment": "",
        "content": "private UserDetailsDTO saveUserDetail(SocialTokenDTO socialToken, String ipAddress, String ipSource) {\n        SocialUserInfoDTO socialUserInfo = getSocialUserInfo(socialToken);\n        UserInfo userInfo = UserInfo.builder()\n                .nickname(socialUserInfo.getNickname())\n                .avatar(socialUserInfo.getAvatar())\n                .build();\n        userInfoMapper.insert(userInfo);\n        UserAuth userAuth = UserAuth.builder()\n                .userInfoId(userInfo.getId())\n                .username(socialToken.getOpenId())\n                .password(socialToken.getAccessToken())\n                .loginType(socialToken.getLoginType())\n                .lastLoginTime(LocalDateTime.now())\n                .ipAddress(ipAddress)\n                .ipSource(ipSource)\n                .build();\n        userAuthMapper.insert(userAuth);\n        UserRole userRole = UserRole.builder()\n                .userId(userInfo.getId())\n                .roleId(RoleEnum.USER.getRoleId())\n                .build();\n        userRoleMapper.insert(userRole);\n        return userDetailService.convertUserDetail(userAuth, request);\n    }",
        "description": "该代码段实现了保存用户详细信息的功能，包括保存用户的昵称、头像等信息，并将用户的登录信息、角色信息等保存到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 895,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.saveOrUpdateMenu( MenuVO menuVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdateMenu(MenuVO menuVO) {\n        Menu menu = BeanCopyUtil.copyObject(menuVO, Menu.class);\n        this.saveOrUpdate(menu);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于保存或更新菜单信息。在方法上使用了@Transactional注解，表示在方法执行过程中如果发生异常，则进行事务回滚。方法内部首先将传入的MenuVO对象转换为Menu对象，然后调用saveOrUpdate方法保存或更新菜单信息。",
        "label": "JavaMethod"
    },
    {
        "id": 896,
        "fullName": "com.aurora.config.RabbitMQConfig.emailExchange(  )",
        "comment": "",
        "content": "@Bean\n    public FanoutExchange emailExchange() {\n        return new FanoutExchange(EMAIL_EXCHANGE, true, false);\n    }",
        "description": "这段代码创建了一个名为\"emailExchange\"的FanoutExchange实例，用于处理邮件相关的消息。",
        "label": "JavaMethod"
    },
    {
        "id": 897,
        "fullName": "com.aurora.util.SpringUtil.getBean( String name )",
        "comment": "",
        "content": "public static <T> T getBean(String name) throws BeansException {\n        return (T) beanFactory.getBean(name);\n    }",
        "description": "这段代码实现了通过名称获取bean对象的功能，返回指定类型的bean对象。",
        "label": "JavaMethod"
    },
    {
        "id": 898,
        "fullName": "com.aurora.service.PhotoService.savePhotos( PhotoVO photoVO )",
        "comment": "",
        "content": "void savePhotos(PhotoVO photoVO);",
        "description": "保存照片信息的函数，参数为PhotoVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 899,
        "fullName": "com.aurora.controller.ArticleController.listArticlesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(\"获取后台文章\")\n    @GetMapping(\"\/admin\/articles\")\n    public ResultVO<PageResultDTO<ArticleAdminDTO>> listArticlesAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(articleService.listArticlesAdmin(conditionVO));\n    }",
        "description": "这段代码是用于获取后台文章的接口，通过传入条件参数获取文章列表并返回给前端。",
        "label": "JavaMethod"
    },
    {
        "id": 900,
        "fullName": "com.aurora.service.UserInfoService.getUserInfoById( Integer id )",
        "comment": "",
        "content": "UserInfoDTO getUserInfoById(Integer id);",
        "description": "这段代码是一个后端接口函数，用于根据用户id获取用户信息。",
        "label": "JavaMethod"
    },
    {
        "id": 901,
        "fullName": "com.aurora.service.ResourceService.listResourceOption(  )",
        "comment": "",
        "content": "List<LabelOptionDTO> listResourceOption();",
        "description": "该方法返回一个包含标签选项DTO的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 902,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hDecr( String key, String hashKey, Long delta )",
        "comment": "",
        "content": "@Override\n    public Long hDecr(String key, String hashKey, Long delta) {\n        return redisTemplate.opsForHash().increment(key, hashKey, -delta);\n    }",
        "description": "这段代码实现了对Redis中哈希键值对的值进行减法操作。",
        "label": "JavaMethod"
    },
    {
        "id": 903,
        "fullName": "com.aurora.service.RedisService.expire( String key, long time )",
        "comment": "",
        "content": "Boolean expire(String key, long time);",
        "description": "expire方法用于设置指定key的过期时间，单位为毫秒。如果设置成功，返回true；设置失败或key不存在时返回false。",
        "label": "JavaMethod"
    },
    {
        "id": 904,
        "fullName": "com.aurora.controller.AuroraInfoController.savePhotoAlbumCover( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传博客配置图片\")\n    @ApiImplicitParam(name = \"file\", value = \"图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/config\/images\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.CONFIG.getPath()));\n    }",
        "description": "这段代码是一个用于上传博客配置图片的接口，通过接收一个图片文件参数，将其保存到指定的路径，并返回一个包含上传结果的字符串。",
        "label": "JavaMethod"
    },
    {
        "id": 905,
        "fullName": "com.aurora.util.PageUtil.getLimitCurrent(  )",
        "comment": "",
        "content": "public static Long getLimitCurrent() {\n        return (getCurrent() - 1) * getSize();\n    }",
        "description": "该方法用于计算当前页的数据起始位置。",
        "label": "JavaMethod"
    },
    {
        "id": 906,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.listCommentsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<CommentAdminDTO> listCommentsAdmin(ConditionVO conditionVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> commentMapper.countComments(conditionVO));\n        List<CommentAdminDTO> commentBackDTOList = commentMapper.listCommentsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(commentBackDTOList, asyncCount.get());\n    }",
        "description": "这段代码是一个后端方法，用于获取管理员评论列表并返回带有总评论数的分页结果。其中使用了CompletableFuture来异步获取评论总数，并通过PageUtil来实现分页功能。",
        "label": "JavaMethod"
    },
    {
        "id": 907,
        "fullName": "com.aurora.controller.UserInfoController.removeOnlineUser( Integer userInfoId )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"下线用户\")\n    @DeleteMapping(\"\/admin\/users\/{userInfoId}\/online\")\n    public ResultVO<?> removeOnlineUser(@PathVariable(\"userInfoId\") Integer userInfoId) {\n        userInfoService.removeOnlineUser(userInfoId);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于下线用户的接口，通过调用userInfoService的方法来实现删除在线用户的操作。",
        "label": "JavaMethod"
    },
    {
        "id": 908,
        "fullName": "com.aurora.util.CronUtil.getNextExecution( String cronExpression )",
        "comment": "",
        "content": "public static Date getNextExecution(String cronExpression) {\n        try {\n            CronExpression cron = new CronExpression(cronExpression);\n            return cron.getNextValidTimeAfter(new Date(System.currentTimeMillis()));\n        } catch (Exception e) {\n            throw new IllegalArgumentException(e.getMessage());\n        }\n    }",
        "description": "该方法根据给定的cron表达式计算下一个执行时间。",
        "label": "JavaMethod"
    },
    {
        "id": 909,
        "fullName": "com.aurora.service.CategoryService.listCategoriesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<CategoryAdminDTO> listCategoriesAdmin(ConditionVO conditionVO);",
        "description": "该方法用于返回满足指定条件的后台管理类别列表页面的结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 910,
        "fullName": "com.aurora.service.RedisService.hHasKey( String key, String hashKey )",
        "comment": "",
        "content": "Boolean hHasKey(String key, String hashKey);",
        "description": "该方法用于判断指定的哈希键是否存在于给定的键中。",
        "label": "JavaMethod"
    },
    {
        "id": 911,
        "fullName": "com.aurora.controller.CategoryController.listCategoriesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看后台分类列表\")\n    @GetMapping(\"\/admin\/categories\")\n    public ResultVO<PageResultDTO<CategoryAdminDTO>> listCategoriesAdmin(ConditionVO conditionVO) {\n        return ResultVO.ok(categoryService.listCategoriesAdmin(conditionVO));\n    }",
        "description": "这段代码实现了一个接口，用于查看后台分类列表。接口路径为\"\/admin\/categories\"，接受一个条件参数conditionVO，返回一个包含CategoryAdminDTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 912,
        "fullName": "com.aurora.util.SpringUtil.postProcessBeanFactory( ConfigurableListableBeanFactory beanFactory )",
        "comment": "",
        "content": "@Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        SpringUtil.beanFactory = beanFactory;\n    }",
        "description": "在博客系统的后端代码中，通过实现postProcessBeanFactory方法将可配置的Bean工厂传入SpringUtil中。",
        "label": "JavaMethod"
    },
    {
        "id": 913,
        "fullName": "com.aurora.interceptor.PaginationInterceptor.preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )",
        "comment": "",
        "content": "@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        String currentPage = request.getParameter(CURRENT);\n        String pageSize = Optional.ofNullable(request.getParameter(SIZE)).orElse(DEFAULT_SIZE);\n        if (!Objects.isNull(currentPage) && !StringUtils.isEmpty(currentPage)) {\n            PageUtil.setCurrentPage(new Page<>(Long.parseLong(currentPage), Long.parseLong(pageSize)));\n        }\n        return true;\n    }",
        "description": "该方法用于处理前置请求，根据请求中的参数设置当前页码和页面大小。",
        "label": "JavaMethod"
    },
    {
        "id": 914,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.updateArticleTopAndFeatured( ArticleTopFeaturedVO articleTopFeaturedVO )",
        "comment": "",
        "content": "@Override\n    public void updateArticleTopAndFeatured(ArticleTopFeaturedVO articleTopFeaturedVO) {\n        Article article = Article.builder()\n                .id(articleTopFeaturedVO.getId())\n                .isTop(articleTopFeaturedVO.getIsTop())\n                .isFeatured(articleTopFeaturedVO.getIsFeatured())\n                .build();\n        articleMapper.updateById(article);\n    }",
        "description": "该方法用于更新文章的置顶和精选状态，根据传入的ArticleTopFeaturedVO对象中的参数进行更新。",
        "label": "JavaMethod"
    },
    {
        "id": 915,
        "fullName": "com.aurora.controller.AuroraInfoController.getBlogBackInfo(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取系统后台信息\")\n    @GetMapping(\"\/admin\")\n    public ResultVO<AuroraAdminInfoDTO> getBlogBackInfo() {\n        return ResultVO.ok(auroraInfoService.getAuroraAdminInfo());\n    }",
        "description": "该代码是一个用于获取系统后台信息的接口，通过调用auroraInfoService的方法来获取AuroraAdminInfoDTO对象，并将其封装在ResultVO中返回。",
        "label": "JavaMethod"
    },
    {
        "id": 916,
        "fullName": "com.aurora.controller.PhotoController.savePhotoAlbumCover( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传照片\")\n    @ApiImplicitParam(name = \"file\", value = \"照片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/photos\/upload\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\n    }",
        "description": "这段代码是一个博客系统的后端接口，用于上传照片。通过使用@RequestParam注解将照片文件作为参数传递给savePhotoAlbumCover方法，然后调用uploadStrategyContext.executeUploadStrategy方法执行上传策略，并返回上传后的文件路径。",
        "label": "JavaMethod"
    },
    {
        "id": 917,
        "fullName": "com.aurora.controller.ArticleController.getArticleById( Integer articleId )",
        "comment": "",
        "content": "@ApiOperation(\"根据id获取文章\")\n    @GetMapping(\"\/articles\/{articleId}\")\n    public ResultVO<ArticleDTO> getArticleById(@PathVariable(\"articleId\") Integer articleId) {\n        return ResultVO.ok(articleService.getArticleById(articleId));\n    }",
        "description": "根据id获取文章的API，通过传入文章id来获取相应的文章信息。",
        "label": "JavaMethod"
    },
    {
        "id": 918,
        "fullName": "com.aurora.mapper.ArticleMapper.getLastArticle(  )",
        "comment": "",
        "content": "ArticleCardDTO getLastArticle();",
        "description": "获取最新的文章卡片数据。",
        "label": "JavaMethod"
    },
    {
        "id": 919,
        "fullName": "com.aurora.service.OperationLogService.listOperationLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<OperationLogDTO> listOperationLogs(ConditionVO conditionVO);",
        "description": "这段代码是用来根据条件VO获取操作日志DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 920,
        "fullName": "com.aurora.quartz.AuroraQuartz.clear(  )",
        "comment": "",
        "content": "public void clear() {\n        redisService.del(UNIQUE_VISITOR);\n        redisService.del(VISITOR_AREA);\n    }",
        "description": "该方法用于清除博客系统中的唯一访客和访客地区的Redis缓存。",
        "label": "JavaMethod"
    },
    {
        "id": 921,
        "fullName": "com.aurora.controller.ExceptionLogController.deleteExceptionLogs( List<Integer> exceptionLogIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除异常日志\")\n    @DeleteMapping(\"\/admin\/exception\/logs\")\n    public ResultVO<?> deleteExceptionLogs(@RequestBody List<Integer> exceptionLogIds) {\n        exceptionLogService.removeByIds(exceptionLogIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了删除异常日志的功能，通过接收前端传递的异常日志ID列表，然后调用异常日志服务的removeByIds方法进行删除操作，最后返回一个成功的结果VO。",
        "label": "JavaMethod"
    },
    {
        "id": 922,
        "fullName": "com.aurora.controller.TagController.deleteTag( List<Integer> tagIdList )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除标签\")\n    @DeleteMapping(\"\/admin\/tags\")\n    public ResultVO<?> deleteTag(@RequestBody List<Integer> tagIdList) {\n        tagService.deleteTag(tagIdList);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个后端接口，用于删除标签，接收一个整数列表作为参数并调用标签服务删除对应的标签。",
        "label": "JavaMethod"
    },
    {
        "id": 923,
        "fullName": "com.aurora.service.RedisService.lPush( String key, Object value, long time )",
        "comment": "",
        "content": "Long lPush(String key, Object value, long time);",
        "description": "这段代码实现了向指定key的列表中左侧插入一个元素，并设置该元素的过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 924,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.getUsername(  )",
        "comment": "",
        "content": "@Override\n    public String getUsername() {\n        return username;\n    }",
        "description": "这段代码是一个重写的方法，用于获取用户名。",
        "label": "JavaMethod"
    },
    {
        "id": 925,
        "fullName": "com.aurora.service.impl.TagServiceImpl.listTagsAdminBySearch( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public List<TagAdminDTO> listTagsAdminBySearch(ConditionVO conditionVO) {\n        List<Tag> tags = tagMapper.selectList(new LambdaQueryWrapper<Tag>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Tag::getTagName, conditionVO.getKeywords())\n                .orderByDesc(Tag::getId));\n        return BeanCopyUtil.copyList(tags, TagAdminDTO.class);\n    }",
        "description": "这段代码实现了根据条件搜索标签列表，并将结果转换为管理员标签DTO列表返回。使用了Lombok的@SneakyThrows注解，通过LambdaQueryWrapper实现了按照标签ID倒序排序。",
        "label": "JavaMethod"
    },
    {
        "id": 926,
        "fullName": "com.aurora.controller.PhotoAlbumController.getPhotoAlbumBackById( Integer albumId )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据id获取后台相册信息\")\n    @ApiImplicitParam(name = \"albumId\", value = \"相册id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/photos\/albums\/{albumId}\/info\")\n    public ResultVO<PhotoAlbumAdminDTO> getPhotoAlbumBackById(@PathVariable(\"albumId\") Integer albumId) {\n        return ResultVO.ok(photoAlbumService.getPhotoAlbumByIdAdmin(albumId));\n    }",
        "description": "根据相册id获取后台相册信息的接口。",
        "label": "JavaMethod"
    },
    {
        "id": 927,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.geoCalculationDistance( String key, String placeOne, String placeTow )",
        "comment": "",
        "content": "@Override\n    public Distance geoCalculationDistance(String key, String placeOne, String placeTow) {\n        return redisTemplate.opsForGeo()\n                .distance(key, placeOne, placeTow, RedisGeoCommands.DistanceUnit.KILOMETERS);\n    }",
        "description": "这段代码是一个后端方法，用于计算两个地点之间的距离，并返回以公里为单位的距离值。",
        "label": "JavaMethod"
    },
    {
        "id": 928,
        "fullName": "com.aurora.controller.BizExceptionController.handleBizException( HttpServletRequest request )",
        "comment": "",
        "content": "@SneakyThrows\n    @ApiOperation(\"\/处理BizException\")\n    @RequestMapping(\"\/bizException\")\n    public void handleBizException(HttpServletRequest request) {\n        if (request.getAttribute(\"bizException\") instanceof BizException) {\n            System.out.println(request.getAttribute(\"bizException\"));\n            throw ((BizException) request.getAttribute(\"bizException\"));\n        } else {\n            throw new Exception();\n        }\n    }",
        "description": "这段代码是一个处理BizException的方法，通过判断request中的属性是否为BizException来进行异常处理。",
        "label": "JavaMethod"
    },
    {
        "id": 929,
        "fullName": "com.aurora.strategy.UploadStrategy.uploadFile( String fileName, InputStream inputStream, String path )",
        "comment": "",
        "content": "String uploadFile(String fileName, InputStream inputStream, String path);",
        "description": "这段代码是一个用于上传文件的方法，接收文件名、输入流和路径作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 930,
        "fullName": "com.aurora.mapper.CommentMapper.listCommentsAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<CommentAdminDTO> listCommentsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "该方法用于根据条件查询评论信息并以CommentAdminDTO类型的列表形式返回，其中包含分页查询的参数和查询条件。",
        "label": "JavaMethod"
    },
    {
        "id": 931,
        "fullName": "com.aurora.service.UserInfoService.updateUserAvatar( MultipartFile file )",
        "comment": "",
        "content": "String updateUserAvatar(MultipartFile file);",
        "description": "这段代码是用来更新用户头像的，接收一个MultipartFile类型的文件作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 932,
        "fullName": "com.aurora.service.RedisService.set( String key, Object value, long time )",
        "comment": "",
        "content": "void set(String key, Object value, long time);",
        "description": "这段代码是一个用于设置缓存数据的方法，可以根据指定的键值和时间将数据存储到缓存中。",
        "label": "JavaMethod"
    },
    {
        "id": 933,
        "fullName": "com.aurora.util.JobInvokeUtil.getMethodParams( String invokeTarget )",
        "comment": "",
        "content": "public static List<Object[]> getMethodParams(String invokeTarget) {\n        String methodStr = StringUtils.substringBetween(invokeTarget, \"(\", \")\");\n        if (StringUtils.isEmpty(methodStr)) {\n            return null;\n        }\n        String[] methodParams = methodStr.split(\",\");\n        List<Object[]> classes = new LinkedList<>();\n        for (String methodParam : methodParams) {\n            String str = StringUtils.trimToEmpty(methodParam);\n            if (StringUtils.contains(str, \"'\")) {\n                classes.add(new Object[]{StringUtils.replace(str, \"'\", \"\"), String.class});\n            } else if (StringUtils.equals(str, \"true\") || StringUtils.equalsIgnoreCase(str, \"false\")) {\n                classes.add(new Object[]{Boolean.valueOf(str), Boolean.class});\n            } else if (StringUtils.containsIgnoreCase(str, \"L\")) {\n                classes.add(new Object[]{Long.valueOf(StringUtils.replaceIgnoreCase(str, \"L\", \"\")), Long.class});\n            } else if (StringUtils.containsIgnoreCase(str, \"D\")) {\n                classes.add(new Object[]{Double.valueOf(StringUtils.replaceIgnoreCase(str, \"D\", \"\")), Double.class});\n            } else {\n                classes.add(new Object[]{Integer.valueOf(str), Integer.class});\n            }\n        }\n        return classes;\n    }",
        "description": "这段代码是一个用于获取方法参数的函数。它首先从一个字符串中提取出方法参数的部分，并将其按逗号分隔成一个数组。然后，根据参数的类型将每个参数转换成对应的对象数组，并将它们添加到一个链表中。最后，返回包含所有参数的链表。",
        "label": "JavaMethod"
    },
    {
        "id": 934,
        "fullName": "com.aurora.controller.CategoryController.listCategories(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取所有分类\")\n    @GetMapping(\"\/categories\/all\")\n    public ResultVO<List<CategoryDTO>> listCategories() {\n        return ResultVO.ok(categoryService.listCategories());\n    }",
        "description": "这段代码是用来获取所有分类信息的后端接口，使用GetMapping注解指定了路径为\/categories\/all，返回一个包含分类DTO列表的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 935,
        "fullName": "com.aurora.service.MenuService.listUserMenus(  )",
        "comment": "",
        "content": "List<UserMenuDTO> listUserMenus();",
        "description": "该方法用于获取用户菜单列表。",
        "label": "JavaMethod"
    },
    {
        "id": 936,
        "fullName": "com.aurora.service.impl.JobServiceImpl.deleteJobs( List<Integer> tagIds )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deleteJobs(List<Integer> tagIds) {\n        List<Job> jobs = jobMapper.selectList(new LambdaQueryWrapper<Job>().in(Job::getId, tagIds));\n        int row = jobMapper.delete(new LambdaQueryWrapper<Job>().in(Job::getId, tagIds));\n        if (row > 0) {\n            jobs.forEach(item -> {\n                try {\n                    scheduler.deleteJob(ScheduleUtil.getJobKey(item.getId(), item.getJobGroup()));\n                } catch (SchedulerException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n        }\n    }",
        "description": "删除指定标签下的任务，并同时删除对应的调度任务。",
        "label": "JavaMethod"
    },
    {
        "id": 937,
        "fullName": "com.aurora.service.RedisService.hGet( String key, String hashKey )",
        "comment": "",
        "content": "Object hGet(String key, String hashKey);",
        "description": "该函数用于从指定的哈希表中获取特定键的值。",
        "label": "JavaMethod"
    },
    {
        "id": 938,
        "fullName": "com.aurora.controller.AuroraInfoController.getBlogHomeInfo(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取系统信息\")\n    @GetMapping(\"\/\")\n    public ResultVO<AuroraHomeInfoDTO> getBlogHomeInfo() {\n        return ResultVO.ok(auroraInfoService.getAuroraHomeInfo());\n    }",
        "description": "这段代码是一个用于获取博客系统首页信息的接口。",
        "label": "JavaMethod"
    },
    {
        "id": 939,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hyperGet( String key )",
        "comment": "",
        "content": "@Override\n    public Long hyperGet(String... key) {\n        return redisTemplate.opsForHyperLogLog().size(key);\n    }",
        "description": "该方法用于获取Redis中HyperLogLog数据结构的基数大小。",
        "label": "JavaMethod"
    },
    {
        "id": 940,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.report(  )",
        "comment": "",
        "content": "@Override\n    public void report() {\n        String ipAddress = IpUtil.getIpAddress(request);\n        UserAgent userAgent = IpUtil.getUserAgent(request);\n        Browser browser = userAgent.getBrowser();\n        OperatingSystem operatingSystem = userAgent.getOperatingSystem();\n        String uuid = ipAddress + browser.getName() + operatingSystem.getName();\n        String md5 = DigestUtils.md5DigestAsHex(uuid.getBytes());\n        if (!redisService.sIsMember(UNIQUE_VISITOR, md5)) {\n            String ipSource = IpUtil.getIpSource(ipAddress);\n            if (StringUtils.isNotBlank(ipSource)) {\n                String ipProvince = IpUtil.getIpProvince(ipSource);\n                redisService.hIncr(VISITOR_AREA, ipProvince, 1L);\n            } else {\n                redisService.hIncr(VISITOR_AREA, UNKNOWN, 1L);\n            }\n            redisService.incr(BLOG_VIEWS_COUNT, 1);\n            redisService.sAdd(UNIQUE_VISITOR, md5);\n        }\n    }",
        "description": "该方法用于统计用户访问信息，包括获取用户的IP地址、浏览器和操作系统信息，并通过MD5加密生成唯一标识。然后判断是否为新访客，若是则统计访客地区信息和博客浏览量，并将访客信息存入Redis数据库。",
        "label": "JavaMethod"
    },
    {
        "id": 941,
        "fullName": "com.aurora.service.JobService.getJobById( Integer jobId )",
        "comment": "",
        "content": "JobDTO getJobById(Integer jobId);",
        "description": "根据传入的jobId获取对应的职位信息。",
        "label": "JavaMethod"
    },
    {
        "id": 942,
        "fullName": "com.aurora.mapper.ArticleMapper.getArticlesByCategoryId( Long current, Long size, Integer categoryId )",
        "comment": "",
        "content": "List<ArticleCardDTO> getArticlesByCategoryId(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"categoryId\") Integer categoryId);",
        "description": "这段代码是一个获取特定类别下文章列表的方法。方法接收三个参数：current表示当前页数，size表示每页显示的数量，categoryId表示类别的ID。方法返回一个包含文章摘要信息的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 943,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.decr( String key, long delta )",
        "comment": "",
        "content": "@Override\n    public Long decr(String key, long delta) {\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }",
        "description": "这段代码实现了对Redis中指定key的值减去delta的操作。",
        "label": "JavaMethod"
    },
    {
        "id": 944,
        "fullName": "com.aurora.util.CronUtil.isValid( String cronExpression )",
        "comment": "",
        "content": "public static boolean isValid(String cronExpression) {\n        return CronExpression.isValidExpression(cronExpression);\n    }",
        "description": "这段代码是一个静态方法，用于检查给定的cron表达式是否有效。它调用了CronExpression类的isValidExpression方法来完成检查。",
        "label": "JavaMethod"
    },
    {
        "id": 945,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.listPhotoAlbums(  )",
        "comment": "",
        "content": "@Override\n    public List<PhotoAlbumDTO> listPhotoAlbums() {\n        List<PhotoAlbum> photoAlbumList = photoAlbumMapper.selectList(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getStatus, PUBLIC.getStatus())\n                .eq(PhotoAlbum::getIsDelete, FALSE)\n                .orderByDesc(PhotoAlbum::getId));\n        return BeanCopyUtil.copyList(photoAlbumList, PhotoAlbumDTO.class);\n    }",
        "description": "该方法用于获取相册列表，查询条件为状态为公开且未删除的相册，并按照相册ID倒序排序，返回相册DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 946,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.listRepliesByCommentId( Integer commentId )",
        "comment": "",
        "content": "@Override\n    public List<ReplyDTO> listRepliesByCommentId(Integer commentId) {\n        return commentMapper.listReplies(Collections.singletonList(commentId));\n    }",
        "description": "根据评论ID返回对应的回复列表。",
        "label": "JavaMethod"
    },
    {
        "id": 947,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sAdd( String key, Object values )",
        "comment": "",
        "content": "@Override\n    public Long sAdd(String key, Object... values) {\n        return redisTemplate.opsForSet().add(key, values);\n    }",
        "description": "该方法实现了向 Redis 中指定 key 的集合中添加多个元素的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 948,
        "fullName": "com.aurora.mapper.CommentMapper.listReplies( List<Integer> commentIdList )",
        "comment": "",
        "content": "List<ReplyDTO> listReplies(@Param(\"commentIds\") List<Integer> commentIdList);",
        "description": "这段代码是一个用于获取评论ID列表对应的回复列表的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 949,
        "fullName": "com.aurora.service.RedisService.hasKey( String key )",
        "comment": "",
        "content": "Boolean hasKey(String key);",
        "description": "该方法用于检查给定的关键字是否存在。",
        "label": "JavaMethod"
    },
    {
        "id": 950,
        "fullName": "com.aurora.service.RedisService.lIndex( String key, long index )",
        "comment": "",
        "content": "Object lIndex(String key, long index);",
        "description": "该方法用于从指定键的列表中获取指定索引位置的元素。",
        "label": "JavaMethod"
    },
    {
        "id": 951,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.getAuthorities(  )",
        "comment": "",
        "content": "@Override\n    @Transient\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toSet());\n    }",
        "description": "该方法用于获取用户的权限集合，通过将用户角色转换为SimpleGrantedAuthority对象，并将其收集到一个集合中返回。",
        "label": "JavaMethod"
    },
    {
        "id": 952,
        "fullName": "com.aurora.mapper.ArticleMapper.listArticlesByTagId( Long current, Long size, Integer tagId )",
        "comment": "",
        "content": "List<ArticleCardDTO> listArticlesByTagId(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"tagId\") Integer tagId);",
        "description": "根据标签ID获取文章卡片DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 953,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.generalKey(  )",
        "comment": "",
        "content": "public SecretKey generalKey() {\n        byte[] encodedKey = Base64.getDecoder().decode(secret);\n        return new SecretKeySpec(encodedKey, 0, encodedKey.length, \"AES\");\n    }",
        "description": "这段代码是一个用于生成密钥的方法，它首先使用Base64解码一个字符串，并将结果存储在一个字节数组中，然后使用该字节数组生成一个AES密钥对象。",
        "label": "JavaMethod"
    },
    {
        "id": 954,
        "fullName": "com.aurora.strategy.impl.EsSearchStrategyImpl.buildQuery( String keywords )",
        "comment": "",
        "content": "private NativeSearchQueryBuilder buildQuery(String keywords) {\n        NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must(QueryBuilders.boolQuery().should(QueryBuilders.matchQuery(\"articleTitle\", keywords))\n                        .should(QueryBuilders.matchQuery(\"articleContent\", keywords)))\n                .must(QueryBuilders.termQuery(\"isDelete\", FALSE))\n                .must(QueryBuilders.termQuery(\"status\", PUBLIC.getStatus()));\n        nativeSearchQueryBuilder.withQuery(boolQueryBuilder);\n        return nativeSearchQueryBuilder;\n    }",
        "description": "这段代码是用于构建一个基于关键词搜索的查询构造器，包括文章标题和内容的匹配查询，同时限定了文章未被删除且状态为公开的条件。",
        "label": "JavaMethod"
    },
    {
        "id": 955,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.parseToken( String token )",
        "comment": "",
        "content": "@Override\n    public Claims parseToken(String token) {\n        SecretKey secretKey = generalKey();\n        return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody();\n    }",
        "description": "这段代码是一个方法，用于解析用户传入的令牌并返回令牌中的声明。它首先生成一个秘钥，然后使用该秘钥对令牌进行解析，最终返回令牌中的声明信息。",
        "label": "JavaMethod"
    },
    {
        "id": 956,
        "fullName": "com.aurora.service.CommentService.listComments( CommentVO commentVO )",
        "comment": "",
        "content": "PageResultDTO<CommentDTO> listComments(CommentVO commentVO);",
        "description": "这段代码是一个用于获取评论列表的方法，接收一个评论视图对象作为参数，并返回一个包含评论数据的分页结果对象。",
        "label": "JavaMethod"
    },
    {
        "id": 957,
        "fullName": "com.aurora.service.impl.RoleServiceImpl.saveOrUpdateRole( RoleVO roleVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void saveOrUpdateRole(RoleVO roleVO) {\n        Role roleCheck = roleMapper.selectOne(new LambdaQueryWrapper<Role>()\n                .select(Role::getId)\n                .eq(Role::getRoleName, roleVO.getRoleName()));\n        if (Objects.nonNull(roleCheck) && !(roleCheck.getId().equals(roleVO.getId()))) {\n            throw new BizException(\"该角色存在\");\n        }\n        Role role = Role.builder()\n                .id(roleVO.getId())\n                .roleName(roleVO.getRoleName())\n                .isDisable(CommonConstant.FALSE)\n                .build();\n        this.saveOrUpdate(role);\n        if (Objects.nonNull(roleVO.getResourceIds())) {\n            if (Objects.nonNull(roleVO.getId())) {\n                roleResourceService.remove(new LambdaQueryWrapper<RoleResource>()\n                        .eq(RoleResource::getRoleId, roleVO.getId()));\n            }\n            List<RoleResource> roleResourceList = roleVO.getResourceIds().stream()\n                    .map(resourceId -> RoleResource.builder()\n                            .roleId(role.getId())\n                            .resourceId(resourceId)\n                            .build())\n                    .collect(Collectors.toList());\n            roleResourceService.saveBatch(roleResourceList);\n            filterInvocationSecurityMetadataSource.clearDataSource();\n        }\n        if (Objects.nonNull(roleVO.getMenuIds())) {\n            if (Objects.nonNull(roleVO.getId())) {\n                roleMenuService.remove(new LambdaQueryWrapper<RoleMenu>().eq(RoleMenu::getRoleId, roleVO.getId()));\n            }\n            List<RoleMenu> roleMenuList = roleVO.getMenuIds().stream()\n                    .map(menuId -> RoleMenu.builder()\n                            .roleId(role.getId())\n                            .menuId(menuId)\n                            .build())\n                    .collect(Collectors.toList());\n            roleMenuService.saveBatch(roleMenuList);\n        }\n    }",
        "description": "该方法用于保存或更新角色信息。首先，通过角色名称查询数据库，检查是否存在同名角色。如果存在同名角色且角色ID不同，则抛出业务异常。然后，根据传入的角色信息创建一个角色对象，并设置isDisable属性为false。接着，调用saveOrUpdate方法保存或更新角色信息。如果传入的角色信息中包含资源ID列表，则根据角色ID删除角色资源关联表中的相关记录，并根据传入的资源ID列表创建角色资源关联对象，并批量保存到角色资源关联表中。最后，如果传入的角色信息中包含菜单ID列表，则根据角色ID删除角色菜单关联表中的相关记录，并根据传入的菜单ID列表创建角色菜单关联对象，并批量保存到角色菜单关联表中。",
        "label": "JavaMethod"
    },
    {
        "id": 958,
        "fullName": "com.aurora.mapper.ArticleMapper.listArticlesAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<ArticleAdminDTO> listArticlesAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个用于列出博客文章的后台方法，接受当前页码、每页数量和条件对象作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 959,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.qqLogin( QQLoginVO qqLoginVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public UserInfoDTO qqLogin(QQLoginVO qqLoginVO) {\n        return socialLoginStrategyContext.executeLoginStrategy(JSON.toJSONString(qqLoginVO), LoginTypeEnum.QQ);\n    }",
        "description": "该方法使用@Transactional注解来确保在出现异常时进行事务回滚，实现了QQ登录功能，通过执行社交登录策略来处理QQ登录请求并返回用户信息。",
        "label": "JavaMethod"
    },
    {
        "id": 960,
        "fullName": "com.aurora.strategy.impl.QQLoginStrategyImpl.getSocialUserInfo( SocialTokenDTO socialTokenDTO )",
        "comment": "",
        "content": "@Override\n    public SocialUserInfoDTO getSocialUserInfo(SocialTokenDTO socialTokenDTO) {\n        Map<String, String> formData = new HashMap<>(3);\n        formData.put(QQ_OPEN_ID, socialTokenDTO.getOpenId());\n        formData.put(ACCESS_TOKEN, socialTokenDTO.getAccessToken());\n        formData.put(OAUTH_CONSUMER_KEY, qqConfigProperties.getAppId());\n        QQUserInfoDTO qqUserInfoDTO = JSON.parseObject(restTemplate.getForObject(qqConfigProperties.getUserInfoUrl(), String.class, formData), QQUserInfoDTO.class);\n        return SocialUserInfoDTO.builder()\n                .nickname(Objects.requireNonNull(qqUserInfoDTO).getNickname())\n                .avatar(qqUserInfoDTO.getFigureurl_qq_1())\n                .build();\n    }",
        "description": "该方法用于根据社交平台的授权信息获取用户在该平台上的基本信息，包括昵称和头像。其中使用QQ平台的API获取用户信息，需要传入OpenID和Access Token等参数。",
        "label": "JavaMethod"
    },
    {
        "id": 961,
        "fullName": "com.aurora.service.FriendLinkService.saveOrUpdateFriendLink( FriendLinkVO friendLinkVO )",
        "comment": "",
        "content": "void saveOrUpdateFriendLink(FriendLinkVO friendLinkVO);",
        "description": "该函数用于保存或更新友情链接信息。",
        "label": "JavaMethod"
    },
    {
        "id": 962,
        "fullName": "com.aurora.util.BeanCopyUtil.copyList( List<S> source, Class<T> target )",
        "comment": "",
        "content": "public static <T, S> List<T> copyList(List<S> source, Class<T> target) {\n        List<T> list = new ArrayList<>();\n        if (null != source && source.size() > 0) {\n            for (Object obj : source) {\n                list.add(BeanCopyUtil.copyObject(obj, target));\n            }\n        }\n        return list;\n    }",
        "description": "这段代码实现了一个通用的方法，用于将源列表中的对象转换成目标类的对象，并返回转换后的目标类列表。",
        "label": "JavaMethod"
    },
    {
        "id": 963,
        "fullName": "com.aurora.config.WebMvcConfig.addCorsMappings( CorsRegistry registry )",
        "comment": "",
        "content": "@Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"\/**\")\n                .allowCredentials(true)\n                .allowedHeaders(\"*\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"*\");\n    }",
        "description": "这段代码是在博客系统的后端中配置了跨域资源共享（CORS），允许所有来源、所有方法和所有请求头，并允许携带凭证。",
        "label": "JavaMethod"
    },
    {
        "id": 964,
        "fullName": "com.aurora.service.UserInfoService.updateUserRole( UserRoleVO userRoleVO )",
        "comment": "",
        "content": "void updateUserRole(UserRoleVO userRoleVO);",
        "description": "这段代码是用来更新用户角色的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 965,
        "fullName": "com.aurora.model.vo.ResultVO.ok( T data, String message )",
        "comment": "",
        "content": "public static <T> ResultVO<T> ok(T data, String message) {\n        return resultVO(true, SUCCESS.getCode(), message, data);\n    }",
        "description": "这段代码是一个静态方法，用于返回一个成功的ResultVO对象，包含数据和消息。",
        "label": "JavaMethod"
    },
    {
        "id": 966,
        "fullName": "com.aurora.controller.MenuController.listMenuOptions(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看角色菜单选项\")\n    @GetMapping(\"\/admin\/role\/menus\")\n    public ResultVO<List<LabelOptionDTO>> listMenuOptions() {\n        return ResultVO.ok(menuService.listMenuOptions());\n    }",
        "description": "这段代码是一个博客系统后端的接口，用于获取角色菜单选项的列表数据。",
        "label": "JavaMethod"
    },
    {
        "id": 967,
        "fullName": "com.aurora.service.RedisService.incrExpire( String key, long time )",
        "comment": "",
        "content": "Long incrExpire(String key, long time);",
        "description": "这段代码是一个博客系统后端的方法，用于增加并设置键为key的值，并在一定时间后过期。",
        "label": "JavaMethod"
    },
    {
        "id": 968,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl.uploadFile( MultipartFile file, String path )",
        "comment": "",
        "content": "@Override\n    public String uploadFile(MultipartFile file, String path) {\n        try {\n            String md5 = FileUtil.getMd5(file.getInputStream());\n            String extName = FileUtil.getExtName(file.getOriginalFilename());\n            String fileName = md5 + extName;\n            if (!exists(path + fileName)) {\n                upload(path, fileName, file.getInputStream());\n            }\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }",
        "description": "该方法用于上传文件，接收一个MultipartFile类型的文件和一个路径参数。首先获取文件的MD5值和扩展名，然后将MD5值和扩展名拼接为文件名。如果该文件不存在于指定路径下，则调用upload方法来上传文件。最后返回文件的访问URL。如果上传失败，则抛出一个业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 969,
        "fullName": "com.aurora.service.UserInfoService.updateUserDisable( UserDisableVO userDisableVO )",
        "comment": "",
        "content": "void updateUserDisable(UserDisableVO userDisableVO);",
        "description": "更新用户禁用信息。",
        "label": "JavaMethod"
    },
    {
        "id": 970,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.updateWebsiteConfig( WebsiteConfigVO websiteConfigVO )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateWebsiteConfig(WebsiteConfigVO websiteConfigVO) {\n        WebsiteConfig websiteConfig = WebsiteConfig.builder()\n                .id(DEFAULT_CONFIG_ID)\n                .config(JSON.toJSONString(websiteConfigVO))\n                .build();\n        websiteConfigMapper.updateById(websiteConfig);\n        redisService.del(WEBSITE_CONFIG);\n    }",
        "description": "该方法用于更新网站配置信息，将传入的WebsiteConfigVO对象转换为WebsiteConfig对象并更新到数据库中，同时删除缓存中的网站配置信息。",
        "label": "JavaMethod"
    },
    {
        "id": 971,
        "fullName": "com.aurora.util.ScheduleUtil.getTriggerKey( Integer jobId, String jobGroup )",
        "comment": "",
        "content": "public static TriggerKey getTriggerKey(Integer jobId, String jobGroup) {\n        return TriggerKey.triggerKey(ScheduleConstant.TASK_CLASS_NAME + jobId, jobGroup);\n    }",
        "description": "这段代码用于获取触发器的键值，根据任务ID和任务组名生成对应的TriggerKey。",
        "label": "JavaMethod"
    },
    {
        "id": 972,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lRange( String key, long start, long end )",
        "comment": "",
        "content": "@Override\n    public List<Object> lRange(String key, long start, long end) {\n        return redisTemplate.opsForList().range(key, start, end);\n    }",
        "description": "这段代码是一个用于从Redis中获取指定范围内元素的方法，返回一个对象列表。",
        "label": "JavaMethod"
    },
    {
        "id": 973,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.listResourceChildren( List<Resource> resourceList )",
        "comment": "",
        "content": "private Map<Integer, List<Resource>> listResourceChildren(List<Resource> resourceList) {\n        return resourceList.stream()\n                .filter(item -> Objects.nonNull(item.getParentId()))\n                .collect(Collectors.groupingBy(Resource::getParentId));\n    }",
        "description": "这段代码是一个私有方法，用于将资源列表按照父资源ID进行分组。在给定的资源列表中，筛选出具有非空父资源ID的资源，并将它们按照父资源ID进行分组。",
        "label": "JavaMethod"
    },
    {
        "id": 974,
        "fullName": "com.aurora.event.ExceptionLogEvent.ExceptionLogEvent( ExceptionLog exceptionLog )",
        "comment": "",
        "content": "public ExceptionLogEvent(ExceptionLog exceptionLog) {\n        super(exceptionLog);\n    }",
        "description": "这段代码是一个自定义的异常日志事件类的构造函数，它接受一个异常日志对象作为参数，并将其传递给父类的构造函数。",
        "label": "JavaMethod"
    },
    {
        "id": 975,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.updateMenuIsHidden( IsHiddenVO isHiddenVO )",
        "comment": "",
        "content": "@Override\n    public void updateMenuIsHidden(IsHiddenVO isHiddenVO) {\n        Menu menu = BeanCopyUtil.copyObject(isHiddenVO, Menu.class);\n        menuMapper.updateById(menu);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于更新菜单的隐藏状态。它首先将传入的IsHiddenVO对象转换为Menu对象，然后通过menuMapper根据菜单的ID进行更新操作。",
        "label": "JavaMethod"
    },
    {
        "id": 976,
        "fullName": "com.aurora.controller.JobLogController.listJobLogs( JobLogSearchVO jobLogSearchVO )",
        "comment": "",
        "content": "@ApiOperation(\"获取定时任务的日志列表\")\n    @GetMapping(\"\/admin\/jobLogs\")\n    public ResultVO<PageResultDTO<JobLogDTO>> listJobLogs(JobLogSearchVO jobLogSearchVO) {\n        return ResultVO.ok(jobLogService.listJobLogs(jobLogSearchVO));\n    }",
        "description": "该方法用于获取定时任务的日志列表，并返回一个包含JobLogDTO的PageResultDTO的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 977,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.listOnlineUsers( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<UserOnlineDTO> listOnlineUsers(ConditionVO conditionVO) {\n        Map<String, Object> userMaps = redisService.hGetAll(\"login_user\");\n        Collection<Object> values = userMaps.values();\n        ArrayList<UserDetailsDTO> userDetailsDTOs = new ArrayList<>();\n        for (Object value : values) {\n            userDetailsDTOs.add((UserDetailsDTO) value);\n        }\n        List<UserOnlineDTO> userOnlineDTOs = BeanCopyUtil.copyList(userDetailsDTOs, UserOnlineDTO.class);\n        List<UserOnlineDTO> onlineUsers = userOnlineDTOs.stream()\n                .filter(item -> StringUtils.isBlank(conditionVO.getKeywords()) || item.getNickname().contains(conditionVO.getKeywords()))\n                .sorted(Comparator.comparing(UserOnlineDTO::getLastLoginTime).reversed())\n                .collect(Collectors.toList());\n        int fromIndex = getLimitCurrent().intValue();\n        int size = getSize().intValue();\n        int toIndex = onlineUsers.size() - fromIndex > size ? fromIndex + size : onlineUsers.size();\n        List<UserOnlineDTO> userOnlineList = onlineUsers.subList(fromIndex, toIndex);\n        return new PageResultDTO<>(userOnlineList, onlineUsers.size());\n    }",
        "description": "该方法实现了获取在线用户列表的功能，首先从Redis中获取所有登录用户的信息，然后根据条件筛选、排序并分页展示在线用户列表。",
        "label": "JavaMethod"
    },
    {
        "id": 978,
        "fullName": "com.aurora.controller.ArticleController.saveArticleImages( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(\"上传文章图片\")\n    @ApiImplicitParam(name = \"file\", value = \"文章图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/articles\/images\")\n    public ResultVO<String> saveArticleImages(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.ARTICLE.getPath()));\n    }",
        "description": "该方法用于上传文章图片，通过执行上传策略并返回上传结果。",
        "label": "JavaMethod"
    },
    {
        "id": 979,
        "fullName": "com.aurora.quartz.AuroraQuartz.baiduSeo(  )",
        "comment": "",
        "content": "public void baiduSeo() {\n        List<Integer> ids = articleService.list().stream().map(Article::getId).collect(Collectors.toList());\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Host\", \"data.zz.baidu.com\");\n        headers.add(\"User-Agent\", \"curl\/7.12.1\");\n        headers.add(\"Content-Length\", \"83\");\n        headers.add(\"Content-Type\", \"text\/plain\");\n        ids.forEach(item -> {\n            String url = websiteUrl + \"\/articles\/\" + item;\n            HttpEntity<String> entity = new HttpEntity<>(url, headers);\n            restTemplate.postForObject(\"https:\/\/www.baidu.com\", entity, String.class);\n        });\n    }",
        "description": "该方法用于将文章的ID列表发送给百度搜索引擎进行SEO优化。首先获取文章ID列表，然后构建HTTP请求头部信息，依次将每篇文章的URL发送给百度搜索引擎进行提交。",
        "label": "JavaMethod"
    },
    {
        "id": 980,
        "fullName": "com.aurora.strategy.context.UploadStrategyContext.executeUploadStrategy( String fileName, InputStream inputStream, String path )",
        "comment": "",
        "content": "public String executeUploadStrategy(String fileName, InputStream inputStream, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(fileName, inputStream, path);\n    }",
        "description": "这段代码实现了根据上传模式选择上传策略，并执行上传操作。",
        "label": "JavaMethod"
    },
    {
        "id": 981,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listTopAndFeaturedArticles(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public TopAndFeaturedArticlesDTO listTopAndFeaturedArticles() {\n        List<ArticleCardDTO> articleCardDTOs = articleMapper.listTopAndFeaturedArticles();\n        if (articleCardDTOs.size() == 0) {\n            return new TopAndFeaturedArticlesDTO();\n        } else if (articleCardDTOs.size() > 3) {\n            articleCardDTOs = articleCardDTOs.subList(0, 3);\n        }\n        TopAndFeaturedArticlesDTO topAndFeaturedArticlesDTO = new TopAndFeaturedArticlesDTO();\n        topAndFeaturedArticlesDTO.setTopArticle(articleCardDTOs.get(0));\n        articleCardDTOs.remove(0);\n        topAndFeaturedArticlesDTO.setFeaturedArticles(articleCardDTOs);\n        return topAndFeaturedArticlesDTO;\n    }",
        "description": "该方法用于获取置顶和精选文章的信息。首先通过articleMapper获取文章列表，然后根据数量限制，如果文章数量为0，则返回空对象；如果文章数量大于3，则只保留前3篇文章。最后将第一篇文章设置为置顶文章，并将其余文章设置为精选文章。",
        "label": "JavaMethod"
    },
    {
        "id": 982,
        "fullName": "com.aurora.interceptor.PaginationInterceptor.afterCompletion( HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex )",
        "comment": "",
        "content": "@Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        PageUtil.remove();\n    }",
        "description": "在请求处理完成后，移除页面工具类的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 983,
        "fullName": "com.aurora.controller.PhotoAlbumController.listPhotoAlbumBackInfos(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取后台相册列表信息\")\n    @GetMapping(\"\/admin\/photos\/albums\/info\")\n    public ResultVO<List<PhotoAlbumDTO>> listPhotoAlbumBackInfos() {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbumInfosAdmin());\n    }",
        "description": "这段代码是一个后端接口，用于获取后台相册列表信息。使用了GET请求，返回一个包含相册信息的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 984,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.zScore( String key, Object value )",
        "comment": "",
        "content": "@Override\n    public Double zScore(String key, Object value) {\n        return redisTemplate.opsForZSet().score(key, value);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于获取指定键和值的有序集合中的成员的分数。",
        "label": "JavaMethod"
    },
    {
        "id": 985,
        "fullName": "com.aurora.quartz.QuartzJobExecution.doExecute( JobExecutionContext context, Job job )",
        "comment": "",
        "content": "@Override\n    protected void doExecute(JobExecutionContext context, Job job) throws Exception {\n        JobInvokeUtil.invokeMethod(job);\n    }",
        "description": "这段代码是一个用于执行任务的方法，它调用了JobInvokeUtil类中的invokeMethod方法。",
        "label": "JavaMethod"
    },
    {
        "id": 986,
        "fullName": "com.aurora.controller.TalkController.getTalkById( Integer talkId )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据id查看说说\")\n    @ApiImplicitParam(name = \"talkId\", value = \"说说id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/talks\/{talkId}\")\n    public ResultVO<TalkDTO> getTalkById(@PathVariable(\"talkId\") Integer talkId) {\n        return ResultVO.ok(talkService.getTalkById(talkId));\n    }",
        "description": "根据说说id获取对应的说说信息。",
        "label": "JavaMethod"
    },
    {
        "id": 987,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.deleteResource( Integer resourceId )",
        "comment": "",
        "content": "@Override\n    public void deleteResource(Integer resourceId) {\n        Integer count = roleResourceMapper.selectCount(new LambdaQueryWrapper<RoleResource>()\n                .eq(RoleResource::getResourceId, resourceId));\n        if (count > 0) {\n            throw new BizException(\"该资源下存在角色\");\n        }\n        List<Integer> resourceIds = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                        .select(Resource::getId).\n                        eq(Resource::getParentId, resourceId))\n                .stream()\n                .map(Resource::getId)\n                .collect(Collectors.toList());\n        resourceIds.add(resourceId);\n        resourceMapper.deleteBatchIds(resourceIds);\n    }",
        "description": "这段代码实现了删除指定资源的功能，首先检查该资源下是否存在角色，如果存在则抛出业务异常，然后查询该资源及其子资源的ID并删除。",
        "label": "JavaMethod"
    },
    {
        "id": 988,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hHasKey( String key, String hashKey )",
        "comment": "",
        "content": "@Override\n    public Boolean hHasKey(String key, String hashKey) {\n        return redisTemplate.opsForHash().hasKey(key, hashKey);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于判断在Redis中指定键值对中是否存在指定的哈希键。",
        "label": "JavaMethod"
    },
    {
        "id": 989,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.listPhotoAlbumInfosAdmin(  )",
        "comment": "",
        "content": "@Override\n    public List<PhotoAlbumDTO> listPhotoAlbumInfosAdmin() {\n        List<PhotoAlbum> photoAlbums = photoAlbumMapper.selectList(new LambdaQueryWrapper<PhotoAlbum>()\n                .eq(PhotoAlbum::getIsDelete, FALSE));\n        return BeanCopyUtil.copyList(photoAlbums, PhotoAlbumDTO.class);\n    }",
        "description": "该方法用于获取后台管理系统中的相册信息列表，通过查询数据库中未删除的相册数据并将其转换为DTO对象后返回。",
        "label": "JavaMethod"
    },
    {
        "id": 990,
        "fullName": "com.aurora.controller.AuroraInfoController.getWebsiteConfig(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取网站配置\")\n    @GetMapping(\"\/admin\/website\/config\")\n    public ResultVO<WebsiteConfigDTO> getWebsiteConfig() {\n        return ResultVO.ok(auroraInfoService.getWebsiteConfig());\n    }",
        "description": "该接口用于获取网站配置信息，并返回一个包含网站配置信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 991,
        "fullName": "com.aurora.service.UserAuthService.listUsers( ConditionVO condition )",
        "comment": "",
        "content": "PageResultDTO<UserAdminDTO> listUsers(ConditionVO condition);",
        "description": "该方法用于根据条件VO筛选用户信息，并返回用户管理DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 992,
        "fullName": "com.aurora.controller.MenuController.saveOrUpdateMenu( MenuVO menuVO )",
        "comment": "",
        "content": "@OptLog(optType =SAVE_OR_UPDATE)\n    @ApiOperation(value = \"新增或修改菜单\")\n    @PostMapping(\"\/admin\/menus\")\n    public ResultVO<?> saveOrUpdateMenu(@Valid @RequestBody MenuVO menuVO) {\n        menuService.saveOrUpdateMenu(menuVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了在后端新增或修改菜单的功能，并使用了OptLog注解记录操作类型，同时通过PostMapping注解将请求映射到\"\/admin\/menus\"路径上。",
        "label": "JavaMethod"
    },
    {
        "id": 993,
        "fullName": "com.aurora.service.MenuService.updateMenuIsHidden( IsHiddenVO isHiddenVO )",
        "comment": "",
        "content": "void updateMenuIsHidden(IsHiddenVO isHiddenVO);",
        "description": "这段代码是用来更新菜单是否隐藏的状态。",
        "label": "JavaMethod"
    },
    {
        "id": 994,
        "fullName": "com.aurora.service.CommentService.listTopSixComments(  )",
        "comment": "",
        "content": "List<CommentDTO> listTopSixComments();",
        "description": "这段代码返回一个包含前六个置顶评论的评论列表。",
        "label": "JavaMethod"
    },
    {
        "id": 995,
        "fullName": "com.aurora.service.TokenService.delLoginUser( Integer userId )",
        "comment": "",
        "content": "void delLoginUser(Integer userId);",
        "description": "这段代码定义了一个函数，用于删除登录用户的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 996,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.set( String key, Object value, long time )",
        "comment": "",
        "content": "@Override\n    public void set(String key, Object value, long time) {\n        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n    }",
        "description": "该方法用于在Redis中设置一个键值对，并指定该键值对的过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 997,
        "fullName": "com.aurora.service.RedisService.bitField( String key, int limit, int offset )",
        "comment": "",
        "content": "List<Long> bitField(String key, int limit, int offset);",
        "description": "该方法返回一个包含Long类型元素的列表，用于表示一个位字段。该位字段由给定的键唯一标识，并且返回的列表是根据给定的限制和偏移量进行分页的。",
        "label": "JavaMethod"
    },
    {
        "id": 998,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.deleteArticles( List<Integer> articleIds )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deleteArticles(List<Integer> articleIds) {\n        articleTagMapper.delete(new LambdaQueryWrapper<ArticleTag>()\n                .in(ArticleTag::getArticleId, articleIds));\n        articleMapper.deleteBatchIds(articleIds);\n    }",
        "description": "该方法用于批量删除博客文章，同时删除相关的文章标签信息。使用事务管理，确保操作的原子性。",
        "label": "JavaMethod"
    },
    {
        "id": 999,
        "fullName": "com.aurora.mapper.UserAuthMapper.listUsers( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<UserAdminDTO> listUsers(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个用于列出用户管理员DTO的方法，可以根据当前页码、每页大小和条件对象来筛选用户。",
        "label": "JavaMethod"
    },
    {
        "id": 1000,
        "fullName": "com.aurora.controller.JobController.updateJobStatus( JobStatusVO jobStatusVO )",
        "comment": "",
        "content": "@ApiOperation(\"更改任务的状态\")\n    @PutMapping(\"\/admin\/jobs\/status\")\n    public ResultVO<?> updateJobStatus(@RequestBody JobStatusVO jobStatusVO) {\n        jobService.updateJobStatus(jobStatusVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个后端接口，用于更改任务的状态。通过PUT请求访问\"\/admin\/jobs\/status\"路径，接收一个JobStatusVO对象作为请求体参数，然后调用jobService的updateJobStatus方法更新任务状态，并返回一个表示操作成功的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1468,
        "fullName": "com.aurora.service.impl.UniqueViewServiceImpl.listUniqueViews(  )",
        "comment": "",
        "content": "@Override\n    public List<UniqueViewDTO> listUniqueViews() {\n        DateTime startTime = DateUtil.beginOfDay(DateUtil.offsetDay(new Date(), -7));\n        DateTime endTime = DateUtil.endOfDay(new Date());\n        return uniqueViewMapper.listUniqueViews(startTime, endTime);\n    }",
        "description": "该方法用于获取最近7天内的唯一访客数据列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1469,
        "fullName": "com.aurora.strategy.context.UploadStrategyContext.executeUploadStrategy( MultipartFile file, String path )",
        "comment": "",
        "content": "public String executeUploadStrategy(MultipartFile file, String path) {\n        return uploadStrategyMap.get(getStrategy(uploadMode)).uploadFile(file, path);\n    }",
        "description": "该方法根据上传模式选择合适的上传策略，然后调用相应的上传文件方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1470,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hyperAdd( String key, Object value )",
        "comment": "",
        "content": "@Override\n    public Long hyperAdd(String key, Object... value) {\n        return redisTemplate.opsForHyperLogLog().add(key, value);\n    }",
        "description": "该方法实现了在Redis中使用HyperLogLog数据结构来添加元素的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1471,
        "fullName": "com.aurora.service.AuroraInfoService.getAbout(  )",
        "comment": "",
        "content": "AboutDTO getAbout();",
        "description": "获取关于页面的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1472,
        "fullName": "com.aurora.service.RedisService.sRemove( String key, Object values )",
        "comment": "",
        "content": "Long sRemove(String key, Object... values);",
        "description": "这段代码是一个用于移除指定键值对应元素的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1473,
        "fullName": "com.aurora.service.ArticleService.exportArticles( List<Integer> articleIdList )",
        "comment": "",
        "content": "List<String> exportArticles(List<Integer> articleIdList);",
        "description": "这段代码实现了一个功能，接收一个文章ID列表，然后导出对应的文章列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1474,
        "fullName": "com.aurora.service.ExceptionLogService.listExceptionLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<ExceptionLogDTO> listExceptionLogs(ConditionVO conditionVO);",
        "description": "该方法用于根据给定的条件VO对象，返回异常日志DTO对象的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1475,
        "fullName": "com.aurora.controller.CommentController.saveComment( CommentVO commentVO )",
        "comment": "",
        "content": "@AccessLimit(seconds = 60, maxCount = 3)\n    @OptLog(optType = SAVE)\n    @ApiOperation(\"添加评论\")\n    @PostMapping(\"\/comments\/save\")\n    public ResultVO<?> saveComment(@Valid @RequestBody CommentVO commentVO) {\n        commentService.saveComment(commentVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了限制用户在60秒内最多只能发表3条评论，同时记录用户的评论操作类型为保存，并提供了添加评论的接口。",
        "label": "JavaMethod"
    },
    {
        "id": 1476,
        "fullName": "com.aurora.controller.CommentController.listRepliesByCommentId( Integer commentId )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据commentId获取回复\")\n    @GetMapping(\"\/comments\/{commentId}\/replies\")\n    public ResultVO<List<ReplyDTO>> listRepliesByCommentId(@PathVariable(\"commentId\") Integer commentId) {\n        return ResultVO.ok(commentService.listRepliesByCommentId(commentId));\n    }",
        "description": "根据评论ID获取回复列表的接口。",
        "label": "JavaMethod"
    },
    {
        "id": 1477,
        "fullName": "com.aurora.strategy.impl.MinioUploadStrategyImpl.getFileAccessUrl( String filePath )",
        "comment": "",
        "content": "@Override\n    public String getFileAccessUrl(String filePath) {\n        return minioProperties.getUrl() + filePath;\n    }",
        "description": "该方法用于获取文件在Minio对象存储中的访问链接。",
        "label": "JavaMethod"
    },
    {
        "id": 1478,
        "fullName": "com.aurora.aspect.ExceptionLogAspect.exceptionLogPointcut(  )",
        "comment": "",
        "content": "@Pointcut(\"execution(* com.aurora.controller..*.*(..))\")\n    public void exceptionLogPointcut() {\n    }",
        "description": "这段代码定义了一个切入点，用于捕获控制器层面的方法执行，以便记录异常日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1479,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.bitField( String key, int limit, int offset )",
        "comment": "",
        "content": "@Override\n    public List<Long> bitField(String key, int limit, int offset) {\n        return redisTemplate.execute((RedisCallback<List<Long>>) con ->\n                con.bitField(key.getBytes(),\n                        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(limit)).valueAt(offset)));\n    }",
        "description": "该方法实现了对Redis中指定key的位图进行操作，根据给定的限制和偏移量返回一个包含指定位的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1480,
        "fullName": "com.aurora.util.ScheduleUtil.getJobKey( Integer jobId, String jobGroup )",
        "comment": "",
        "content": "public static JobKey getJobKey(Integer jobId, String jobGroup) {\n        return JobKey.jobKey(ScheduleConstant.TASK_CLASS_NAME + jobId, jobGroup);\n    }",
        "description": "该方法用于根据任务ID和任务组名生成一个JobKey。",
        "label": "JavaMethod"
    },
    {
        "id": 1481,
        "fullName": "com.aurora.quartz.AuroraQuartz.importDataIntoES(  )",
        "comment": "",
        "content": "public void importDataIntoES() {\n        elasticsearchMapper.deleteAll();\n        List<Article> articles = articleService.list();\n        for (Article article : articles) {\n            elasticsearchMapper.save(BeanCopyUtil.copyObject(article, ArticleSearchDTO.class));\n        }\n    }",
        "description": "该方法用于将博客系统中的文章数据导入到Elasticsearch中。首先删除Elasticsearch中的所有数据，然后获取所有文章数据，将其转换为搜索DTO对象，并保存到Elasticsearch中。",
        "label": "JavaMethod"
    },
    {
        "id": 1482,
        "fullName": "com.aurora.service.UserAuthService.qqLogin( QQLoginVO qqLoginVO )",
        "comment": "",
        "content": "UserInfoDTO qqLogin(QQLoginVO qqLoginVO);",
        "description": "这段代码是一个用于处理QQ登录的方法，接受一个QQLoginVO对象作为参数，并返回一个UserInfoDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1483,
        "fullName": "com.aurora.service.AuroraInfoService.getAuroraAdminInfo(  )",
        "comment": "",
        "content": "AuroraAdminInfoDTO getAuroraAdminInfo();",
        "description": "获取Aurora博客系统管理员信息的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1484,
        "fullName": "com.aurora.controller.CategoryController.deleteCategories( List<Integer> categoryIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除分类\")\n    @DeleteMapping(\"\/admin\/categories\")\n    public ResultVO<?> deleteCategories(@RequestBody List<Integer> categoryIds) {\n        categoryService.deleteCategories(categoryIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于删除博客系统分类的后端接口，通过传入分类ID列表来删除对应分类。",
        "label": "JavaMethod"
    },
    {
        "id": 1485,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArticlesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<ArticleAdminDTO> listArticlesAdmin(ConditionVO conditionVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.countArticleAdmins(conditionVO));\n        List<ArticleAdminDTO> articleAdminDTOs = articleMapper.listArticlesAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        Map<Object, Double> viewsCountMap = redisService.zAllScore(ARTICLE_VIEWS_COUNT);\n        articleAdminDTOs.forEach(item -> {\n            Double viewsCount = viewsCountMap.get(item.getId());\n            if (Objects.nonNull(viewsCount)) {\n                item.setViewsCount(viewsCount.intValue());\n            }\n        });\n        return new PageResultDTO<>(articleAdminDTOs, asyncCount.get());\n    }",
        "description": "该方法用于获取后台管理页面文章列表，首先异步获取文章总数，然后查询文章列表并从Redis中获取文章浏览量，最终返回带有文章列表和总数的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1486,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl.upload( String path, String fileName, InputStream inputStream )",
        "comment": "",
        "content": "public abstract void upload(String path, String fileName, InputStream inputStream) throws IOException;",
        "description": "这段代码定义了一个抽象方法，用于上传指定路径下的文件流至博客系统。",
        "label": "JavaMethod"
    },
    {
        "id": 1487,
        "fullName": "com.aurora.controller.FriendLinkController.deleteFriendLink( List<Integer> linkIdList )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除友链\")\n    @DeleteMapping(\"\/admin\/links\")\n    public ResultVO<?> deleteFriendLink(@RequestBody List<Integer> linkIdList) {\n        friendLinkService.removeByIds(linkIdList);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个后端接口，用于删除友链信息。接口通过DeleteMapping注解指定路径为\"\/admin\/links\"，并通过@OptLog注解记录操作类型为DELETE，同时使用@ApiOperation注解标记该接口的作用为\"删除友链\"。接口接收一个包含友链ID的列表作为参数，调用friendLinkService的removeByIds方法删除对应的友链信息，最后返回一个表示操作成功的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1488,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.getAbout(  )",
        "comment": "",
        "content": "@Override\n    public AboutDTO getAbout() {\n        AboutDTO aboutDTO;\n        Object about = redisService.get(ABOUT);\n        if (Objects.nonNull(about)) {\n            aboutDTO = JSON.parseObject(about.toString(), AboutDTO.class);\n        } else {\n            String content = aboutMapper.selectById(DEFAULT_ABOUT_ID).getContent();\n            aboutDTO = JSON.parseObject(content, AboutDTO.class);\n            redisService.set(ABOUT, content);\n        }\n        return aboutDTO;\n    }",
        "description": "该方法用于获取关于页面的信息，首先尝试从缓存中获取，如果缓存中不存在则从数据库中获取，并将结果存入缓存。返回关于页面的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1489,
        "fullName": "com.aurora.service.RedisService.del( List<String> keys )",
        "comment": "",
        "content": "Long del(List<String> keys);",
        "description": "该方法用于删除一个或多个指定的键对应的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1490,
        "fullName": "com.aurora.listener.AuroraListener.saveOperationLog( OperationLogEvent operationLogEvent )",
        "comment": "",
        "content": "@Async\n    @EventListener(OperationLogEvent.class)\n    public void saveOperationLog(OperationLogEvent operationLogEvent) {\n        operationLogMapper.insert((OperationLog) operationLogEvent.getSource());\n    }",
        "description": "这段代码使用@Async注解，监听OperationLogEvent事件，并将事件中的操作日志存储到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1491,
        "fullName": "com.aurora.controller.UserAuthController.listUsers( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查询后台用户列表\")\n    @GetMapping(\"\/admin\/users\")\n    public ResultVO<PageResultDTO<UserAdminDTO>> listUsers(ConditionVO conditionVO) {\n        return ResultVO.ok(userAuthService.listUsers(conditionVO));\n    }",
        "description": "这段代码实现了一个查询后台用户列表的功能。通过使用@GetMapping注解来指定请求的路径为\"\/admin\/users\"，当接收到请求时，会调用listUsers方法。listUsers方法接收一个ConditionVO对象作为参数，用于传递查询条件。最终返回一个包含用户列表的PageResultDTO对象，并封装到ResultVO对象中返回给前端。",
        "label": "JavaMethod"
    },
    {
        "id": 1492,
        "fullName": "com.aurora.config.MybatisPlusConfig.mybatisPlusInterceptor(  )",
        "comment": "",
        "content": "@Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }",
        "description": "这段代码创建了一个MybatisPlusInterceptor bean，用于实现分页功能并指定数据库类型为MYSQL。",
        "label": "JavaMethod"
    },
    {
        "id": 1493,
        "fullName": "com.aurora.service.CommentService.updateCommentsReview( ReviewVO reviewVO )",
        "comment": "",
        "content": "void updateCommentsReview(ReviewVO reviewVO);",
        "description": "这段代码用于更新评论审核状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1494,
        "fullName": "com.aurora.service.impl.JobServiceImpl.runJob( JobRunVO jobRunVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public void runJob(JobRunVO jobRunVO) {\n        Integer jobId = jobRunVO.getId();\n        String jobGroup = jobRunVO.getJobGroup();\n        scheduler.triggerJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n    }",
        "description": "这段代码实现了在博客系统中运行特定任务的功能，根据传入的任务ID和任务组名称触发相应的定时任务。使用了Lombok注解简化异常处理。",
        "label": "JavaMethod"
    },
    {
        "id": 1495,
        "fullName": "com.aurora.service.RedisService.hSetAll( String key, Map<String,?> map )",
        "comment": "",
        "content": "void hSetAll(String key, Map<String, ?> map);",
        "description": "该函数用于将一个键值对的映射集合存储到指定的键值对中。",
        "label": "JavaMethod"
    },
    {
        "id": 1496,
        "fullName": "com.aurora.controller.UserAuthController.logout(  )",
        "comment": "",
        "content": "@ApiOperation(\"用户登出\")\n    @PostMapping(\"\/users\/logout\")\n    public ResultVO<UserLogoutStatusDTO> logout() {\n        return ResultVO.ok(userAuthService.logout());\n    }",
        "description": "这段代码实现了用户登出功能，通过POST请求\"\/users\/logout\"来实现，返回一个包含用户登出状态信息的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1497,
        "fullName": "com.aurora.service.RedisService.bitCount( String key )",
        "comment": "",
        "content": "Long bitCount(String key);",
        "description": "这段代码定义了一个方法，用于计算一个字符串的二进制表示中1的个数。",
        "label": "JavaMethod"
    },
    {
        "id": 1498,
        "fullName": "com.aurora.controller.ResourceController.saveOrUpdateResource( ResourceVO resourceVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"新增或修改资源\")\n    @PostMapping(\"\/admin\/resources\")\n    public ResultVO<?> saveOrUpdateResource(@RequestBody @Valid ResourceVO resourceVO) {\n        resourceService.saveOrUpdateResource(resourceVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个博客系统后端的接口方法，用于新增或修改资源。通过POST请求访问\"\/admin\/resources\"路径，接收一个ResourceVO对象作为请求体参数。在方法内部，调用resourceService的saveOrUpdateResource方法来保存或更新资源，并返回一个成功的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1499,
        "fullName": "com.aurora.controller.UserAuthController.register( UserVO userVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"用户注册\")\n    @PostMapping(\"\/users\/register\")\n    public ResultVO<?> register(@Valid @RequestBody UserVO userVO) {\n        userAuthService.register(userVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是实现用户注册功能的后端接口，接收用户信息并调用用户认证服务进行注册。返回注册成功的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1500,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.incrExpire( String key, long time )",
        "comment": "",
        "content": "@Override\n    public Long incrExpire(String key, long time) {\n        Long count = redisTemplate.opsForValue().increment(key, 1);\n        if (count != null && count == 1) {\n            redisTemplate.expire(key, time, TimeUnit.SECONDS);\n        }\n        return count;\n    }",
        "description": "这段代码实现了对指定键的数值递增操作，并在初次递增时设置该键的过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1501,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.zAllScore( String key )",
        "comment": "",
        "content": "@Override\n    public Map<Object, Double> zAllScore(String key) {\n        return Objects.requireNonNull(redisTemplate.opsForZSet().rangeWithScores(key, 0, -1))\n                .stream()\n                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));\n    }",
        "description": "这段代码通过RedisTemplate从ZSet中获取指定key的所有元素及其分数，并返回一个包含元素和分数的Map对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1502,
        "fullName": "com.aurora.handler.ControllerAdviceHandler.errorHandler( BizException e )",
        "comment": "",
        "content": "@ExceptionHandler(value = BizException.class)\n    public ResultVO<?> errorHandler(BizException e) {\n        return ResultVO.fail(e.getCode(), e.getMessage());\n    }",
        "description": "当捕获到BizException异常时，返回一个包含异常代码和消息的失败结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1503,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lIndex( String key, long index )",
        "comment": "",
        "content": "@Override\n    public Object lIndex(String key, long index) {\n        return redisTemplate.opsForList().index(key, index);\n    }",
        "description": "该方法实现了根据指定索引获取列表中的元素的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1504,
        "fullName": "com.aurora.service.RedisService.hSetAll( String key, Map<String,Object> map, long time )",
        "comment": "",
        "content": "Boolean hSetAll(String key, Map<String, Object> map, long time);",
        "description": "将一个Map中的所有键值对存储到指定的键中，并设置过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1505,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.getTalkById( Integer talkId )",
        "comment": "",
        "content": "@Override\n    public TalkDTO getTalkById(Integer talkId) {\n        TalkDTO talkDTO = talkMapper.getTalkById(talkId);\n        if (Objects.isNull(talkDTO)) {\n            throw new BizException(\"说说不存在\");\n        }\n        if (Objects.nonNull(talkDTO.getImages())) {\n            talkDTO.setImgs(CommonUtil.castList(JSON.parseObject(talkDTO.getImages(), List.class), String.class));\n        }\n        CommentCountDTO commentCountDTO = commentMapper.listCommentCountByTypeAndTopicId(CommentTypeEnum.TALK.getType(), talkId);\n        if (Objects.nonNull(commentCountDTO)) {\n            talkDTO.setCommentCount(commentCountDTO.getCommentCount());\n        }\n        return talkDTO;\n    }",
        "description": "根据说说的ID获取说说的详细信息，包括评论数量和图片列表。如果说说不存在则抛出异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1506,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.getAuroraHomeInfo(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public AuroraHomeInfoDTO getAuroraHomeInfo() {\n        CompletableFuture<Integer> asyncArticleCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(new LambdaQueryWrapper<Article>().eq(Article::getIsDelete, FALSE)));\n        CompletableFuture<Integer> asyncCategoryCount = CompletableFuture.supplyAsync(() -> categoryMapper.selectCount(null));\n        CompletableFuture<Integer> asyncTagCount = CompletableFuture.supplyAsync(() -> tagMapper.selectCount(null));\n        CompletableFuture<Integer> asyncTalkCount = CompletableFuture.supplyAsync(() -> talkMapper.selectCount(null));\n        CompletableFuture<WebsiteConfigDTO> asyncWebsiteConfig = CompletableFuture.supplyAsync(this::getWebsiteConfig);\n        CompletableFuture<Integer> asyncViewCount = CompletableFuture.supplyAsync(() -> {\n            Object count = redisService.get(BLOG_VIEWS_COUNT);\n            return Integer.parseInt(Optional.ofNullable(count).orElse(0).toString());\n        });\n        return AuroraHomeInfoDTO.builder()\n                .articleCount(asyncArticleCount.get())\n                .categoryCount(asyncCategoryCount.get())\n                .tagCount(asyncTagCount.get())\n                .talkCount(asyncTalkCount.get())\n                .websiteConfigDTO(asyncWebsiteConfig.get())\n                .viewCount(asyncViewCount.get()).build();\n    }",
        "description": "该方法通过异步方式获取博客系统首页的信息，包括文章数量、分类数量、标签数量、说说数量、网站配置信息和访问量。",
        "label": "JavaMethod"
    },
    {
        "id": 1507,
        "fullName": "com.aurora.service.PhotoAlbumService.getPhotoAlbumByIdAdmin( Integer albumId )",
        "comment": "",
        "content": "PhotoAlbumAdminDTO getPhotoAlbumByIdAdmin(Integer albumId);",
        "description": "根据相册ID获取相册管理员DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1508,
        "fullName": "com.aurora.service.RedisService.hSet( String key, String hashKey, Object value, long time )",
        "comment": "",
        "content": "Boolean hSet(String key, String hashKey, Object value, long time);",
        "description": "这段代码实现了向指定key的哈希表中存储字段和值，并设置过期时间的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1509,
        "fullName": "com.aurora.controller.TalkController.saveOrUpdateTalk( TalkVO talkVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或修改说说\")\n    @PostMapping(\"\/admin\/talks\")\n    public ResultVO<?> saveOrUpdateTalk(@Valid @RequestBody TalkVO talkVO) {\n        talkService.saveOrUpdateTalk(talkVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了在管理员界面保存或更新用户的说说，并记录操作日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1510,
        "fullName": "com.aurora.controller.PhotoController.updatePhotoDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新照片删除状态\")\n    @PutMapping(\"\/admin\/photos\/delete\")\n    public ResultVO<?> updatePhotoDelete(@Valid @RequestBody DeleteVO deleteVO) {\n        photoService.updatePhotoDelete(deleteVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个后端接口，用于更新照片的删除状态，接收一个DeleteVO对象作为请求参数，并调用photoService中的方法来更新照片的删除状态。返回一个ResultVO对象表示操作成功。",
        "label": "JavaMethod"
    },
    {
        "id": 1511,
        "fullName": "com.aurora.util.BeanCopyUtil.copyObject( Object source, Class<T> target )",
        "comment": "",
        "content": "public static <T> T copyObject(Object source, Class<T> target) {\n        T temp = null;\n        try {\n            temp = target.newInstance();\n            if (null != source) {\n                org.springframework.beans.BeanUtils.copyProperties(source, temp);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return temp;\n    }",
        "description": "这段代码实现了一个通用的对象复制方法，将源对象的属性复制到目标对象中。如果源对象不为空，则使用Spring的BeanUtils工具类进行属性复制。捕获异常并打印错误信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1512,
        "fullName": "com.aurora.quartz.AbstractQuartzJob.after( JobExecutionContext context, Job job, Exception e )",
        "comment": "",
        "content": "protected void after(JobExecutionContext context, Job job, Exception e) {\n        Date startTime = THREAD_LOCAL.get();\n        THREAD_LOCAL.remove();\n        final JobLog jobLog = new JobLog();\n        jobLog.setJobId(job.getId());\n        jobLog.setJobName(job.getJobName());\n        jobLog.setJobGroup(job.getJobGroup());\n        jobLog.setInvokeTarget(job.getInvokeTarget());\n        jobLog.setStartTime(startTime);\n        jobLog.setEndTime(new Date());\n        long runMs = jobLog.getEndTime().getTime() - jobLog.getStartTime().getTime();\n        jobLog.setJobMessage(jobLog.getJobName() + \" 总共耗时：\" + runMs + \"毫秒\");\n        if (e != null) {\n            jobLog.setStatus(ZERO);\n            jobLog.setExceptionInfo(ExceptionUtil.getTrace(e));\n        } else {\n            jobLog.setStatus(ONE);\n        }\n        SpringUtil.getBean(JobLogMapper.class).insert(jobLog);\n    }",
        "description": "该方法在任务执行后记录任务执行日志，包括任务的ID、名称、组别、调用目标、开始时间、结束时间、执行时长等信息，并根据任务执行的成功或失败状态记录相应的日志信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1513,
        "fullName": "com.aurora.quartz.AbstractQuartzJob.doExecute( JobExecutionContext context, Job job )",
        "comment": "",
        "content": "protected abstract void doExecute(JobExecutionContext context, Job job) throws Exception;",
        "description": "这段代码定义了一个抽象方法，用于执行作业任务，需要传入作业执行上下文和作业对象，并可能抛出异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1514,
        "fullName": "com.aurora.strategy.impl.MinioUploadStrategyImpl.exists( String filePath )",
        "comment": "",
        "content": "@Override\n    public Boolean exists(String filePath) {\n        boolean exist = true;\n        try {\n            getMinioClient()\n                    .statObject(StatObjectArgs.builder().bucket(minioProperties.getBucketName()).object(filePath).build());\n        } catch (Exception e) {\n            exist = false;\n        }\n        return exist;\n    }",
        "description": "该方法用于检查指定文件路径是否存在于MinIO存储桶中，若存在则返回true，若不存在则返回false。",
        "label": "JavaMethod"
    },
    {
        "id": 1515,
        "fullName": "com.aurora.service.PhotoService.updatePhotoDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "void updatePhotoDelete(DeleteVO deleteVO);",
        "description": "这段代码用于更新删除照片的操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1516,
        "fullName": "com.aurora.service.JobService.deleteJobs( List<Integer> tagIds )",
        "comment": "",
        "content": "void deleteJobs(List<Integer> tagIds);",
        "description": "这段代码定义了一个方法，用于删除一组与特定标签相关联的任务。",
        "label": "JavaMethod"
    },
    {
        "id": 1517,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.createToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "@Override\n    public String createToken(UserDetailsDTO userDetailsDTO) {\n        refreshToken(userDetailsDTO);\n        String userId = userDetailsDTO.getId().toString();\n        return createToken(userId);\n    }",
        "description": "这段代码是一个方法，用于创建用户身份验证令牌，并在生成令牌之前刷新用户的身份验证信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1518,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.listPhotos( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<PhotoAdminDTO> listPhotos(ConditionVO conditionVO) {\n        Page<Photo> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<Photo> photoPage = photoMapper.selectPage(page, new LambdaQueryWrapper<Photo>()\n                .eq(Objects.nonNull(conditionVO.getAlbumId()), Photo::getAlbumId, conditionVO.getAlbumId())\n                .eq(Photo::getIsDelete, conditionVO.getIsDelete())\n                .orderByDesc(Photo::getId)\n                .orderByDesc(Photo::getUpdateTime));\n        List<PhotoAdminDTO> photos = BeanCopyUtil.copyList(photoPage.getRecords(), PhotoAdminDTO.class);\n        return new PageResultDTO<>(photos, (int) photoPage.getTotal());\n    }",
        "description": "该方法用于根据条件查询相册照片列表，并返回包含照片信息的分页结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1519,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArchives(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<ArchiveDTO> listArchives() {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>().eq(Article::getIsDelete, 0).eq(Article::getStatus, 1);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArchives(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        HashMap<String, List<ArticleCardDTO>> map = new HashMap<>();\n        for (ArticleCardDTO article : articles) {\n            LocalDateTime createTime = article.getCreateTime();\n            int month = createTime.getMonth().getValue();\n            int year = createTime.getYear();\n            String key = year + \"-\" + month;\n            if (Objects.isNull(map.get(key))) {\n                List<ArticleCardDTO> articleCardDTOS = new ArrayList<>();\n                articleCardDTOS.add(article);\n                map.put(key, articleCardDTOS);\n            } else {\n                map.get(key).add(article);\n            }\n        }\n        List<ArchiveDTO> archiveDTOs = new ArrayList<>();\n        map.forEach((key, value) -> archiveDTOs.add(ArchiveDTO.builder().Time(key).articles(value).build()));\n        archiveDTOs.sort((o1, o2) -> {\n            String[] o1s = o1.getTime().split(\"-\");\n            String[] o2s = o2.getTime().split(\"-\");\n            int o1Year = Integer.parseInt(o1s[0]);\n            int o1Month = Integer.parseInt(o1s[1]);\n            int o2Year = Integer.parseInt(o2s[0]);\n            int o2Month = Integer.parseInt(o2s[1]);\n            if (o1Year > o2Year) {\n                return -1;\n            } else if (o1Year < o2Year) {\n                return 1;\n            } else return Integer.compare(o2Month, o1Month);\n        });\n        return new PageResultDTO<>(archiveDTOs, asyncCount.get());\n    }",
        "description": "这段代码用于获取博客系统中的归档列表，并按年份和月份进行排序。首先通过异步查询获取文章总数，然后获取文章列表并按照年份和月份进行分组，最后构建归档DTO列表并返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1520,
        "fullName": "com.aurora.controller.AuroraInfoController.getAbout(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看关于我信息\")\n    @GetMapping(\"\/about\")\n    public ResultVO<AboutDTO> getAbout() {\n        return ResultVO.ok(auroraInfoService.getAbout());\n    }",
        "description": "这段代码是一个用于查看关于我信息的接口，返回关于我信息的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1521,
        "fullName": "com.aurora.service.RedisService.hGetAll( String key )",
        "comment": "",
        "content": "Map<String, Object> hGetAll(String key);",
        "description": "这段代码是一个博客系统的后端代码中的一个函数，函数的作用是获取指定键对应的哈希表中的所有字段和值，并以Map<String, Object>的形式返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1522,
        "fullName": "com.aurora.mapper.ArticleMapper.countArticleAdmins( ConditionVO conditionVO )",
        "comment": "",
        "content": "Integer countArticleAdmins(@Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个方法，用于查询博客系统中满足条件的管理员文章数量。",
        "label": "JavaMethod"
    },
    {
        "id": 1523,
        "fullName": "com.aurora.service.TokenService.getUserDetailDTO( HttpServletRequest request )",
        "comment": "",
        "content": "UserDetailsDTO getUserDetailDTO(HttpServletRequest request);",
        "description": "该方法用于获取用户详细信息的数据传输对象（DTO），并通过HttpServletRequest对象来获取请求信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1524,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.listCatalogs( List<Menu> menus )",
        "comment": "",
        "content": "private List<Menu> listCatalogs(List<Menu> menus) {\n        return menus.stream()\n                .filter(item -> Objects.isNull(item.getParentId()))\n                .sorted(Comparator.comparing(Menu::getOrderNum))\n                .collect(Collectors.toList());\n    }",
        "description": "这段代码是一个方法，用于从菜单列表中筛选出没有父级ID的目录菜单，并按照orderNum属性进行排序返回一个新的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1525,
        "fullName": "com.aurora.strategy.impl.MinioUploadStrategyImpl.getMinioClient(  )",
        "comment": "",
        "content": "private MinioClient getMinioClient() {\n        return MinioClient.builder()\n                .endpoint(minioProperties.getEndpoint())\n                .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())\n                .build();\n    }",
        "description": "这段代码是一个私有方法，用于获取一个Minio客户端对象。该客户端对象是通过使用MinioClient的构建器模式来构建的，构建时提供了Minio服务的endpoint、访问密钥和秘钥。",
        "label": "JavaMethod"
    },
    {
        "id": 1526,
        "fullName": "com.aurora.controller.TagController.saveOrUpdateTag( TagVO tagVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改标签\")\n    @PostMapping(\"\/admin\/tags\")\n    public ResultVO<?> saveOrUpdateTag(@Valid @RequestBody TagVO tagVO) {\n        tagService.saveOrUpdateTag(tagVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了在后端添加或修改标签的功能，通过接收前端传来的TagVO对象，调用tagService来保存或更新标签信息，并返回操作结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1527,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sAddExpire( String key, long time, Object values )",
        "comment": "",
        "content": "@Override\n    public Long sAddExpire(String key, long time, Object... values) {\n        Long count = redisTemplate.opsForSet().add(key, values);\n        expire(key, time);\n        return count;\n    }",
        "description": "这段代码实现了向Redis中的集合添加元素，并设置过期时间的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1528,
        "fullName": "com.aurora.config.GlobalZoneConfig.setGlobalZone(  )",
        "comment": "",
        "content": "@PostConstruct\n    public void setGlobalZone() {\n        TimeZone.setDefault(TimeZone.getTimeZone(SHANGHAI.getZone()));\n    }",
        "description": "在系统启动时，将默认时区设置为上海时区。",
        "label": "JavaMethod"
    },
    {
        "id": 1529,
        "fullName": "com.aurora.service.PhotoAlbumService.listPhotoAlbums(  )",
        "comment": "",
        "content": "List<PhotoAlbumDTO> listPhotoAlbums();",
        "description": "该方法返回一个包含相册DTO对象的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1530,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.getMenuMap( List<Menu> menus )",
        "comment": "",
        "content": "private Map<Integer, List<Menu>> getMenuMap(List<Menu> menus) {\n        return menus.stream()\n                .filter(item -> Objects.nonNull(item.getParentId()))\n                .collect(Collectors.groupingBy(Menu::getParentId));\n    }",
        "description": "这段代码将传入的菜单列表按照父菜单ID进行分组，返回一个Map<Integer, List<Menu>>。",
        "label": "JavaMethod"
    },
    {
        "id": 1531,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl.loadResourceRoleList(  )",
        "comment": "",
        "content": "@PostConstruct\n    private void loadResourceRoleList() {\n        resourceRoleList = roleMapper.listResourceRoles();\n    }",
        "description": "在系统启动时，通过调用loadResourceRoleList方法加载资源角色列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1532,
        "fullName": "com.aurora.listener.AuroraListener.saveExceptionLog( ExceptionLogEvent exceptionLogEvent )",
        "comment": "",
        "content": "@Async\n    @EventListener(ExceptionLogEvent.class)\n    public void saveExceptionLog(ExceptionLogEvent exceptionLogEvent) {\n        exceptionLogMapper.insert((ExceptionLog) exceptionLogEvent.getSource());\n    }",
        "description": "这段代码使用@Async和@EventListener注解，用于在捕获ExceptionLogEvent事件时将异常日志保存到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1533,
        "fullName": "com.aurora.controller.ArticleController.updateArticleDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "@ApiOperation(\"删除或者恢复文章\")\n    @PutMapping(\"\/admin\/articles\")\n    public ResultVO<?> updateArticleDelete(@Valid @RequestBody DeleteVO deleteVO) {\n        articleService.updateArticleDelete(deleteVO);\n        return ResultVO.ok();\n    }",
        "description": "该接口用于删除或恢复文章，通过传入DeleteVO对象来更新文章的删除状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1534,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.set( String key, Object value )",
        "comment": "",
        "content": "@Override\n    public void set(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }",
        "description": "该方法实现了在博客系统中设置缓存数据到Redis中的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1535,
        "fullName": "com.aurora.service.PhotoService.updatePhotosAlbum( PhotoVO photoVO )",
        "comment": "",
        "content": "void updatePhotosAlbum(PhotoVO photoVO);",
        "description": "该函数用于更新相册中的照片信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1536,
        "fullName": "com.aurora.service.impl.FriendLinkServiceImpl.saveOrUpdateFriendLink( FriendLinkVO friendLinkVO )",
        "comment": "",
        "content": "@Override\n    public void saveOrUpdateFriendLink(FriendLinkVO friendLinkVO) {\n        FriendLink friendLink = BeanCopyUtil.copyObject(friendLinkVO, FriendLink.class);\n        this.saveOrUpdate(friendLink);\n    }",
        "description": "这段代码是一个博客系统后端中的方法，用于保存或更新友情链接信息。它首先将FriendLinkVO对象转换成FriendLink对象，然后调用saveOrUpdate方法保存或更新友情链接。",
        "label": "JavaMethod"
    },
    {
        "id": 1537,
        "fullName": "com.aurora.util.EmailUtil.sendHtmlMail( EmailDTO emailDTO )",
        "comment": "",
        "content": "public void sendHtmlMail(EmailDTO emailDTO) {\n        try {\n            MimeMessage mimeMessage = javaMailSender.createMimeMessage();\n            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage);\n            Context context = new Context();\n            context.setVariables(emailDTO.getCommentMap());\n            String process = templateEngine.process(emailDTO.getTemplate(), context);\n            mimeMessageHelper.setFrom(email);\n            mimeMessageHelper.setTo(emailDTO.getEmail());\n            mimeMessageHelper.setSubject(emailDTO.getSubject());\n            mimeMessageHelper.setText(process, true);\n            javaMailSender.send(mimeMessage);\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }",
        "description": "这段代码是用于发送HTML格式的邮件，通过使用JavaMailSender创建MimeMessage和MimeMessageHelper来构建邮件内容，同时使用Thymeleaf模板引擎将模板与数据进行处理，最后通过JavaMailSender发送邮件。如果出现消息异常，将打印异常信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1538,
        "fullName": "com.aurora.strategy.impl.QQLoginStrategyImpl.checkQQToken( QQLoginVO qqLoginVO )",
        "comment": "",
        "content": "private void checkQQToken(QQLoginVO qqLoginVO) {\n        Map<String, String> qqData = new HashMap<>(1);\n        qqData.put(SocialLoginConstant.ACCESS_TOKEN, qqLoginVO.getAccessToken());\n        try {\n            String result = restTemplate.getForObject(qqConfigProperties.getCheckTokenUrl(), String.class, qqData);\n            QQTokenDTO qqTokenDTO = JSON.parseObject(CommonUtil.getBracketsContent(Objects.requireNonNull(result)), QQTokenDTO.class);\n            if (!qqLoginVO.getOpenId().equals(qqTokenDTO.getOpenid())) {\n                throw new BizException(QQ_LOGIN_ERROR);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(QQ_LOGIN_ERROR);\n        }\n    }",
        "description": "该方法用于检查QQ登录的token是否有效，首先将token存储在Map中，然后通过RestTemplate发送请求验证token的有效性，最后将返回的结果转换为QQTokenDTO对象并与传入的openId进行比较，如果不一致则抛出业务异常。如果出现异常则打印异常信息并抛出业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1539,
        "fullName": "com.aurora.controller.PhotoController.listPhotosByAlbumId( Integer albumId )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据相册id查看照片列表\")\n    @GetMapping(\"\/albums\/{albumId}\/photos\")\n    public ResultVO<PhotoDTO> listPhotosByAlbumId(@PathVariable(\"albumId\") Integer albumId) {\n        return ResultVO.ok(photoService.listPhotosByAlbumId(albumId));\n    }",
        "description": "根据相册id查看照片列表的接口，返回指定相册id下的照片列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1540,
        "fullName": "com.aurora.service.impl.JobLogServiceImpl.cleanJobLogs(  )",
        "comment": "",
        "content": "@Override\n    public void cleanJobLogs() {\n        jobLogMapper.delete(null);\n    }",
        "description": "这段代码是一个方法，用于清理博客系统中的作业日志数据。在方法中调用了jobLogMapper对象的delete方法来删除所有作业日志数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1541,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.removeOnlineUser( Integer userInfoId )",
        "comment": "",
        "content": "@Override\n    public void removeOnlineUser(Integer userInfoId) {\n        Integer userId = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>().eq(UserAuth::getUserInfoId, userInfoId)).getId();\n        tokenService.delLoginUser(userId);\n    }",
        "description": "该方法用于移除在线用户，根据用户信息ID查找用户ID并调用tokenService删除登录用户。",
        "label": "JavaMethod"
    },
    {
        "id": 1542,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.getUserAuth( SocialTokenDTO socialTokenDTO )",
        "comment": "",
        "content": "private UserAuth getUserAuth(SocialTokenDTO socialTokenDTO) {\n        return userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .eq(UserAuth::getUsername, socialTokenDTO.getOpenId())\n                .eq(UserAuth::getLoginType, socialTokenDTO.getLoginType()));\n    }",
        "description": "根据社交令牌信息查询用户认证信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1543,
        "fullName": "com.aurora.quartz.QuartzDisallowConcurrentExecution.doExecute( JobExecutionContext context, Job job )",
        "comment": "",
        "content": "@Override\n    protected void doExecute(JobExecutionContext context, Job job) throws Exception {\n        JobInvokeUtil.invokeMethod(job);\n    }",
        "description": "在执行作业时，调用JobInvokeUtil工具类的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1544,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.updateUserRole( UserRoleVO userRoleVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserRole(UserRoleVO userRoleVO) {\n        UserInfo userInfo = UserInfo.builder()\n                .id(userRoleVO.getUserInfoId())\n                .nickname(userRoleVO.getNickname())\n                .build();\n        userInfoMapper.updateById(userInfo);\n        userRoleService.remove(new LambdaQueryWrapper<UserRole>()\n                .eq(UserRole::getUserId, userRoleVO.getUserInfoId()));\n        List<UserRole> userRoleList = userRoleVO.getRoleIds().stream()\n                .map(roleId -> UserRole.builder()\n                        .roleId(roleId)\n                        .userId(userRoleVO.getUserInfoId())\n                        .build())\n                .collect(Collectors.toList());\n        userRoleService.saveBatch(userRoleList);\n    }",
        "description": "这段代码实现了一个更新用户角色的功能。代码中使用了事务注解@Transactional，表示该方法在执行过程中遇到异常时会回滚事务。方法内部首先根据传入的UserRoleVO对象创建一个UserInfo对象，并通过UserInfoMapper更新数据库中的用户信息。然后通过UserRoleService根据用户ID删除用户角色信息。接着根据传入的角色ID列表创建多个UserRole对象，并通过UserRoleService的saveBatch方法批量保存到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1545,
        "fullName": "com.aurora.quartz.AbstractQuartzJob.before( JobExecutionContext context, Job job )",
        "comment": "",
        "content": "protected void before(JobExecutionContext context, Job job) {\n        THREAD_LOCAL.set(new Date());\n    }",
        "description": "在执行作业之前设置当前线程的时间为当前时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1546,
        "fullName": "com.aurora.service.PhotoService.listPhotos( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<PhotoAdminDTO> listPhotos(ConditionVO conditionVO);",
        "description": "该方法用于根据条件VO对象列出相册管理DTO对象的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1547,
        "fullName": "com.aurora.mapper.RoleMapper.listResourceRoles(  )",
        "comment": "",
        "content": "List<ResourceRoleDTO> listResourceRoles();",
        "description": "该代码用于获取资源角色的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1548,
        "fullName": "com.aurora.service.FriendLinkService.listFriendLinksAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<FriendLinkAdminDTO> listFriendLinksAdmin(ConditionVO conditionVO);",
        "description": "这段代码实现了一个用于列出友情链接的后台接口，返回一个包含友情链接信息的DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1549,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.listUserAreas( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public List<UserAreaDTO> listUserAreas(ConditionVO conditionVO) {\n        List<UserAreaDTO> userAreaDTOs = new ArrayList<>();\n        switch (Objects.requireNonNull(getUserAreaType(conditionVO.getType()))) {\n            case USER:\n                Object userArea = redisService.get(USER_AREA);\n                if (Objects.nonNull(userArea)) {\n                    userAreaDTOs = JSON.parseObject(userArea.toString(), List.class);\n                }\n                return userAreaDTOs;\n            case VISITOR:\n                Map<String, Object> visitorArea = redisService.hGetAll(VISITOR_AREA);\n                if (Objects.nonNull(visitorArea)) {\n                    userAreaDTOs = visitorArea.entrySet().stream()\n                            .map(item -> UserAreaDTO.builder()\n                                    .name(item.getKey())\n                                    .value(Long.valueOf(item.getValue().toString()))\n                                    .build())\n                            .collect(Collectors.toList());\n                }\n                return userAreaDTOs;\n            default:\n                break;\n        }\n        return userAreaDTOs;\n    }",
        "description": "该方法根据条件返回用户或访客区域的列表信息，通过Redis缓存获取数据并转换为DTO对象返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1550,
        "fullName": "com.aurora.util.SpringUtil.getActiveProfiles(  )",
        "comment": "",
        "content": "public static String[] getActiveProfiles() {\n        return applicationContext.getEnvironment().getActiveProfiles();\n    }",
        "description": "该方法用于获取当前应用程序的活动配置文件。",
        "label": "JavaMethod"
    },
    {
        "id": 1551,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.listTopSixComments(  )",
        "comment": "",
        "content": "@Override\n    public List<CommentDTO> listTopSixComments() {\n        return commentMapper.listTopSixComments();\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于获取前六个置顶评论的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1552,
        "fullName": "com.aurora.mapper.CategoryMapper.listCategoriesAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<CategoryAdminDTO> listCategoriesAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个函数，用于获取博客系统后台管理中的分类列表。函数接受三个参数：当前页码(current)、每页显示数量(size)和条件对象(conditionVO)。函数返回一个包含分类信息的CategoryAdminDTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1553,
        "fullName": "com.aurora.controller.ResourceController.listResources( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看资源列表\")\n    @GetMapping(\"\/admin\/resources\")\n    public ResultVO<List<ResourceDTO>> listResources(ConditionVO conditionVO) {\n        return ResultVO.ok(resourceService.listResources(conditionVO));\n    }",
        "description": "这段代码是一个用于查看资源列表的后端接口，接受条件参数并返回资源列表的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1554,
        "fullName": "com.aurora.mapper.RoleMapper.listRoles( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<RoleDTO> listRoles(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个方法，用于通过传入的参数current、size和conditionVO来获取角色列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1555,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.getExpire( String key )",
        "comment": "",
        "content": "@Override\n    public Long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }",
        "description": "这段代码是一个重写方法，用于获取指定键的过期时间（以秒为单位）。",
        "label": "JavaMethod"
    },
    {
        "id": 1556,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.delLoginUser( Integer userId )",
        "comment": "",
        "content": "@Override\n    public void delLoginUser(Integer userId) {\n        redisService.hDel(LOGIN_USER, String.valueOf(userId));\n    }",
        "description": "该方法用于从Redis中删除指定用户的登录信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1557,
        "fullName": "com.aurora.strategy.context.ArticleImportStrategyContext.importArticles( MultipartFile file, String type )",
        "comment": "",
        "content": "public void importArticles(MultipartFile file, String type) {\n        articleImportStrategyMap.get(MarkdownTypeEnum.getMarkdownType(type)).importArticles(file);\n    }",
        "description": "该方法用于导入文章，根据指定的文章类型选择相应的导入策略并执行导入操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1558,
        "fullName": "com.aurora.service.impl.JobServiceImpl.saveJob( JobVO jobVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Transactional(rollbackFor = Exception.class)\n    public void saveJob(JobVO jobVO) {\n        checkCronIsValid(jobVO);\n        Job job = BeanCopyUtil.copyObject(jobVO, Job.class);\n        int row = jobMapper.insert(job);\n        if (row > 0) ScheduleUtil.createScheduleJob(scheduler, job);\n    }",
        "description": "这段代码实现了保存作业信息的功能，包括校验作业时间表达式的有效性、将作业VO转换为作业实体、插入作业数据到数据库并创建调度任务。同时使用了Lombok的@SneakyThrows注解和@Transactional注解来实现事务管理。",
        "label": "JavaMethod"
    },
    {
        "id": 1559,
        "fullName": "com.aurora.mapper.CommentMapper.countComments( ConditionVO conditionVO )",
        "comment": "",
        "content": "Integer countComments(@Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个用于统计评论数量的方法，接收一个ConditionVO对象作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1560,
        "fullName": "com.aurora.handler.AccessDecisionManagerImpl.decide( Authentication authentication, Object o, Collection<ConfigAttribute> collection )",
        "comment": "",
        "content": "@Override\n    public void decide(Authentication authentication, Object o, Collection<ConfigAttribute> collection) throws AccessDeniedException, InsufficientAuthenticationException {\n        List<String> permissionList = authentication.getAuthorities()\n                .stream()\n                .map(GrantedAuthority::getAuthority)\n                .collect(Collectors.toList());\n        for (ConfigAttribute item : collection) {\n            if (permissionList.contains(item.getAttribute())) {\n                return;\n            }\n        }\n        throw new AccessDeniedException(\"权限不足\");\n    }",
        "description": "该方法用于判断用户的权限是否满足访问要求，如果权限不足则抛出AccessDeniedException异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1561,
        "fullName": "com.aurora.controller.RoleController.listUserRoles(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查询用户角色选项\")\n    @GetMapping(\"\/admin\/users\/role\")\n    public ResultVO<List<UserRoleDTO>> listUserRoles() {\n        return ResultVO.ok(roleService.listUserRoles());\n    }",
        "description": "这段代码是用于查询用户角色选项的后端接口，返回用户角色数据列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1562,
        "fullName": "com.aurora.util.SpringUtil.getType( String name )",
        "comment": "",
        "content": "public static Class<?> getType(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.getType(name);\n    }",
        "description": "这段代码是一个静态方法，用于获取博客系统中指定名称的bean的类型，并返回Class对象。如果未找到对应的bean，则会抛出NoSuchBeanDefinitionException异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1563,
        "fullName": "com.aurora.service.RedisService.hDel( String key, Object hashKey )",
        "comment": "",
        "content": "void hDel(String key, Object... hashKey);",
        "description": "这段代码实现了删除指定键值对中的一个或多个字段的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1564,
        "fullName": "com.aurora.service.TalkService.getBackTalkById( Integer talkId )",
        "comment": "",
        "content": "TalkAdminDTO getBackTalkById(Integer talkId);",
        "description": "根据评论ID获取后台评论信息的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1565,
        "fullName": "com.aurora.controller.PhotoAlbumController.listPhotoAlbums(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取相册列表\")\n    @GetMapping(\"\/photos\/albums\")\n    public ResultVO<List<PhotoAlbumDTO>> listPhotoAlbums() {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbums());\n    }",
        "description": "这段代码实现了一个获取相册列表的接口，返回一个包含相册DTO的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1566,
        "fullName": "com.aurora.service.UserAuthService.updatePassword( UserVO userVO )",
        "comment": "",
        "content": "void updatePassword(UserVO userVO);",
        "description": "这段代码是用来更新用户密码的。",
        "label": "JavaMethod"
    },
    {
        "id": 1567,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.getBackTalkById( Integer talkId )",
        "comment": "",
        "content": "@Override\n    public TalkAdminDTO getBackTalkById(Integer talkId) {\n        TalkAdminDTO talkBackDTO = talkMapper.getTalkByIdAdmin(talkId);\n        if (Objects.nonNull(talkBackDTO.getImages())) {\n            talkBackDTO.setImgs(CommonUtil.castList(JSON.parseObject(talkBackDTO.getImages(), List.class), String.class));\n        }\n        return talkBackDTO;\n    }",
        "description": "根据talkId获取后台博客信息，将图片字符串转换为图片列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1568,
        "fullName": "com.aurora.controller.OperationLogController.deleteOperationLogs( List<Integer> operationLogIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除操作日志\")\n    @DeleteMapping(\"\/admin\/operation\/logs\")\n    public ResultVO<?> deleteOperationLogs(@RequestBody List<Integer> operationLogIds) {\n        operationLogService.removeByIds(operationLogIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了删除操作日志的功能，通过接收操作日志的ID列表来进行删除操作，并记录该操作为DELETE类型的日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1569,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.expire( String key, long time )",
        "comment": "",
        "content": "@Override\n    public Boolean expire(String key, long time) {\n        return redisTemplate.expire(key, time, TimeUnit.SECONDS);\n    }",
        "description": "该方法用于设置指定key在Redis中的过期时间，单位为秒。",
        "label": "JavaMethod"
    },
    {
        "id": 1570,
        "fullName": "com.aurora.service.ArticleService.listTopAndFeaturedArticles(  )",
        "comment": "",
        "content": "TopAndFeaturedArticlesDTO listTopAndFeaturedArticles();",
        "description": "这段代码返回了一个包含置顶和特色文章的数据传输对象（DTO）。",
        "label": "JavaMethod"
    },
    {
        "id": 1571,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lPushAll( String key, Long time, Object values )",
        "comment": "",
        "content": "@Override\n    public Long lPushAll(String key, Long time, Object... values) {\n        Long count = redisTemplate.opsForList().rightPushAll(key, values);\n        expire(key, time);\n        return count;\n    }",
        "description": "该方法用于向Redis中指定key的列表右侧添加多个元素，并设置列表的过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1572,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArticlesBySearch( ConditionVO condition )",
        "comment": "",
        "content": "@Override\n    public List<ArticleSearchDTO> listArticlesBySearch(ConditionVO condition) {\n        return searchStrategyContext.executeSearchStrategy(condition.getKeywords());\n    }",
        "description": "该方法根据搜索条件返回文章搜索结果的DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1573,
        "fullName": "com.aurora.config.WebSecurityConfig.accessDecisionManager(  )",
        "comment": "",
        "content": "@Bean\n    public AccessDecisionManager accessDecisionManager() {\n        return new AccessDecisionManagerImpl();\n    }",
        "description": "这段代码创建了一个名为accessDecisionManager的Bean，用于生成访问决策管理器AccessDecisionManagerImpl的实例。",
        "label": "JavaMethod"
    },
    {
        "id": 1574,
        "fullName": "com.aurora.util.ScheduleUtil.getQuartzJobClass( Job job )",
        "comment": "",
        "content": "private static Class<? extends org.quartz.Job> getQuartzJobClass(Job job) {\n        boolean isConcurrent = Integer.valueOf(1).equals(job.getConcurrent());\n        return isConcurrent ? QuartzJobExecution.class : QuartzDisallowConcurrentExecution.class;\n    }",
        "description": "根据传入的Job对象，返回对应的Quartz任务类，根据是否允许并发执行来决定返回的类类型。",
        "label": "JavaMethod"
    },
    {
        "id": 1575,
        "fullName": "com.aurora.service.RedisService.zAllScore( String key )",
        "comment": "",
        "content": "Map<Object, Double> zAllScore(String key);",
        "description": "这段代码是用来获取一个键对应的所有对象及其分数的映射。",
        "label": "JavaMethod"
    },
    {
        "id": 1576,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hSet( String key, String hashKey, Object value, long time )",
        "comment": "",
        "content": "@Override\n    public Boolean hSet(String key, String hashKey, Object value, long time) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n        return expire(key, time);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于向Redis中的哈希数据结构中设置键值对，并设置过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1577,
        "fullName": "com.aurora.config.RabbitMQConfig.bindingArticleDirect(  )",
        "comment": "",
        "content": "@Bean\n    public Binding bindingArticleDirect() {\n        return BindingBuilder.bind(articleQueue()).to(maxWellExchange());\n    }",
        "description": "这段代码用@Bean注解创建了一个名为bindingArticleDirect的方法，用于将articleQueue队列绑定到maxWellExchange交换机上。",
        "label": "JavaMethod"
    },
    {
        "id": 1578,
        "fullName": "com.aurora.service.AuroraInfoService.report(  )",
        "comment": "",
        "content": "void report();",
        "description": "这段代码定义了一个函数 report()，用于生成报告。",
        "label": "JavaMethod"
    },
    {
        "id": 1579,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl.clearDataSource(  )",
        "comment": "",
        "content": "public void clearDataSource() {\n        resourceRoleList = null;\n    }",
        "description": "这段代码是一个清除数据源的方法，它将资源角色列表设置为null，以达到清除数据源的目的。",
        "label": "JavaMethod"
    },
    {
        "id": 1580,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hSet( String key, String hashKey, Object value )",
        "comment": "",
        "content": "@Override\n    public void hSet(String key, String hashKey, Object value) {\n        redisTemplate.opsForHash().put(key, hashKey, value);\n    }",
        "description": "这段代码实现了一个博客系统后端的hSet方法，用于将指定的key、hashKey和value存储到Redis的Hash结构中。",
        "label": "JavaMethod"
    },
    {
        "id": 1581,
        "fullName": "com.aurora.controller.TalkController.deleteTalks( List<Integer> talkIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除说说\")\n    @DeleteMapping(\"\/admin\/talks\")\n    public ResultVO<?> deleteTalks(@RequestBody List<Integer> talkIds) {\n        talkService.deleteTalks(talkIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于删除说说的接口，通过接收一个包含说说ID的列表来进行删除操作。在操作记录日志中指定了删除操作类型。",
        "label": "JavaMethod"
    },
    {
        "id": 1582,
        "fullName": "com.aurora.service.impl.JobLogServiceImpl.listJobLogs( JobLogSearchVO jobLogSearchVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<JobLogDTO> listJobLogs(JobLogSearchVO jobLogSearchVO) {\n        LambdaQueryWrapper<JobLog> queryWrapper = new LambdaQueryWrapper<JobLog>()\n                .orderByDesc(JobLog::getCreateTime)\n                .eq(Objects.nonNull(jobLogSearchVO.getJobId()), JobLog::getJobId, jobLogSearchVO.getJobId())\n                .like(StringUtils.isNotBlank(jobLogSearchVO.getJobName()), JobLog::getJobName, jobLogSearchVO.getJobName())\n                .like(StringUtils.isNotBlank(jobLogSearchVO.getJobGroup()), JobLog::getJobGroup, jobLogSearchVO.getJobGroup())\n                .eq(Objects.nonNull(jobLogSearchVO.getStatus()), JobLog::getStatus, jobLogSearchVO.getStatus())\n                .between(Objects.nonNull(jobLogSearchVO.getStartTime()) && Objects.nonNull(jobLogSearchVO.getEndTime()),\n                        JobLog::getCreateTime,\n                        jobLogSearchVO.getStartTime(),\n                        jobLogSearchVO.getEndTime());\n        Page<JobLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<JobLog> jobLogPage = jobLogMapper.selectPage(page, queryWrapper);\n        List<JobLogDTO> jobLogDTOs = BeanCopyUtil.copyList(jobLogPage.getRecords(), JobLogDTO.class);\n        return new PageResultDTO<>(jobLogDTOs, (int)jobLogPage.getTotal());\n    }",
        "description": "这段代码实现了根据查询条件查询作业日志并返回结果的功能。使用LambdaQueryWrapper构建查询条件，根据作业ID、作业名称、作业组、状态、创建时间范围等条件进行筛选，最后将查询结果转换为DTO对象并返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1583,
        "fullName": "com.aurora.service.impl.TagServiceImpl.deleteTag( List<Integer> tagIds )",
        "comment": "",
        "content": "@Override\n    public void deleteTag(List<Integer> tagIds) {\n        Integer count = articleTagMapper.selectCount(new LambdaQueryWrapper<ArticleTag>()\n                .in(ArticleTag::getTagId, tagIds));\n        if (count > 0) {\n            throw new BizException(\"删除失败，该标签下存在文章\");\n        }\n        tagMapper.deleteBatchIds(tagIds);\n    }",
        "description": "该方法用于删除标签，首先检查要删除的标签是否在文章标签表中存在关联文章，如果存在则抛出异常，否则直接删除标签。",
        "label": "JavaMethod"
    },
    {
        "id": 1584,
        "fullName": "com.aurora.controller.PhotoController.deletePhotos( List<Integer> photoIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除照片\")\n    @DeleteMapping(\"\/admin\/photos\")\n    public ResultVO<?> deletePhotos(@RequestBody List<Integer> photoIds) {\n        photoService.deletePhotos(photoIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于删除照片的后端接口，通过传入照片的id列表来删除对应的照片。在删除操作时会记录操作日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1585,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.saveOrUpdateTalk( TalkVO talkVO )",
        "comment": "",
        "content": "@Override\n    public void saveOrUpdateTalk(TalkVO talkVO) {\n        Talk talk = BeanCopyUtil.copyObject(talkVO, Talk.class);\n        talk.setUserId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        this.saveOrUpdate(talk);\n    }",
        "description": "这段代码实现了保存或更新Talk对象的功能，通过BeanCopyUtil将TalkVO对象转换为Talk对象，并设置了用户ID，最后调用saveOrUpdate方法进行保存或更新操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1586,
        "fullName": "com.aurora.service.ArticleService.updateArticleTopAndFeatured( ArticleTopFeaturedVO articleTopFeaturedVO )",
        "comment": "",
        "content": "void updateArticleTopAndFeatured(ArticleTopFeaturedVO articleTopFeaturedVO);",
        "description": "该函数用于更新文章的置顶和特色属性。",
        "label": "JavaMethod"
    },
    {
        "id": 1587,
        "fullName": "com.aurora.controller.TalkController.saveTalkImages( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传说说图片\")\n    @ApiImplicitParam(name = \"file\", value = \"说说图片\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/talks\/images\")\n    public ResultVO<String> saveTalkImages(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.TALK.getPath()));\n    }",
        "description": "这段代码是一个博客系统后端的上传说说图片的接口。该接口使用了@OptLog注解来记录操作日志，@ApiOperation注解来定义接口的描述，@ApiImplicitParam注解定义了接口的参数信息。这个接口接收一个MultipartFile类型的文件参数，将文件上传到指定的路径，并返回上传后的文件路径。",
        "label": "JavaMethod"
    },
    {
        "id": 1588,
        "fullName": "com.aurora.service.ArticleService.updateArticleDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "void updateArticleDelete(DeleteVO deleteVO);",
        "description": "该函数用于更新博客文章的删除状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1589,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.listUserMenus(  )",
        "comment": "",
        "content": "@Override\n    public List<UserMenuDTO> listUserMenus() {\n        List<Menu> menus = menuMapper.listMenusByUserInfoId(UserUtil.getUserDetailsDTO().getUserInfoId());\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        return convertUserMenuList(catalogs, childrenMap);\n    }",
        "description": "该方法用于获取用户菜单列表，首先通过用户信息ID查询相应的菜单信息，然后根据菜单信息获取目录信息和子菜单信息，最终将结果转换为用户菜单DTO列表返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1590,
        "fullName": "com.aurora.mapper.JobLogMapper.listJobLogGroups(  )",
        "comment": "",
        "content": "List<String> listJobLogGroups();",
        "description": "这段代码定义了一个函数，用于返回一个字符串列表，该列表包含了所有的工作日志组。",
        "label": "JavaMethod"
    },
    {
        "id": 1591,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.accessArticle( ArticlePasswordVO articlePasswordVO )",
        "comment": "",
        "content": "@Override\n    public void accessArticle(ArticlePasswordVO articlePasswordVO) {\n        Article article = articleMapper.selectOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articlePasswordVO.getArticleId()));\n        if (Objects.isNull(article)) {\n            throw new BizException(\"文章不存在\");\n        }\n        if (article.getPassword().equals(articlePasswordVO.getArticlePassword())) {\n            redisService.sAdd(ARTICLE_ACCESS + UserUtil.getUserDetailsDTO().getId(), articlePasswordVO.getArticleId());\n        } else {\n            throw new BizException(\"密码错误\");\n        }\n    }",
        "description": "这段代码实现了访问文章的功能，首先会根据文章ID查询对应的文章，如果文章不存在则抛出异常；然后会判断用户输入的密码是否正确，如果正确则将文章ID加入到用户在Redis中的访问记录中，否则抛出密码错误的异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1592,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.updateUserAvatar( MultipartFile file )",
        "comment": "",
        "content": "@Override\n    public String updateUserAvatar(MultipartFile file) {\n        String avatar = uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.AVATAR.getPath());\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .avatar(avatar)\n                .build();\n        userInfoMapper.updateById(userInfo);\n        return avatar;\n    }",
        "description": "该方法用于更新用户头像。它接收一个MultipartFile类型的文件作为参数，将文件上传至指定路径，并返回上传后的头像路径。同时，该方法获取当前用户的用户信息ID，并将新的头像路径更新到数据库中。最后，返回更新后的头像路径。",
        "label": "JavaMethod"
    },
    {
        "id": 1593,
        "fullName": "com.aurora.service.RedisService.sAddExpire( String key, long time, Object values )",
        "comment": "",
        "content": "Long sAddExpire(String key, long time, Object... values);",
        "description": "这段代码是用于向指定键对应的集合中添加元素，并设置过期时间的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1594,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.bitCount( String key )",
        "comment": "",
        "content": "@Override\n    public Long bitCount(String key) {\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes()));\n    }",
        "description": "这段代码实现了统计指定key对应的value中bit位为1的个数。",
        "label": "JavaMethod"
    },
    {
        "id": 1595,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.updateUserInfo( UserInfoVO userInfoVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserInfo(UserInfoVO userInfoVO) {\n        UserInfo userInfo = UserInfo.builder()\n                .id(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .nickname(userInfoVO.getNickname())\n                .intro(userInfoVO.getIntro())\n                .website(userInfoVO.getWebsite())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }",
        "description": "这段代码用于更新用户信息，通过传入的UserInfoVO对象更新用户昵称、简介和网站信息。@Transactional注解用于处理事务回滚。",
        "label": "JavaMethod"
    },
    {
        "id": 1596,
        "fullName": "com.aurora.util.UserUtil.getAuthentication(  )",
        "comment": "",
        "content": "public static Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }",
        "description": "该方法用于获取当前用户的认证信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1597,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.zDecr( String key, Object value, Double score )",
        "comment": "",
        "content": "@Override\n    public Double zDecr(String key, Object value, Double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, -score);\n    }",
        "description": "这段代码是一个博客系统的后端代码，它实现了一个方法用于对指定键的有序集合中的某个元素的分数进行递减操作，并返回递减后的分数。",
        "label": "JavaMethod"
    },
    {
        "id": 1598,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl.getAttributes( Object object )",
        "comment": "",
        "content": "@Override\n    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {\n        if (CollectionUtils.isEmpty(resourceRoleList)) {\n            this.loadResourceRoleList();\n        }\n        FilterInvocation fi = (FilterInvocation) object;\n        String method = fi.getRequest().getMethod();\n        String url = fi.getRequest().getRequestURI();\n        AntPathMatcher antPathMatcher = new AntPathMatcher();\n        for (ResourceRoleDTO resourceRoleDTO : resourceRoleList) {\n            if (antPathMatcher.match(resourceRoleDTO.getUrl(), url) && resourceRoleDTO.getRequestMethod().equals(method)) {\n                List<String> roleList = resourceRoleDTO.getRoleList();\n                if (CollectionUtils.isEmpty(roleList)) {\n                    return SecurityConfig.createList(\"disable\");\n                }\n                return SecurityConfig.createList(roleList.toArray(new String[]{}));\n            }\n        }\n        return null;\n    }",
        "description": "该方法用于获取请求对象的访问权限配置信息，首先检查资源角色列表是否为空，然后根据请求的方法和URL匹配资源角色列表中的数据，返回相应的权限配置信息。如果未匹配到任何数据则返回null。",
        "label": "JavaMethod"
    },
    {
        "id": 1599,
        "fullName": "com.aurora.service.ArticleService.saveOrUpdateArticle( ArticleVO articleVO )",
        "comment": "",
        "content": "void saveOrUpdateArticle(ArticleVO articleVO);",
        "description": "保存或更新一篇文章。",
        "label": "JavaMethod"
    },
    {
        "id": 1600,
        "fullName": "com.aurora.service.impl.TagServiceImpl.listTopTenTags(  )",
        "comment": "",
        "content": "@Override\n    public List<TagDTO> listTopTenTags() {\n        return tagMapper.listTopTenTags();\n    }",
        "description": "该方法返回一个包含十个最热门标签的DTO对象列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1601,
        "fullName": "com.aurora.service.RedisService.sSize( String key )",
        "comment": "",
        "content": "Long sSize(String key);",
        "description": "这段代码定义了一个用于获取博客系统中某个键对应的值的方法，返回一个长整型数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1602,
        "fullName": "com.aurora.controller.CommentController.listCommentBackDTO( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查询后台评论\")\n    @GetMapping(\"\/admin\/comments\")\n    public ResultVO<PageResultDTO<CommentAdminDTO>> listCommentBackDTO(ConditionVO conditionVO) {\n        return ResultVO.ok(commentService.listCommentsAdmin(conditionVO));\n    }",
        "description": "这段代码实现了查询后台评论的功能，通过调用commentService中的方法获取后台评论列表，并将结果封装在ResultVO中返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1603,
        "fullName": "com.aurora.strategy.context.SearchStrategyContext.executeSearchStrategy( String keywords )",
        "comment": "",
        "content": "public List<ArticleSearchDTO> executeSearchStrategy(String keywords) {\n        return searchStrategyMap.get(getStrategy(searchMode)).searchArticle(keywords);\n    }",
        "description": "根据搜索模式获取相应的搜索策略，并根据关键词搜索文章。",
        "label": "JavaMethod"
    },
    {
        "id": 1604,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.getUserDetailDTO( HttpServletRequest request )",
        "comment": "",
        "content": "@Override\n    public UserDetailsDTO getUserDetailDTO(HttpServletRequest request) {\n        String token = Optional.ofNullable(request.getHeader(TOKEN_HEADER)).orElse(\"\").replaceFirst(TOKEN_PREFIX, \"\");\n        if (StringUtils.hasText(token) && !token.equals(\"null\")) {\n            Claims claims = parseToken(token);\n            String userId = claims.getSubject();\n            return (UserDetailsDTO) redisService.hGet(LOGIN_USER, userId);\n        }\n        return null;\n    }",
        "description": "该方法用于从请求中获取用户的详细信息，首先从请求头中提取token，然后解析token获取用户ID，最后从缓存中获取用户详细信息并返回。如果token为空或为\"null\"则返回null。",
        "label": "JavaMethod"
    },
    {
        "id": 1605,
        "fullName": "com.aurora.controller.ExceptionLogController.listExceptionLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(\"获取异常日志\")\n    @GetMapping(\"\/admin\/exception\/logs\")\n    public ResultVO<PageResultDTO<ExceptionLogDTO>> listExceptionLogs(ConditionVO conditionVO) {\n        return ResultVO.ok(exceptionLogService.listExceptionLogs(conditionVO));\n    }",
        "description": "这段代码是用于获取异常日志的后端接口，通过调用exceptionLogService来返回异常日志的分页列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1606,
        "fullName": "com.aurora.service.TagService.deleteTag( List<Integer> tagIds )",
        "comment": "",
        "content": "void deleteTag(List<Integer> tagIds);",
        "description": "该函数用于删除博客系统中的标签，接受一个包含标签ID的整型列表作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1607,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hasKey( String key )",
        "comment": "",
        "content": "@Override\n    public Boolean hasKey(String key) {\n        return redisTemplate.hasKey(key);\n    }",
        "description": "该方法用于检查Redis中是否存在指定的键。",
        "label": "JavaMethod"
    },
    {
        "id": 1608,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArticlesByTagId( Integer tagId )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticlesByTagId(Integer tagId) {\n        LambdaQueryWrapper<ArticleTag> queryWrapper = new LambdaQueryWrapper<ArticleTag>().eq(ArticleTag::getTagId, tagId);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleTagMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArticlesByTagId(PageUtil.getLimitCurrent(), PageUtil.getSize(), tagId);\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }",
        "description": "这段代码是用于根据标签ID列出文章列表的方法，其中通过异步方式获取文章数量并返回文章列表和数量信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1609,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.zReverseRangeWithScore( String key, long start, long end )",
        "comment": "",
        "content": "@Override\n    public Map<Object, Double> zReverseRangeWithScore(String key, long start, long end) {\n        return redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end)\n                .stream()\n                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));\n    }",
        "description": "该方法用于从Redis中获取指定范围内的有序集合（ZSet）元素及其分数，并返回一个Map对象，包含元素作为键，分数作为值。",
        "label": "JavaMethod"
    },
    {
        "id": 1610,
        "fullName": "com.aurora.controller.MenuController.updateMenuIsHidden( IsHiddenVO isHiddenVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改目录是否隐藏\")\n    @PutMapping(\"\/admin\/menus\/isHidden\")\n    public ResultVO<?> updateMenuIsHidden(@RequestBody IsHiddenVO isHiddenVO) {\n        menuService.updateMenuIsHidden(isHiddenVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于修改目录是否隐藏的接口，通过传入IsHiddenVO对象来更新目录的隐藏状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1611,
        "fullName": "com.aurora.controller.ArticleController.updateArticleTopAndFeatured( ArticleTopFeaturedVO articleTopFeaturedVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"修改文章是否置顶和推荐\")\n    @PutMapping(\"\/admin\/articles\/topAndFeatured\")\n    public ResultVO<?> updateArticleTopAndFeatured(@Valid @RequestBody ArticleTopFeaturedVO articleTopFeaturedVO) {\n        articleService.updateArticleTopAndFeatured(articleTopFeaturedVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是用于更新文章是否置顶和推荐的功能，通过PUT请求发送ArticleTopFeaturedVO对象，并记录操作类型为UPDATE。",
        "label": "JavaMethod"
    },
    {
        "id": 1612,
        "fullName": "com.aurora.handler.AuthenticationFailHandlerImpl.onAuthenticationFailure( HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e )",
        "comment": "",
        "content": "@Override\n    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException {\n        httpServletResponse.setContentType(CommonConstant.APPLICATION_JSON);\n        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.fail(e.getMessage())));\n    }",
        "description": "当用户认证失败时，将返回一个JSON格式的错误消息。",
        "label": "JavaMethod"
    },
    {
        "id": 1613,
        "fullName": "com.aurora.service.RedisService.hDecr( String key, String hashKey, Long delta )",
        "comment": "",
        "content": "Long hDecr(String key, String hashKey, Long delta);",
        "description": "这段代码实现了对指定键的哈希键进行减法操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1614,
        "fullName": "com.aurora.service.TalkService.deleteTalks( List<Integer> talkIdList )",
        "comment": "",
        "content": "void deleteTalks(List<Integer> talkIdList);",
        "description": "这段代码定义了一个方法，用于删除博客系统中指定的一组对话。",
        "label": "JavaMethod"
    },
    {
        "id": 1615,
        "fullName": "com.aurora.service.RedisService.lSize( String key )",
        "comment": "",
        "content": "Long lSize(String key);",
        "description": "该方法用于获取特定键对应的值的长度。",
        "label": "JavaMethod"
    },
    {
        "id": 1616,
        "fullName": "com.aurora.service.impl.JobServiceImpl.getJobById( Integer jobId )",
        "comment": "",
        "content": "@Override\n    public JobDTO getJobById(Integer jobId) {\n        Job job = jobMapper.selectById(jobId);\n        JobDTO jobDTO = BeanCopyUtil.copyObject(job, JobDTO.class);\n        Date nextExecution = CronUtil.getNextExecution(jobDTO.getCronExpression());\n        jobDTO.setNextValidTime(nextExecution);\n        return jobDTO;\n    }",
        "description": "根据传入的工作ID，从数据库中获取对应的工作信息，并通过BeanCopyUtil将其转换为DTO对象，然后计算出下次执行时间并设置到DTO中。",
        "label": "JavaMethod"
    },
    {
        "id": 1617,
        "fullName": "com.aurora.service.UserAuthService.updateAdminPassword( PasswordVO passwordVO )",
        "comment": "",
        "content": "void updateAdminPassword(PasswordVO passwordVO);",
        "description": "这段代码用于更新管理员密码。",
        "label": "JavaMethod"
    },
    {
        "id": 1618,
        "fullName": "com.aurora.controller.ResourceController.deleteResource( Integer resourceId )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除资源\")\n    @DeleteMapping(\"\/admin\/resources\/{resourceId}\")\n    public ResultVO<?> deleteResource(@PathVariable(\"resourceId\") Integer resourceId) {\n        resourceService.deleteResource(resourceId);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于删除管理员资源，根据resourceId执行删除操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1619,
        "fullName": "com.aurora.model.vo.ResultVO.ok(  )",
        "comment": "",
        "content": "public static <T> ResultVO<T> ok() {\n        return resultVO(true, SUCCESS.getCode(), SUCCESS.getDesc(), null);\n    }",
        "description": "这段代码是一个静态方法，返回一个泛型类型的ResultVO对象。该方法用于表示操作成功，返回一个包含成功状态码和描述信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1620,
        "fullName": "com.aurora.service.RedisService.decr( String key, long delta )",
        "comment": "",
        "content": "Long decr(String key, long delta);",
        "description": "这段代码是一个用于减少指定key对应值的方法，返回操作后的新值。",
        "label": "JavaMethod"
    },
    {
        "id": 1621,
        "fullName": "com.aurora.service.MenuService.listMenus( ConditionVO conditionVO )",
        "comment": "",
        "content": "List<MenuDTO> listMenus(ConditionVO conditionVO);",
        "description": "该方法用于根据条件VO对象获取菜单DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1622,
        "fullName": "com.aurora.strategy.impl.OssUploadStrategyImpl.upload( String path, String fileName, InputStream inputStream )",
        "comment": "",
        "content": "@Override\n    public void upload(String path, String fileName, InputStream inputStream) {\n        getOssClient().putObject(ossConfigProperties.getBucketName(), path + fileName, inputStream);\n    }",
        "description": "该方法实现了在博客系统中上传文件到阿里云OSS存储的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1623,
        "fullName": "com.aurora.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum( PhotoAlbumVO photoAlbumVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或更新相册\")\n    @PostMapping(\"\/admin\/photos\/albums\")\n    public ResultVO<?> saveOrUpdatePhotoAlbum(@Valid @RequestBody PhotoAlbumVO photoAlbumVO) {\n        photoAlbumService.saveOrUpdatePhotoAlbum(photoAlbumVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于保存或更新相册信息的后端接口，接收一个包含相册信息的请求体，通过调用相册服务的方法来保存或更新相册，并返回一个成功的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1624,
        "fullName": "com.aurora.controller.AuroraInfoController.updateWebsiteConfig( WebsiteConfigVO websiteConfigVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新网站配置\")\n    @PutMapping(\"\/admin\/website\/config\")\n    public ResultVO<?> updateWebsiteConfig(@Valid @RequestBody WebsiteConfigVO websiteConfigVO) {\n        auroraInfoService.updateWebsiteConfig(websiteConfigVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是用于更新网站配置的后端接口，接收并验证前端传入的网站配置数据，并更新到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1625,
        "fullName": "com.aurora.mapper.CommentMapper.listCommentCountByTypeAndTopicId( Integer type, Integer topicId )",
        "comment": "",
        "content": "CommentCountDTO listCommentCountByTypeAndTopicId(@Param(\"type\") Integer type, @Param(\"topicId\") Integer topicId);",
        "description": "根据评论类型和主题ID列出评论数量的数据传输对象CommentCountDTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1626,
        "fullName": "com.aurora.service.impl.JobLogServiceImpl.deleteJobLogs( List<Integer> ids )",
        "comment": "",
        "content": "@Override\n    public void deleteJobLogs(List<Integer> ids) {\n        LambdaQueryWrapper<JobLog> queryWrapper = new LambdaQueryWrapper<JobLog>().in(JobLog::getId, ids);\n        jobLogMapper.delete(queryWrapper);\n    }",
        "description": "这段代码实现了根据给定的ID列表删除作业日志的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1627,
        "fullName": "com.aurora.mapper.JobMapper.countJobs( JobSearchVO jobSearchVO )",
        "comment": "",
        "content": "Integer countJobs(@Param(\"jobSearchVO\") JobSearchVO jobSearchVO);",
        "description": "这段代码是一个用于统计工作数量的方法，接受一个包含搜索条件的对象作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1628,
        "fullName": "com.aurora.controller.RoleController.saveOrUpdateRole( RoleVO roleVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或更新角色\")\n    @PostMapping(\"\/admin\/role\")\n    public ResultVO<?> saveOrUpdateRole(@RequestBody @Valid RoleVO roleVO) {\n        roleService.saveOrUpdateRole(roleVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了在后端保存或更新角色信息的功能，并使用了OptLog注解记录操作类型。",
        "label": "JavaMethod"
    },
    {
        "id": 1629,
        "fullName": "com.aurora.strategy.impl.EsSearchStrategyImpl.searchArticle( String keywords )",
        "comment": "",
        "content": "@Override\n    public List<ArticleSearchDTO> searchArticle(String keywords) {\n        if (StringUtils.isBlank(keywords)) {\n            return new ArrayList<>();\n        }\n        return search(buildQuery(keywords));\n    }",
        "description": "该方法用于根据关键字搜索文章，如果关键字为空则返回空列表，否则根据构建的查询条件进行搜索。",
        "label": "JavaMethod"
    },
    {
        "id": 1630,
        "fullName": "com.aurora.service.TagService.listTagsAdminBySearch( ConditionVO conditionVO )",
        "comment": "",
        "content": "List<TagAdminDTO> listTagsAdminBySearch(ConditionVO conditionVO);",
        "description": "根据条件VO查询并返回标签管理DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1631,
        "fullName": "com.aurora.exception.BizException.BizException( String message )",
        "comment": "",
        "content": "public BizException(String message) {\n        this.message = message;\n    }",
        "description": "这段代码定义了一个名为BizException的自定义异常类，用于接收并存储异常信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1632,
        "fullName": "com.aurora.model.vo.ResultVO.fail( T data, String message )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail(T data, String message) {\n        return resultVO(false, FAIL.getCode(), message, data);\n    }",
        "description": "这是一个用于返回失败结果的静态方法，包含数据和消息。",
        "label": "JavaMethod"
    },
    {
        "id": 1633,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl.saveOrUpdateCategory( CategoryVO categoryVO )",
        "comment": "",
        "content": "@Override\n    public void saveOrUpdateCategory(CategoryVO categoryVO) {\n        Category existCategory = categoryMapper.selectOne(new LambdaQueryWrapper<Category>()\n                .select(Category::getId)\n                .eq(Category::getCategoryName, categoryVO.getCategoryName()));\n        if (Objects.nonNull(existCategory) && !existCategory.getId().equals(categoryVO.getId())) {\n            throw new BizException(\"分类名已存在\");\n        }\n        Category category = Category.builder()\n                .id(categoryVO.getId())\n                .categoryName(categoryVO.getCategoryName())\n                .build();\n        this.saveOrUpdate(category);\n    }",
        "description": "该代码用于保存或更新博客分类信息，首先通过分类名称查询数据库中是否已存在同名分类，如果存在且不是当前分类，则抛出业务异常。然后根据传入的CategoryVO对象构建Category对象，最后调用saveOrUpdate方法保存或更新分类信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1634,
        "fullName": "com.aurora.controller.PhotoController.updatePhoto( PhotoInfoVO photoInfoVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"更新照片信息\")\n    @PutMapping(\"\/admin\/photos\")\n    public ResultVO<?> updatePhoto(@Valid @RequestBody PhotoInfoVO photoInfoVO) {\n        photoService.updatePhoto(photoInfoVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于更新照片信息的方法，通过PUT请求发送PhotoInfoVO对象，然后调用photoService.updatePhoto方法进行更新，并返回一个ResultVO对象。同时使用了OptLog注解来记录操作类型为UPDATE。",
        "label": "JavaMethod"
    },
    {
        "id": 1635,
        "fullName": "com.aurora.service.TalkService.getTalkById( Integer talkId )",
        "comment": "",
        "content": "TalkDTO getTalkById(Integer talkId);",
        "description": "根据talkId获取对话的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1636,
        "fullName": "com.aurora.service.impl.JobServiceImpl.updateJobStatus( JobStatusVO jobStatusVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public void updateJobStatus(JobStatusVO jobStatusVO) {\n        Job job = jobMapper.selectById(jobStatusVO.getId());\n        if (job.getStatus().equals(jobStatusVO.getStatus())) {\n            return;\n        }\n        Integer status = jobStatusVO.getStatus();\n        Integer jobId = job.getId();\n        String jobGroup = job.getJobGroup();\n        LambdaUpdateWrapper<Job> updateWrapper = new LambdaUpdateWrapper<>();\n        updateWrapper.eq(Job::getId, jobStatusVO.getId()).set(Job::getStatus, status);\n        int row = jobMapper.update(null, updateWrapper);\n        if (row > 0) {\n            if (JobStatusEnum.NORMAL.getValue().equals(status)) {\n                scheduler.resumeJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n            } else if (JobStatusEnum.PAUSE.getValue().equals(status)) {\n                scheduler.pauseJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n            }\n        }\n    }",
        "description": "这段代码实现了更新作业状态的功能，根据传入的作业状态对象，通过查询作业信息并比较状态是否相同来判断是否需要更新，然后更新数据库中的状态信息，并根据不同的状态值进行作业的暂停或恢复操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1637,
        "fullName": "com.aurora.service.RedisService.lRange( String key, long start, long end )",
        "comment": "",
        "content": "List<Object> lRange(String key, long start, long end);",
        "description": "这段代码是一个博客系统后端的函数，用于获取指定范围内的博客列表。函数接收一个键值和起始位置、结束位置作为参数，并返回一个对象列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1638,
        "fullName": "com.aurora.controller.UserAuthController.updatePassword( UserVO user )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改密码\")\n    @PutMapping(\"\/users\/password\")\n    public ResultVO<?> updatePassword(@Valid @RequestBody UserVO user) {\n        userAuthService.updatePassword(user);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了一个修改密码的功能，通过PUT方法访问\"\/users\/password\"接口，接收一个UserVO对象作为参数，然后调用userAuthService的updatePassword方法来更新密码，并返回操作结果。同时，该方法被标记为更新操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1639,
        "fullName": "com.aurora.strategy.SocialLoginStrategy.login( String data )",
        "comment": "",
        "content": "UserInfoDTO login(String data);",
        "description": "该方法是用于用户登录的，会返回一个包含用户信息的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1640,
        "fullName": "com.aurora.util.JobInvokeUtil.getMethodName( String invokeTarget )",
        "comment": "",
        "content": "public static String getMethodName(String invokeTarget) {\n        String methodName = StringUtils.substringBefore(invokeTarget, \"(\");\n        return StringUtils.substringAfterLast(methodName, \".\");\n    }",
        "description": "该方法用于从调用目标中提取方法名，以\".\"为分隔符获取最后一个部分作为方法名。",
        "label": "JavaMethod"
    },
    {
        "id": 1641,
        "fullName": "com.aurora.service.impl.TagServiceImpl.saveOrUpdateTag( TagVO tagVO )",
        "comment": "",
        "content": "@Override\n    public void saveOrUpdateTag(TagVO tagVO) {\n        Tag existTag = tagMapper.selectOne(new LambdaQueryWrapper<Tag>()\n                .select(Tag::getId)\n                .eq(Tag::getTagName, tagVO.getTagName()));\n        if (Objects.nonNull(existTag) && !existTag.getId().equals(tagVO.getId())) {\n            throw new BizException(\"标签名已存在\");\n        }\n        Tag tag = BeanCopyUtil.copyObject(tagVO, Tag.class);\n        this.saveOrUpdate(tag);\n    }",
        "description": "该方法用于保存或更新标签信息，首先检查标签名是否已存在，如果存在且不是当前标签，则抛出异常，否则将标签信息保存或更新。",
        "label": "JavaMethod"
    },
    {
        "id": 1642,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArticles(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticles() {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, 0)\n                .in(Article::getStatus, 1, 2);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.listArticles(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }",
        "description": "该方法用于获取文章列表，首先使用LambdaQueryWrapper构建查询条件，然后使用CompletableFuture实现异步查询文章总数，最后返回包含文章列表和总数的PageResultDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1643,
        "fullName": "com.aurora.service.TalkService.listBackTalks( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<TalkAdminDTO> listBackTalks(ConditionVO conditionVO);",
        "description": "这段代码是用于在博客系统后端获取满足条件的talk信息并以PageResultDTO<TalkAdminDTO>的形式返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1644,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.getUserInfoById( Integer id )",
        "comment": "",
        "content": "@Override\n    public UserInfoDTO getUserInfoById(Integer id) {\n        UserInfo userInfo = userInfoMapper.selectById(id);\n        return BeanCopyUtil.copyObject(userInfo, UserInfoDTO.class);\n    }",
        "description": "根据用户id获取用户信息，并将其转换为DTO对象返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1645,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hSetAll( String key, Map<String,Object> map, long time )",
        "comment": "",
        "content": "@Override\n    public Boolean hSetAll(String key, Map<String, Object> map, long time) {\n        redisTemplate.opsForHash().putAll(key, map);\n        return expire(key, time);\n    }",
        "description": "该方法用于将指定的Map中的键值对存储到Redis的哈希数据结构中，并设置过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1646,
        "fullName": "com.aurora.service.JobService.runJob( JobRunVO jobRunVO )",
        "comment": "",
        "content": "void runJob(JobRunVO jobRunVO);",
        "description": "该代码定义了一个函数runJob，用于处理传入的JobRunVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1647,
        "fullName": "com.aurora.service.RedisService.lPushAll( String key, Object values )",
        "comment": "",
        "content": "Long lPushAll(String key, Object... values);",
        "description": "该方法用于将多个值一次性添加到指定键的列表中。",
        "label": "JavaMethod"
    },
    {
        "id": 1648,
        "fullName": "com.aurora.util.FileUtil.multipartFileToFile( MultipartFile multipartFile )",
        "comment": "",
        "content": "public static File multipartFileToFile(MultipartFile multipartFile) {\n        File file = null;\n        try {\n            String originalFilename = multipartFile.getOriginalFilename();\n            String[] filename = Objects.requireNonNull(originalFilename).split(\"\\\\.\");\n            file = File.createTempFile(filename[0], filename[1]);\n            multipartFile.transferTo(file);\n            file.deleteOnExit();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return file;\n    }",
        "description": "该方法将MultipartFile对象转换为临时文件并返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1649,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.listBackTalks( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<TalkAdminDTO> listBackTalks(ConditionVO conditionVO) {\n        Integer count = talkMapper.selectCount(new LambdaQueryWrapper<Talk>()\n                .eq(Objects.nonNull(conditionVO.getStatus()), Talk::getStatus, conditionVO.getStatus()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TalkAdminDTO> talkDTOs = talkMapper.listTalksAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        talkDTOs.forEach(item -> {\n            if (Objects.nonNull(item.getImages())) {\n                item.setImgs(CommonUtil.castList(JSON.parseObject(item.getImages(), List.class), String.class));\n            }\n        });\n        return new PageResultDTO<>(talkDTOs, count);\n    }",
        "description": "这段代码是用于后台管理系统中获取帖子列表的方法，根据条件VO筛选帖子数量，并返回帖子列表和数量的分页结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1650,
        "fullName": "com.aurora.controller.JobController.listJobs( JobSearchVO jobSearchVO )",
        "comment": "",
        "content": "@ApiOperation(\"获取任务列表\")\n    @GetMapping(\"\/admin\/jobs\")\n    public ResultVO<PageResultDTO<JobDTO>> listJobs(JobSearchVO jobSearchVO) {\n        return ResultVO.ok(jobService.listJobs(jobSearchVO));\n    }",
        "description": "这段代码是一个博客系统后端接口，用于获取任务列表。通过GET请求访问\"\/admin\/jobs\"路径，将传入的jobSearchVO参数传递给jobService.listJobs方法并返回结果。返回的结果是一个ResultVO对象，包含一个PageResultDTO对象，其中包含了任务列表的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1651,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.listComments( CommentVO commentVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<CommentDTO> listComments(CommentVO commentVO) {\n        Integer commentCount = commentMapper.selectCount(new LambdaQueryWrapper<Comment>()\n                .eq(Objects.nonNull(commentVO.getTopicId()), Comment::getTopicId, commentVO.getTopicId())\n                .eq(Comment::getType, commentVO.getType())\n                .isNull(Comment::getParentId)\n                .eq(Comment::getIsReview, TRUE));\n        if (commentCount == 0) {\n            return new PageResultDTO<>();\n        }\n        List<CommentDTO> commentDTOs = commentMapper.listComments(PageUtil.getLimitCurrent(), PageUtil.getSize(), commentVO);\n        if (CollectionUtils.isEmpty(commentDTOs)) {\n            return new PageResultDTO<>();\n        }\n        List<Integer> commentIds = commentDTOs.stream()\n                .map(CommentDTO::getId)\n                .collect(Collectors.toList());\n        List<ReplyDTO> replyDTOS = commentMapper.listReplies(commentIds);\n        Map<Integer, List<ReplyDTO>> replyMap = replyDTOS.stream()\n                .collect(Collectors.groupingBy(ReplyDTO::getParentId));\n        commentDTOs.forEach(item -> item.setReplyDTOs(replyMap.get(item.getId())));\n        return new PageResultDTO<>(commentDTOs, commentCount);\n    }",
        "description": "该方法用于获取评论列表，首先根据条件查询评论数量，然后根据分页信息获取评论列表，并获取对应的回复列表，最终返回评论列表及评论数量。",
        "label": "JavaMethod"
    },
    {
        "id": 1652,
        "fullName": "com.aurora.model.vo.ResultVO.fail( StatusCodeEnum statusCodeEnum )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail(StatusCodeEnum statusCodeEnum) {\n        return resultVO(false, statusCodeEnum.getCode(), statusCodeEnum.getDesc(), null);\n    }",
        "description": "该方法用于返回一个失败的结果对象，包含指定的状态码和描述信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1653,
        "fullName": "com.aurora.controller.UserInfoController.saveUserEmail( EmailVO emailVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"绑定用户邮箱\")\n    @PutMapping(\"\/users\/email\")\n    public ResultVO<?> saveUserEmail(@Valid @RequestBody EmailVO emailVO) {\n        userInfoService.saveUserEmail(emailVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于更新用户邮箱的API接口。接口使用PUT请求方式，接收一个有效的EmailVO对象作为请求体参数，然后调用userInfoService的saveUserEmail方法来保存用户邮箱信息，并返回一个ResultVO对象作为响应结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1654,
        "fullName": "com.aurora.controller.ArticleController.listArticlesBySearch( ConditionVO condition )",
        "comment": "",
        "content": "@ApiOperation(value = \"搜索文章\")\n    @GetMapping(\"\/articles\/search\")\n    public ResultVO<List<ArticleSearchDTO>> listArticlesBySearch(ConditionVO condition) {\n        return ResultVO.ok(articleService.listArticlesBySearch(condition));\n    }",
        "description": "这段代码是一个博客系统的后端接口，用于搜索文章。通过GET请求访问\"\/articles\/search\"，根据传入的搜索条件返回符合条件的文章列表。返回结果为一个包含文章搜索结果的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1655,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.init(  )",
        "comment": "",
        "content": "@PostConstruct\n    public void init() {\n        CommentTypeEnum[] values = CommentTypeEnum.values();\n        for (CommentTypeEnum value : values) {\n            types.add(value.getType());\n        }\n    }",
        "description": "在初始化方法中，将评论类型枚举的所有类型添加到一个列表中。",
        "label": "JavaMethod"
    },
    {
        "id": 1656,
        "fullName": "com.aurora.interceptor.AccessLimitInterceptor.preHandle( HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler )",
        "comment": "",
        "content": "@Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler) throws Exception {\n        if (handler instanceof HandlerMethod) {\n            HandlerMethod handlerMethod = (HandlerMethod) handler;\n            AccessLimit accessLimit = handlerMethod.getMethodAnnotation(AccessLimit.class);\n            if (accessLimit != null) {\n                long seconds = accessLimit.seconds();\n                int maxCount = accessLimit.maxCount();\n                String key = IpUtil.getIpAddress(httpServletRequest) + \"-\" + handlerMethod.getMethod().getName();\n                try {\n                    long q = redisService.incrExpire(key, seconds);\n                    if (q > maxCount) {\n                        render(httpServletResponse, ResultVO.fail(\"请求过于频繁，\" + seconds + \"秒后再试\"));\n                        log.warn(key + \"请求次数超过每\" + seconds + \"秒\" + maxCount + \"次\");\n                        return false;\n                    }\n                    return true;\n                } catch (RedisConnectionFailureException e) {\n                    log.warn(\"redis错误: \" + e.getMessage());\n                    return false;\n                }\n            }\n        }\n        return true;\n    }",
        "description": "这段代码实现了一个拦截器，用于限制用户访问频率。根据注解配置的时间间隔和最大访问次数，通过Redis记录用户访问次数，并在达到限制时返回请求过于频繁的提示信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1657,
        "fullName": "com.aurora.service.impl.ExceptionLogServiceImpl.listExceptionLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<ExceptionLogDTO> listExceptionLogs(ConditionVO conditionVO) {\n        Page<ExceptionLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<ExceptionLog> exceptionLogPage = this.page(page, new LambdaQueryWrapper<ExceptionLog>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), ExceptionLog::getOptDesc, conditionVO.getKeywords())\n                .orderByDesc(ExceptionLog::getId));\n        List<ExceptionLogDTO> exceptionLogDTOs = BeanCopyUtil.copyList(exceptionLogPage.getRecords(), ExceptionLogDTO.class);\n        return new PageResultDTO<>(exceptionLogDTOs, (int) exceptionLogPage.getTotal());\n    }",
        "description": "该方法用于获取异常日志列表。根据传入的条件，通过查询数据库获取符合条件的异常日志列表，并按照日志的ID倒序排列。然后将查询结果转换为DTO对象列表，并返回包含DTO列表和总记录数的分页结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1658,
        "fullName": "com.aurora.handler.AuthenticationSuccessHandlerImpl.updateUserInfo(  )",
        "comment": "",
        "content": "@Async\n    public void updateUserInfo() {\n        UserAuth userAuth = UserAuth.builder()\n                .id(UserUtil.getUserDetailsDTO().getId())\n                .ipAddress(UserUtil.getUserDetailsDTO().getIpAddress())\n                .ipSource(UserUtil.getUserDetailsDTO().getIpSource())\n                .lastLoginTime(UserUtil.getUserDetailsDTO().getLastLoginTime())\n                .build();\n        userAuthMapper.updateById(userAuth);\n    }",
        "description": "这段代码使用@Async注解异步更新用户信息，获取用户详细信息并将其更新到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1659,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hDel( String key, Object hashKey )",
        "comment": "",
        "content": "@Override\n    public void hDel(String key, Object... hashKey) {\n        redisTemplate.opsForHash().delete(key, hashKey);\n    }",
        "description": "这段代码是一个用于删除Redis中哈希表中指定键值对的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1660,
        "fullName": "com.aurora.service.JobLogService.listJobLogs( JobLogSearchVO jobLogSearchVO )",
        "comment": "",
        "content": "PageResultDTO<JobLogDTO> listJobLogs(JobLogSearchVO jobLogSearchVO);",
        "description": "这段代码是用于根据给定条件搜索作业日志并返回结果的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1661,
        "fullName": "com.aurora.filter.JwtAuthenticationTokenFilter.doFilterInternal( HttpServletRequest request, HttpServletResponse response, FilterChain filterChain )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) {\n        UserDetailsDTO userDetailsDTO = tokenService.getUserDetailDTO(request);\n        if (Objects.nonNull(userDetailsDTO) && Objects.isNull(UserUtil.getAuthentication())) {\n            tokenService.renewToken(userDetailsDTO);\n            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetailsDTO, null, userDetailsDTO.getAuthorities());\n            SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        }\n        filterChain.doFilter(request, response);\n    }",
        "description": "这段代码是一个后端过滤器，用于处理用户的身份认证和权限管理。如果用户的身份信息存在但未认证，则会更新用户的令牌并设置用户的认证信息，然后继续执行过滤器链。",
        "label": "JavaMethod"
    },
    {
        "id": 1662,
        "fullName": "com.aurora.util.FileUtil.getExtName( String fileName )",
        "comment": "",
        "content": "public static String getExtName(String fileName) {\n        if (StringUtils.isBlank(fileName)) {\n            return \"\";\n        }\n        return fileName.substring(fileName.lastIndexOf(\".\"));\n    }",
        "description": "这段代码是一个静态方法，用于获取文件名的扩展名。如果文件名为空，则返回空字符串，否则返回文件名中最后一个点后的字符串作为扩展名。",
        "label": "JavaMethod"
    },
    {
        "id": 1663,
        "fullName": "com.aurora.service.RedisService.bitGet( String key, int offset )",
        "comment": "",
        "content": "Boolean bitGet(String key, int offset);",
        "description": "根据给定的键和偏移量获取位的布尔值。",
        "label": "JavaMethod"
    },
    {
        "id": 1664,
        "fullName": "com.aurora.util.IpUtil.getIpSource( String ipAddress )",
        "comment": "",
        "content": "public static String getIpSource(String ipAddress) {\n        if (ipAddress == null || !Util.isIpAddress(ipAddress)) {\n            log.error(\"Error: Invalid ip address\");\n            return \"\";\n        }\n        try {\n            DataBlock dataBlock = (DataBlock) method.invoke(searcher, ipAddress);\n            String ipInfo = dataBlock.getRegion();\n            if (!StringUtils.isEmpty(ipInfo)) {\n                ipInfo = ipInfo.replace(\"|0\", \"\");\n                ipInfo = ipInfo.replace(\"0|\", \"\");\n                return ipInfo;\n            }\n        } catch (Exception e) {\n            log.error(\"getCityInfo exception:\", e);\n        }\n        return \"\";\n    }",
        "description": "该方法用于根据传入的IP地址获取其来源信息，如果IP地址为空或不合法则返回空字符串。通过反射调用搜索器的方法来获取IP地址对应的数据块，然后提取出该IP地址的地区信息并进行处理后返回。如果出现异常则记录错误日志并返回空字符串。",
        "label": "JavaMethod"
    },
    {
        "id": 1665,
        "fullName": "com.aurora.controller.FriendLinkController.listFriendLinks(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看友链列表\")\n    @GetMapping(\"\/links\")\n    public ResultVO<List<FriendLinkDTO>> listFriendLinks() {\n        return ResultVO.ok(friendLinkService.listFriendLinks());\n    }",
        "description": "这段代码实现了一个API接口，用于查看友情链接列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1666,
        "fullName": "com.aurora.event.OperationLogEvent.OperationLogEvent( OperationLog operationLog )",
        "comment": "",
        "content": "public OperationLogEvent(OperationLog operationLog) {\n        super(operationLog);\n    }",
        "description": "该代码是一个构造函数，用于创建一个操作日志事件，将操作日志对象作为参数传入。",
        "label": "JavaMethod"
    },
    {
        "id": 1667,
        "fullName": "com.aurora.util.SpringUtil.containsBean( String name )",
        "comment": "",
        "content": "public static boolean containsBean(String name) {\n        return beanFactory.containsBean(name);\n    }",
        "description": "该方法用于检查指定名称的bean是否存在于bean工厂中。",
        "label": "JavaMethod"
    },
    {
        "id": 1668,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.importSwagger(  )",
        "comment": "",
        "content": "@SuppressWarnings(\"all\")\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void importSwagger() {\n        this.remove(null);\n        roleResourceMapper.delete(null);\n        List<Resource> resources = new ArrayList<>();\n        Map<String, Object> data = restTemplate.getForObject(\"http:\/\/localhost:8080\/v2\/api-docs\", Map.class);\n        List<Map<String, String>> tagList = (List<Map<String, String>>) data.get(\"tags\");\n        tagList.forEach(item -> {\n            Resource resource = Resource.builder()\n                    .resourceName(item.get(\"name\"))\n                    .isAnonymous(FALSE)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            resources.add(resource);\n        });\n        this.saveBatch(resources);\n        Map<String, Integer> permissionMap = resources.stream()\n                .collect(Collectors.toMap(Resource::getResourceName, Resource::getId));\n        resources.clear();\n        Map<String, Map<String, Map<String, Object>>> path = (Map<String, Map<String, Map<String, Object>>>) data.get(\"paths\");\n        path.forEach((url, value) -> value.forEach((requestMethod, info) -> {\n            String permissionName = info.get(\"summary\").toString();\n            List<String> tag = (List<String>) info.get(\"tags\");\n            Integer parentId = permissionMap.get(tag.get(0));\n            Resource resource = Resource.builder()\n                    .resourceName(permissionName)\n                    .url(url.replaceAll(\"\\\\{[^}]*\\\\}\", \"*\"))\n                    .parentId(parentId)\n                    .requestMethod(requestMethod.toUpperCase())\n                    .isAnonymous(FALSE)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            resources.add(resource);\n        }));\n        this.saveBatch(resources);\n    }",
        "description": "该方法实现了从Swagger接口文档中导入资源和权限信息到系统中的功能，通过调用远程接口获取数据，并根据数据结构处理资源和权限的导入过程。",
        "label": "JavaMethod"
    },
    {
        "id": 1669,
        "fullName": "com.aurora.AuroraSpringbootApplication.main( String[] args )",
        "comment": "",
        "content": "public static void main(String[] args) {\n        SpringApplication.run(AuroraSpringbootApplication.class, args);\n    }",
        "description": "这段代码是一个Spring Boot应用程序的入口，通过调用SpringApplication的run方法启动AuroraSpringbootApplication类。",
        "label": "JavaMethod"
    },
    {
        "id": 1670,
        "fullName": "com.aurora.model.vo.ResultVO.ok( T data )",
        "comment": "",
        "content": "public static <T> ResultVO<T> ok(T data) {\n        return resultVO(true, SUCCESS.getCode(), SUCCESS.getDesc(), data);\n    }",
        "description": "这段代码是一个静态方法，用于返回一个成功的ResultVO对象，包含指定的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1671,
        "fullName": "com.aurora.controller.ArticleController.getArticlesByCategoryId( Integer categoryId )",
        "comment": "",
        "content": "@ApiOperation(\"根据分类id获取文章\")\n    @GetMapping(\"\/articles\/categoryId\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> getArticlesByCategoryId(@RequestParam Integer categoryId) {\n        return ResultVO.ok(articleService.listArticlesByCategoryId(categoryId));\n    }",
        "description": "根据分类id获取文章的接口，返回包含文章卡片DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1672,
        "fullName": "com.aurora.service.JobService.listJobs( JobSearchVO jobSearchVO )",
        "comment": "",
        "content": "PageResultDTO<JobDTO> listJobs(JobSearchVO jobSearchVO);",
        "description": "这段代码是一个博客系统的后端代码，用于根据给定的JobSearchVO对象来返回一个包含JobDTO对象的PageResultDTO对象，用于展示博客系统中的工作列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1673,
        "fullName": "com.aurora.util.JobInvokeUtil.invokeMethod( Job job )",
        "comment": "",
        "content": "public static void invokeMethod(Job job) throws Exception {\n        String invokeTarget = job.getInvokeTarget();\n        String beanName = getBeanName(invokeTarget);\n        String methodName = getMethodName(invokeTarget);\n        List<Object[]> methodParams = getMethodParams(invokeTarget);\n\n        if (!isValidClassName(beanName)) {\n            Object bean = SpringUtil.getBean(beanName);\n            invokeMethod(bean, methodName, methodParams);\n        } else {\n            Object bean = Class.forName(beanName).newInstance();\n            invokeMethod(bean, methodName, methodParams);\n        }\n    }",
        "description": "这段代码实现了根据传入的任务对象调用相应的方法。首先从任务对象中获取要调用的目标对象和方法名，以及方法参数列表。然后根据目标对象名判断是否为有效的类名，如果是则使用反射创建对象，否则使用SpringUtil获取对象。最后调用目标对象的方法并传入参数列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1674,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.listMenus( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public List<MenuDTO> listMenus(ConditionVO conditionVO) {\n        List<Menu> menus = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Menu::getName, conditionVO.getKeywords()));\n        List<Menu> catalogs = listCatalogs(menus);\n        Map<Integer, List<Menu>> childrenMap = getMenuMap(menus);\n        List<MenuDTO> menuDTOs = catalogs.stream().map(item -> {\n            MenuDTO menuDTO = BeanCopyUtil.copyObject(item, MenuDTO.class);\n            List<MenuDTO> list = BeanCopyUtil.copyList(childrenMap.get(item.getId()), MenuDTO.class).stream()\n                    .sorted(Comparator.comparing(MenuDTO::getOrderNum))\n                    .collect(Collectors.toList());\n            menuDTO.setChildren(list);\n            childrenMap.remove(item.getId());\n            return menuDTO;\n        }).sorted(Comparator.comparing(MenuDTO::getOrderNum)).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(childrenMap)) {\n            List<Menu> childrenList = new ArrayList<>();\n            childrenMap.values().forEach(childrenList::addAll);\n            List<MenuDTO> childrenDTOList = childrenList.stream()\n                    .map(item -> BeanCopyUtil.copyObject(item, MenuDTO.class))\n                    .sorted(Comparator.comparing(MenuDTO::getOrderNum))\n                    .collect(Collectors.toList());\n            menuDTOs.addAll(childrenDTOList);\n        }\n        return menuDTOs;\n    }",
        "description": "该方法用于获取菜单列表，根据条件VO查询菜单，并根据菜单的层级关系构建菜单DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1675,
        "fullName": "com.aurora.util.IpUtil.getIpAddress( HttpServletRequest request )",
        "comment": "",
        "content": "public static String getIpAddress(HttpServletRequest request) {\n        String ipAddress = request.getHeader(\"X-Real-IP\");\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"x-forwarded-for\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"HTTP_CLIENT_IP\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\n        }\n        if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n            ipAddress = request.getRemoteAddr();\n            if (\"127.0.0.1\".equals(ipAddress) || \"0:0:0:0:0:0:0:1\".equals(ipAddress)) {\n                \/\/根据网卡取本机配置的IP\n                InetAddress inet = null;\n                try {\n                    inet = InetAddress.getLocalHost();\n                } catch (UnknownHostException e) {\n                    log.error(\"getIpAddress exception:\", e);\n                }\n                assert inet != null;\n                ipAddress = inet.getHostAddress();\n            }\n        }\n        return StringUtils.substringBefore(ipAddress, \",\");\n    }",
        "description": "该方法用于获取客户端的IP地址，首先尝试从请求头中获取\"X-Real-IP\"，如果为空或为\"unknown\"，则依次尝试获取\"x-forwarded-for\"、\"Proxy-Client-IP\"、\"WL-Proxy-Client-IP\"、\"HTTP_CLIENT_IP\"、\"HTTP_X_FORWARDED_FOR\"的值，如果仍为空或为\"unknown\"，则最终返回请求的远程地址。如果最终获取到的IP地址为本地地址，则尝试通过本地主机获取IP地址。",
        "label": "JavaMethod"
    },
    {
        "id": 1676,
        "fullName": "com.aurora.model.vo.ResultVO.fail( T data )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail(T data) {\n        return resultVO(false, FAIL.getCode(), FAIL.getDesc(), data);\n    }",
        "description": "这段代码是一个静态方法，用于返回一个包含失败状态信息的ResultVO对象，其中包含传入的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1677,
        "fullName": "com.aurora.controller.TalkController.getBackTalkById( Integer talkId )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据id查看后台说说\")\n    @ApiImplicitParam(name = \"talkId\", value = \"说说id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/talks\/{talkId}\")\n    public ResultVO<TalkAdminDTO> getBackTalkById(@PathVariable(\"talkId\") Integer talkId) {\n        return ResultVO.ok(talkService.getBackTalkById(talkId));\n    }",
        "description": "根据id查看后台说说的API接口，需要传入说说id，返回对应的后台说说信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1678,
        "fullName": "com.aurora.controller.ArticleController.deleteArticles( List<Integer> articleIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"物理删除文章\")\n    @DeleteMapping(\"\/admin\/articles\/delete\")\n    public ResultVO<?> deleteArticles(@RequestBody List<Integer> articleIds) {\n        articleService.deleteArticles(articleIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了通过删除文章ID列表来物理删除文章的功能，并且在操作日志中记录了删除操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1679,
        "fullName": "com.aurora.strategy.impl.MinioUploadStrategyImpl.upload( String path, String fileName, InputStream inputStream )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public void upload(String path, String fileName, InputStream inputStream) {\n        getMinioClient().putObject(\n                PutObjectArgs.builder().bucket(minioProperties.getBucketName()).object(path + fileName).stream(\n                                inputStream, inputStream.available(), -1)\n                        .build());\n    }",
        "description": "这段代码实现了在博客系统中上传文件的功能，通过MinioClient将文件流上传到指定的存储桶中。",
        "label": "JavaMethod"
    },
    {
        "id": 1680,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.updateCommentsReview( ReviewVO reviewVO )",
        "comment": "",
        "content": "@Override\n    public void updateCommentsReview(ReviewVO reviewVO) {\n        List<Comment> comments = reviewVO.getIds().stream().map(item -> Comment.builder()\n                        .id(item)\n                        .isReview(reviewVO.getIsReview())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(comments);\n    }",
        "description": "该方法用于更新评论的审核状态，根据传入的ReviewVO对象中的ids列表，将评论的审核状态更新为ReviewVO对象中指定的状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1681,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sSize( String key )",
        "comment": "",
        "content": "@Override\n    public Long sSize(String key) {\n        return redisTemplate.opsForSet().size(key);\n    }",
        "description": "这段代码是一个用于获取Redis中集合大小的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1682,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl.getAllConfigAttributes(  )",
        "comment": "",
        "content": "@Override\n    public Collection<ConfigAttribute> getAllConfigAttributes() {\n        return null;\n    }",
        "description": "该方法覆盖了接口中获取所有配置属性的方法，但未实现具体的逻辑，直接返回了null。",
        "label": "JavaMethod"
    },
    {
        "id": 1683,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.updatePhotoDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhotoDelete(DeleteVO deleteVO) {\n        List<Photo> photoList = deleteVO.getIds().stream().map(item -> Photo.builder()\n                        .id(item)\n                        .isDelete(deleteVO.getIsDelete())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(photoList);\n        if (deleteVO.getIsDelete().equals(FALSE)) {\n            List<PhotoAlbum> photoAlbumList = photoMapper.selectList(new LambdaQueryWrapper<Photo>()\n                            .select(Photo::getAlbumId)\n                            .in(Photo::getId, deleteVO.getIds())\n                            .groupBy(Photo::getAlbumId))\n                    .stream()\n                    .map(item -> PhotoAlbum.builder()\n                            .id(item.getAlbumId())\n                            .isDelete(FALSE)\n                            .build())\n                    .collect(Collectors.toList());\n            photoAlbumService.updateBatchById(photoAlbumList);\n        }\n    }",
        "description": "该方法用于更新照片的删除状态，根据传入的DeleteVO对象中的ids列表来批量更新照片的删除状态，并根据isDelete字段判断是否需要同时更新关联的相册的删除状态为FALSE。@Transactional注解表示在方法执行过程中如果出现异常则进行事务回滚。",
        "label": "JavaMethod"
    },
    {
        "id": 1684,
        "fullName": "com.aurora.util.FileUtil.getAccuracy( long size )",
        "comment": "",
        "content": "private static double getAccuracy(long size) {\n        double accuracy;\n        if (size < 900) {\n            accuracy = 0.85;\n        } else if (size < 2048) {\n            accuracy = 0.6;\n        } else if (size < 3072) {\n            accuracy = 0.44;\n        } else {\n            accuracy = 0.4;\n        }\n        return accuracy;\n    }",
        "description": "根据输入的博客大小，返回对应的准确度值。",
        "label": "JavaMethod"
    },
    {
        "id": 1685,
        "fullName": "com.aurora.service.TagService.listTags(  )",
        "comment": "",
        "content": "List<TagDTO> listTags();",
        "description": "这段代码返回一个标签DTO的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1686,
        "fullName": "com.aurora.service.ResourceService.importSwagger(  )",
        "comment": "",
        "content": "void importSwagger();",
        "description": "这段代码定义了一个名为importSwagger的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1687,
        "fullName": "com.aurora.config.WebSecurityConfig.authenticationManagerBean(  )",
        "comment": "",
        "content": "@Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }",
        "description": "这段代码是一个将AuthenticationManager对象作为Bean注册到Spring容器中的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1688,
        "fullName": "com.aurora.service.PhotoService.deletePhotos( List<Integer> photoIds )",
        "comment": "",
        "content": "void deletePhotos(List<Integer> photoIds);",
        "description": "该代码是用于删除博客系统中指定照片的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1689,
        "fullName": "com.aurora.service.PhotoAlbumService.saveOrUpdatePhotoAlbum( PhotoAlbumVO photoAlbumVO )",
        "comment": "",
        "content": "void saveOrUpdatePhotoAlbum(PhotoAlbumVO photoAlbumVO);",
        "description": "该函数用于保存或更新相册信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1690,
        "fullName": "com.aurora.strategy.impl.EsSearchStrategyImpl.search( NativeSearchQueryBuilder nativeSearchQueryBuilder )",
        "comment": "",
        "content": "private List<ArticleSearchDTO> search(NativeSearchQueryBuilder nativeSearchQueryBuilder) {\n        HighlightBuilder.Field titleField = new HighlightBuilder.Field(\"articleTitle\");\n        titleField.preTags(PRE_TAG);\n        titleField.postTags(POST_TAG);\n        HighlightBuilder.Field contentField = new HighlightBuilder.Field(\"articleContent\");\n        contentField.preTags(PRE_TAG);\n        contentField.postTags(POST_TAG);\n        contentField.fragmentSize(50);\n        nativeSearchQueryBuilder.withHighlightFields(titleField, contentField);\n        try {\n            SearchHits<ArticleSearchDTO> search = elasticsearchRestTemplate.search(nativeSearchQueryBuilder.build(), ArticleSearchDTO.class);\n            return search.getSearchHits().stream().map(hit -> {\n                ArticleSearchDTO article = hit.getContent();\n                List<String> titleHighLightList = hit.getHighlightFields().get(\"articleTitle\");\n                if (CollectionUtils.isNotEmpty(titleHighLightList)) {\n                    article.setArticleTitle(titleHighLightList.get(0));\n                }\n                List<String> contentHighLightList = hit.getHighlightFields().get(\"articleContent\");\n                if (CollectionUtils.isNotEmpty(contentHighLightList)) {\n                    article.setArticleContent(contentHighLightList.get(contentHighLightList.size() - 1));\n                }\n                return article;\n            }).collect(Collectors.toList());\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n        return new ArrayList<>();\n    }",
        "description": "这段代码实现了一个搜索功能，通过Elasticsearch对文章标题和内容进行高亮显示，并返回符合搜索条件的文章列表。如果搜索失败，则返回一个空列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1691,
        "fullName": "com.aurora.util.CommonUtil.checkEmail( String username )",
        "comment": "",
        "content": "public static boolean checkEmail(String username) {\n        String rule = \"^\\\\w+((-\\\\w+)|(\\\\.\\\\w+))*\\\\@[A-Za-z0-9]+((\\\\.|-)[A-Za-z0-9]+)*\\\\.[A-Za-z0-9]+$\";\n        \/\/正则表达式的模式 编译正则表达式\n        Pattern p = Pattern.compile(rule);\n        \/\/正则表达式的匹配器\n        Matcher m = p.matcher(username);\n        \/\/进行正则匹配\n        return m.matches();\n    }",
        "description": "这段代码是一个用于检查邮箱格式是否正确的方法，通过正则表达式匹配来验证输入的用户名是否符合邮箱格式。",
        "label": "JavaMethod"
    },
    {
        "id": 1692,
        "fullName": "com.aurora.service.impl.UserDetailServiceImpl.convertUserDetail( UserAuth user, HttpServletRequest request )",
        "comment": "",
        "content": "public UserDetailsDTO convertUserDetail(UserAuth user, HttpServletRequest request) {\n        UserInfo userInfo = userInfoMapper.selectById(user.getUserInfoId());\n        List<String> roles = roleMapper.listRolesByUserInfoId(userInfo.getId());\n        String ipAddress = IpUtil.getIpAddress(request);\n        String ipSource = IpUtil.getIpSource(ipAddress);\n        UserAgent userAgent = IpUtil.getUserAgent(request);\n        return UserDetailsDTO.builder()\n                .id(user.getId())\n                .loginType(user.getLoginType())\n                .userInfoId(userInfo.getId())\n                .username(user.getUsername())\n                .password(user.getPassword())\n                .email(userInfo.getEmail())\n                .roles(roles)\n                .nickname(userInfo.getNickname())\n                .avatar(userInfo.getAvatar())\n                .intro(userInfo.getIntro())\n                .website(userInfo.getWebsite())\n                .isSubscribe(userInfo.getIsSubscribe())\n                .ipAddress(ipAddress)\n                .ipSource(ipSource)\n                .isDisable(userInfo.getIsDisable())\n                .browser(userAgent.getBrowser().getName())\n                .os(userAgent.getOperatingSystem().getName())\n                .lastLoginTime(LocalDateTime.now())\n                .build();\n    }",
        "description": "该方法用于将用户认证信息转换为用户详细信息DTO对象，包括用户基本信息、角色、IP地址、浏览器和操作系统信息等。",
        "label": "JavaMethod"
    },
    {
        "id": 1693,
        "fullName": "com.aurora.util.CronUtil.getInvalidMessage( String cronExpression )",
        "comment": "",
        "content": "public static String getInvalidMessage(String cronExpression) {\n        try {\n            new CronExpression(cronExpression);\n            return null;\n        } catch (Exception pe) {\n            return pe.getMessage();\n        }\n    }",
        "description": "该方法用于获取给定cron表达式的无效消息，如果cron表达式有效则返回null，否则返回异常信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1694,
        "fullName": "com.aurora.mapper.ArticleMapper.getArticleById( Integer articleId )",
        "comment": "",
        "content": "ArticleDTO getArticleById(@Param(\"articleId\") Integer articleId);",
        "description": "根据文章ID获取文章的数据传输对象ArticleDTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1695,
        "fullName": "com.aurora.util.CommonUtil.getRandomCode(  )",
        "comment": "",
        "content": "public static String getRandomCode() {\n        StringBuilder str = new StringBuilder();\n        Random random = new Random();\n        for (int i = 0; i < 6; i++) {\n            str.append(random.nextInt(10));\n        }\n        return str.toString();\n    }",
        "description": "这段代码实现了一个生成随机6位数字验证码的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1696,
        "fullName": "com.aurora.service.AuroraInfoService.updateAbout( AboutVO aboutVO )",
        "comment": "",
        "content": "void updateAbout(AboutVO aboutVO);",
        "description": "更新关于页面的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1697,
        "fullName": "com.aurora.handler.AccessDecisionManagerImpl.supports( ConfigAttribute configAttribute )",
        "comment": "",
        "content": "@Override\n    public boolean supports(ConfigAttribute configAttribute) {\n        return true;\n    }",
        "description": "该方法用于判断是否支持特定的配置属性。",
        "label": "JavaMethod"
    },
    {
        "id": 1698,
        "fullName": "com.aurora.service.CategoryService.saveOrUpdateCategory( CategoryVO categoryVO )",
        "comment": "",
        "content": "void saveOrUpdateCategory(CategoryVO categoryVO);",
        "description": "这段代码实现了一个保存或更新博客分类的方法，参数为一个博客分类的值对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1699,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl.exists( String filePath )",
        "comment": "",
        "content": "public abstract Boolean exists(String filePath);",
        "description": "该代码是一个抽象方法，用于检查指定文件路径是否存在。",
        "label": "JavaMethod"
    },
    {
        "id": 1700,
        "fullName": "com.aurora.handler.MyMetaObjectHandler.insertFill( MetaObject metaObject )",
        "comment": "",
        "content": "@Override\n    public void insertFill(MetaObject metaObject) {\n        log.info(\"start insert fill ....\");\n        this.strictInsertFill(metaObject, \"createTime\", LocalDateTime.class, LocalDateTime.now());\n    }",
        "description": "这段代码是一个重写的方法，用于在插入操作时填充实体类中的createTime字段为当前时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1701,
        "fullName": "com.aurora.service.CategoryService.listCategories(  )",
        "comment": "",
        "content": "List<CategoryDTO> listCategories();",
        "description": "该方法返回一个包含CategoryDTO对象的列表，用于列出所有的分类信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1702,
        "fullName": "com.aurora.service.RedisService.sIsMember( String key, Object value )",
        "comment": "",
        "content": "Boolean sIsMember(String key, Object value);",
        "description": "这段代码是一个用于判断传入的值是否在指定键对应的集合中的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1703,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.savePhotos( PhotoVO photoVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void savePhotos(PhotoVO photoVO) {\n        List<Photo> photoList = photoVO.getPhotoUrls().stream().map(item -> Photo.builder()\n                        .albumId(photoVO.getAlbumId())\n                        .photoName(IdWorker.getIdStr())\n                        .photoSrc(item)\n                        .build())\n                .collect(Collectors.toList());\n        this.saveBatch(photoList);\n    }",
        "description": "该方法用于保存照片信息。首先，通过获取到的照片URL列表，将其转化为照片对象列表。然后，给每个照片对象设置相应的相册ID、照片名称和照片路径。最后，将照片对象列表批量保存到数据库中。该方法使用事务进行操作，并在出现异常时进行回滚。",
        "label": "JavaMethod"
    },
    {
        "id": 1704,
        "fullName": "com.aurora.mapper.ArticleMapper.listArticles( Long current, Long size )",
        "comment": "",
        "content": "List<ArticleCardDTO> listArticles(@Param(\"current\") Long current, @Param(\"size\") Long size);",
        "description": "这段代码是一个用于获取文章列表的方法，接收当前页码和每页大小作为参数，并返回文章卡片的数据传输对象列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1705,
        "fullName": "com.aurora.util.JobInvokeUtil.getMethodParamsType( List<Object[]> methodParams )",
        "comment": "",
        "content": "public static Class<?>[] getMethodParamsType(List<Object[]> methodParams) {\n        Class<?>[] classes = new Class<?>[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classes[index] = (Class<?>) os[1];\n            index++;\n        }\n        return classes;\n    }",
        "description": "这段代码用于从包含方法参数的列表中提取参数的类型，并返回一个包含参数类型的Class数组。",
        "label": "JavaMethod"
    },
    {
        "id": 1706,
        "fullName": "com.aurora.controller.AuroraInfoController.report(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"上报访客信息\")\n    @PostMapping(\"\/report\")\n    public ResultVO<?> report() {\n        auroraInfoService.report();\n        return ResultVO.ok();\n    }",
        "description": "该代码是一个用于上报访客信息的接口，通过HTTP的POST请求调用，调用auroraInfoService的report方法，返回一个表示操作成功的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1707,
        "fullName": "com.aurora.controller.ArticleController.listArticlesByTagId( Integer tagId )",
        "comment": "",
        "content": "@ApiOperation(\"根据标签id获取文章\")\n    @GetMapping(\"\/articles\/tagId\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> listArticlesByTagId(@RequestParam Integer tagId) {\n        return ResultVO.ok(articleService.listArticlesByTagId(tagId));\n    }",
        "description": "根据标签id获取文章的接口，返回包含文章卡片DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1708,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.exportArticles( List<Integer> articleIds )",
        "comment": "",
        "content": "@Override\n    public List<String> exportArticles(List<Integer> articleIds) {\n        List<Article> articles = articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                .select(Article::getArticleTitle, Article::getArticleContent)\n                .in(Article::getId, articleIds));\n        List<String> urls = new ArrayList<>();\n        for (Article article : articles) {\n            try (ByteArrayInputStream inputStream = new ByteArrayInputStream(article.getArticleContent().getBytes())) {\n                String url = uploadStrategyContext.executeUploadStrategy(article.getArticleTitle() + FileExtEnum.MD.getExtName(), inputStream, FilePathEnum.MD.getPath());\n                urls.add(url);\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new BizException(\"导出文章失败\");\n            }\n        }\n        return urls;\n    }",
        "description": "该方法用于导出指定文章的标题和内容，并将内容上传至指定路径，返回上传后的URL列表。如果导出失败会抛出业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1709,
        "fullName": "com.aurora.mapper.CategoryMapper.listCategories(  )",
        "comment": "",
        "content": "List<CategoryDTO> listCategories();",
        "description": "该方法用于获取博客系统中的所有分类信息，并返回一个包含分类DTO对象的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1710,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.listTalks(  )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<TalkDTO> listTalks() {\n        Integer count = talkMapper.selectCount((new LambdaQueryWrapper<Talk>()\n                .eq(Talk::getStatus, PUBLIC.getStatus())));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TalkDTO> talkDTOs = talkMapper.listTalks(PageUtil.getLimitCurrent(), PageUtil.getSize());\n        List<Integer> talkIds = talkDTOs.stream()\n                .map(TalkDTO::getId)\n                .collect(Collectors.toList());\n        Map<Integer, Integer> commentCountMap = commentMapper.listCommentCountByTypeAndTopicIds(CommentTypeEnum.TALK.getType(), talkIds)\n                .stream()\n                .collect(Collectors.toMap(CommentCountDTO::getId, CommentCountDTO::getCommentCount));\n        talkDTOs.forEach(item -> {\n            item.setCommentCount(commentCountMap.get(item.getId()));\n            if (Objects.nonNull(item.getImages())) {\n                item.setImgs(CommonUtil.castList(JSON.parseObject(item.getImages(), List.class), String.class));\n            }\n        });\n        return new PageResultDTO<>(talkDTOs, count);\n    }",
        "description": "这段代码实现了获取帖子列表的功能，包括统计公开状态的帖子数量、获取帖子列表、统计每个帖子的评论数量，并对帖子中的图片进行处理。",
        "label": "JavaMethod"
    },
    {
        "id": 1711,
        "fullName": "com.aurora.service.ArticleService.listArticlesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<ArticleAdminDTO> listArticlesAdmin(ConditionVO conditionVO);",
        "description": "这段代码是用于获取博客系统中文章管理页面的文章列表信息的方法，返回一个包含文章信息的PageResultDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1712,
        "fullName": "com.aurora.controller.TagController.getAllTags(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取所有标签\")\n    @GetMapping(\"\/tags\/all\")\n    public ResultVO<List<TagDTO>> getAllTags() {\n        return ResultVO.ok(tagService.listTags());\n    }",
        "description": "这段代码是用于获取所有标签信息的后端接口，通过调用tagService的listTags方法来实现。",
        "label": "JavaMethod"
    },
    {
        "id": 1713,
        "fullName": "com.aurora.util.ScheduleUtil.handleCronScheduleMisfirePolicy( Job job, CronScheduleBuilder cb )",
        "comment": "",
        "content": "public static CronScheduleBuilder handleCronScheduleMisfirePolicy(Job job, CronScheduleBuilder cb)\n            throws TaskException {\n        switch (job.getMisfirePolicy()) {\n            case ScheduleConstant.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstant.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstant.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstant.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(\"The task misfire policy '\" + job.getMisfirePolicy()\n                        + \"' cannot be used in cron schedule tasks\", TaskException.Code.CONFIG_ERROR);\n        }\n    }",
        "description": "根据作业的misfire策略处理cron调度器的配置。",
        "label": "JavaMethod"
    },
    {
        "id": 1714,
        "fullName": "com.aurora.model.vo.ResultVO.fail( String message )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail(String message) {\n        return resultVO(false, message);\n    }",
        "description": "该方法为失败情况下返回一个包含错误信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1715,
        "fullName": "com.aurora.util.SpringUtil.getBean( Class<T> clz )",
        "comment": "",
        "content": "public static <T> T getBean(Class<T> clz) throws BeansException {\n        return (T) beanFactory.getBean(clz);\n    }",
        "description": "该方法用于从bean工厂中获取指定类型的bean对象，并返回该对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1716,
        "fullName": "com.aurora.util.PageUtil.remove(  )",
        "comment": "",
        "content": "public static void remove() {\n        PAGE_HOLDER.remove();\n    }",
        "description": "这段代码定义了一个静态方法remove，用于移除页面持有者的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1717,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.isAccountNonLocked(  )",
        "comment": "",
        "content": "@Override\n    @Transient\n    public boolean isAccountNonLocked() {\n        return this.isDisable.equals(CommonConstant.FALSE);\n    }",
        "description": "该方法用于检查用户账号是否被锁定，根据isDisable字段的值来判断账号是否被锁定。",
        "label": "JavaMethod"
    },
    {
        "id": 1718,
        "fullName": "com.aurora.handler.ControllerAdviceHandler.errorHandler( Exception e )",
        "comment": "",
        "content": "@ExceptionHandler(value = Exception.class)\n    public ResultVO<?> errorHandler(Exception e) {\n        e.printStackTrace();\n        return ResultVO.fail(StatusCodeEnum.SYSTEM_ERROR.getCode(), StatusCodeEnum.SYSTEM_ERROR.getDesc());\n    }",
        "description": "这段代码是一个异常处理器，用于捕获所有异常并返回一个系统错误的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1719,
        "fullName": "com.aurora.controller.CategoryController.saveOrUpdateCategory( CategoryVO categoryVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"添加或修改分类\")\n    @PostMapping(\"\/admin\/categories\")\n    public ResultVO<?> saveOrUpdateCategory(@Valid @RequestBody CategoryVO categoryVO) {\n        categoryService.saveOrUpdateCategory(categoryVO);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于添加或修改分类，通过接收有效的CategoryVO对象作为参数，调用categoryService中的saveOrUpdateCategory方法实现操作，并返回操作结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1720,
        "fullName": "com.aurora.controller.ArticleController.saveOrUpdateArticle( ArticleVO articleVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(\"保存和修改文章\")\n    @PostMapping(\"\/admin\/articles\")\n    public ResultVO<?> saveOrUpdateArticle(@Valid @RequestBody ArticleVO articleVO) {\n        articleService.saveOrUpdateArticle(articleVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于保存和修改文章的后端接口，使用了OptLog注解记录操作类型，接收ArticleVO对象作为参数，并调用articleService的saveOrUpdateArticle方法进行保存或更新操作。最终返回一个ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1721,
        "fullName": "com.aurora.mapper.TalkMapper.listTalks( Long current, Long size )",
        "comment": "",
        "content": "List<TalkDTO> listTalks(@Param(\"current\") Long current, @Param(\"size\") Long size);",
        "description": "这段代码定义了一个方法，用于获取讨论（Talk）的DTO对象列表，可以根据当前页数和页面大小进行分页查询。",
        "label": "JavaMethod"
    },
    {
        "id": 1722,
        "fullName": "com.aurora.handler.FilterInvocationSecurityMetadataSourceImpl.supports( Class<?> clazz )",
        "comment": "",
        "content": "@Override\n    public boolean supports(Class<?> clazz) {\n        return FilterInvocation.class.isAssignableFrom(clazz);\n    }",
        "description": "这段代码重写了supports方法，用于判断传入的类是否为FilterInvocation类或其子类。",
        "label": "JavaMethod"
    },
    {
        "id": 1723,
        "fullName": "com.aurora.service.RedisService.zIncr( String key, Object value, Double score )",
        "comment": "",
        "content": "Double zIncr(String key, Object value, Double score);",
        "description": "这段代码是一个方法，用于向博客系统中的某个键值对应的有序集合中添加一个元素，并指定该元素的分数。",
        "label": "JavaMethod"
    },
    {
        "id": 1724,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.get( String key )",
        "comment": "",
        "content": "@Override\n    public Object get(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }",
        "description": "该方法是一个覆盖方法，用于根据键获取Redis中存储的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1725,
        "fullName": "com.aurora.controller.UserInfoController.updateUserSubscribe( SubscribeVO subscribeVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"修改用户的订阅状态\")\n    @PutMapping(\"\/users\/subscribe\")\n    public ResultVO<?> updateUserSubscribe(@RequestBody SubscribeVO subscribeVO) {\n        userInfoService.updateUserSubscribe(subscribeVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于更新用户订阅状态的方法，通过PUT请求发送SubscribeVO对象来更新用户的订阅状态，并返回一个结果VO。",
        "label": "JavaMethod"
    },
    {
        "id": 1726,
        "fullName": "com.aurora.controller.UserInfoController.updateUserDisable( UserDisableVO userDisableVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改用户禁用状态\")\n    @PutMapping(\"\/admin\/users\/disable\")\n    public ResultVO<?> updateUserDisable(@Valid @RequestBody UserDisableVO userDisableVO) {\n        userInfoService.updateUserDisable(userDisableVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于修改用户禁用状态的后端接口，接收一个UserDisableVO对象作为请求体，通过调用userInfoService的updateUserDisable方法来更新用户的禁用状态，并返回一个结果对象ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1727,
        "fullName": "com.aurora.mapper.TagMapper.listTagsAdmin( Long current, Long size, ConditionVO conditionVO )",
        "comment": "",
        "content": "List<TagAdminDTO> listTagsAdmin(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个方法，用于列出博客系统中的标签管理员DTO列表，可以根据传入的分页参数和条件VO来进行筛选。",
        "label": "JavaMethod"
    },
    {
        "id": 1728,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.updateArticleDelete( DeleteVO deleteVO )",
        "comment": "",
        "content": "@Override\n    public void updateArticleDelete(DeleteVO deleteVO) {\n        List<Article> articles = deleteVO.getIds().stream()\n                .map(id -> Article.builder()\n                        .id(id)\n                        .isDelete(deleteVO.getIsDelete())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(articles);\n    }",
        "description": "该方法用于更新文章的删除状态，根据传入的DeleteVO对象中的ids和isDelete字段，批量更新对应文章的删除状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1729,
        "fullName": "com.aurora.controller.MenuController.listUserMenus(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看当前用户菜单\")\n    @GetMapping(\"\/admin\/user\/menus\")\n    public ResultVO<List<UserMenuDTO>> listUserMenus() {\n        return ResultVO.ok(menuService.listUserMenus());\n    }",
        "description": "这段代码是一个用于博客系统后端的接口，它提供了一个用于查看当前用户菜单的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1730,
        "fullName": "com.aurora.mapper.CommentMapper.listComments( Long current, Long size, CommentVO commentVO )",
        "comment": "",
        "content": "List<CommentDTO> listComments(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"commentVO\") CommentVO commentVO);",
        "description": "这段代码是用来获取评论列表的方法，根据传入的current和size参数以及commentVO对象来返回评论DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1731,
        "fullName": "com.aurora.controller.CommentController.deleteComments( List<Integer> commentIdList )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除评论\")\n    @DeleteMapping(\"\/admin\/comments\")\n    public ResultVO<?> deleteComments(@RequestBody List<Integer> commentIdList) {\n        commentService.removeByIds(commentIdList);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于删除评论，接收一个评论ID列表作为参数，调用评论服务的removeByIds方法进行删除操作，并返回操作结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1732,
        "fullName": "com.aurora.controller.UserAuthController.updateAdminPassword( PasswordVO passwordVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改管理员密码\")\n    @PutMapping(\"\/admin\/users\/password\")\n    public ResultVO<?> updateAdminPassword(@Valid @RequestBody PasswordVO passwordVO) {\n        userAuthService.updateAdminPassword(passwordVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于修改管理员密码的后端接口，采用PUT请求方法，接收一个密码对象并更新管理员密码。",
        "label": "JavaMethod"
    },
    {
        "id": 1733,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.updateArticleViewsCount( Integer articleId )",
        "comment": "",
        "content": "public void updateArticleViewsCount(Integer articleId) {\n        redisService.zIncr(ARTICLE_VIEWS_COUNT, articleId, 1D);\n    }",
        "description": "这段代码用于更新文章的浏览次数计数。通过调用redisService的zIncr方法，对指定文章ID的浏览次数进行自增操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1734,
        "fullName": "com.aurora.util.SpringUtil.getAopProxy( T invoker )",
        "comment": "",
        "content": "public static <T> T getAopProxy(T invoker) {\n        return (T) AopContext.currentProxy();\n    }",
        "description": "这段代码是一个静态方法，用于获取当前代理对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1735,
        "fullName": "com.aurora.service.PhotoService.listPhotosByAlbumId( Integer albumId )",
        "comment": "",
        "content": "PhotoDTO listPhotosByAlbumId(Integer albumId);",
        "description": "根据相册ID列出照片DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1736,
        "fullName": "com.aurora.controller.ArticleController.getArticleBackById( Integer articleId )",
        "comment": "",
        "content": "@ApiOperation(\"根据id查看后台文章\")\n    @ApiImplicitParam(name = \"articleId\", value = \"文章id\", required = true, dataType = \"Integer\")\n    @GetMapping(\"\/admin\/articles\/{articleId}\")\n    public ResultVO<ArticleAdminViewDTO> getArticleBackById(@PathVariable(\"articleId\") Integer articleId) {\n        return ResultVO.ok(articleService.getArticleByIdAdmin(articleId));\n    }",
        "description": "这段代码是一个后端接口，用于根据文章id查看后台文章信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1737,
        "fullName": "com.aurora.mapper.UserAuthMapper.countUser( ConditionVO conditionVO )",
        "comment": "",
        "content": "Integer countUser(@Param(\"conditionVO\") ConditionVO conditionVO);",
        "description": "这段代码是一个函数，函数名为countUser，它接受一个名为conditionVO的参数，该参数的类型是ConditionVO。该函数的作用是统计用户的数量，并返回一个整数值。",
        "label": "JavaMethod"
    },
    {
        "id": 1738,
        "fullName": "com.aurora.service.UserAuthService.logout(  )",
        "comment": "",
        "content": "UserLogoutStatusDTO logout();",
        "description": "这段代码是一个方法，用于用户退出登录并返回一个用户退出状态的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1739,
        "fullName": "com.aurora.config.RabbitMQConfig.subscribeQueue(  )",
        "comment": "",
        "content": "@Bean\n    public Queue subscribeQueue() {\n        return new Queue(SUBSCRIBE_QUEUE, true);\n    }",
        "description": "这段代码使用@Bean注解创建了一个队列对象，用于订阅消息的发布\/订阅模式。",
        "label": "JavaMethod"
    },
    {
        "id": 1740,
        "fullName": "com.aurora.controller.ArticleController.importArticles( MultipartFile file, String type )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"导入文章\")\n    @PostMapping(\"\/admin\/articles\/import\")\n    public ResultVO<?> importArticles(MultipartFile file, @RequestParam(required = false) String type) {\n        articleImportStrategyContext.importArticles(file, type);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于导入文章的接口，通过上传文件并指定类型来实现。在导入文章过程中会调用相应的策略来处理不同类型的文章。",
        "label": "JavaMethod"
    },
    {
        "id": 1741,
        "fullName": "com.aurora.service.UserInfoService.removeOnlineUser( Integer userInfoId )",
        "comment": "",
        "content": "void removeOnlineUser(Integer userInfoId);",
        "description": "这段代码用于从在线用户列表中移除指定的用户信息ID。",
        "label": "JavaMethod"
    },
    {
        "id": 1742,
        "fullName": "com.aurora.service.AuroraInfoService.getWebsiteConfig(  )",
        "comment": "",
        "content": "WebsiteConfigDTO getWebsiteConfig();",
        "description": "这段代码是一个博客系统的后端代码，它定义了一个函数getWebsiteConfig，用于获取网站的配置信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1743,
        "fullName": "com.aurora.strategy.context.SocialLoginStrategyContext.executeLoginStrategy( String data, LoginTypeEnum loginTypeEnum )",
        "comment": "",
        "content": "public UserInfoDTO executeLoginStrategy(String data, LoginTypeEnum loginTypeEnum) {\n        return socialLoginStrategyMap.get(loginTypeEnum.getStrategy()).login(data);\n    }",
        "description": "根据登录类型执行相应的登录策略，返回用户信息DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1744,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.isAccountNonExpired(  )",
        "comment": "",
        "content": "@Override\n    @Transient\n    public boolean isAccountNonExpired() {\n        return true;\n    }",
        "description": "这段代码实现了一个后端方法，用于判断用户账户是否过期。该方法总是返回true，表示账户未过期。",
        "label": "JavaMethod"
    },
    {
        "id": 1745,
        "fullName": "com.aurora.service.JobService.updateJob( JobVO jobVO )",
        "comment": "",
        "content": "void updateJob(JobVO jobVO);",
        "description": "这段代码是用来更新职位信息的，接受一个JobVO对象作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1746,
        "fullName": "com.aurora.controller.JobController.runJob( JobRunVO jobRunVO )",
        "comment": "",
        "content": "@ApiOperation(\"执行某个任务\")\n    @PutMapping(\"\/admin\/jobs\/run\")\n    public ResultVO<?> runJob(@RequestBody JobRunVO jobRunVO) {\n        jobService.runJob(jobRunVO);\n        return ResultVO.ok();\n    }",
        "description": "该代码实现了一个用于执行特定任务的接口，通过PUT请求访问\"\/admin\/jobs\/run\"路径，接收JobRunVO对象作为参数，调用jobService的runJob方法来执行任务，并返回一个ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1747,
        "fullName": "com.aurora.model.vo.ResultVO.resultVO( Boolean flag, Integer code, String message, T data )",
        "comment": "",
        "content": "private static <T> ResultVO<T> resultVO(Boolean flag, Integer code, String message, T data) {\n        return ResultVO.<T>builder()\n                .flag(flag)\n                .code(code)\n                .message(message)\n                .data(data).build();\n    }",
        "description": "这段代码是一个通用的方法，用于生成一个包含布尔值、代码、消息和数据的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1748,
        "fullName": "com.aurora.service.FriendLinkService.listFriendLinks(  )",
        "comment": "",
        "content": "List<FriendLinkDTO> listFriendLinks();",
        "description": "该方法用于获取友情链接的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1749,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl.uploadFile( String fileName, InputStream inputStream, String path )",
        "comment": "",
        "content": "@Override\n    public String uploadFile(String fileName, InputStream inputStream, String path) {\n        try {\n            upload(path, fileName, inputStream);\n            return getFileAccessUrl(path + fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BizException(\"文件上传失败\");\n        }\n    }",
        "description": "这段代码实现了一个博客系统后端的文件上传功能，它接受文件名、输入流和文件路径作为参数。代码通过调用upload方法将文件上传到指定的路径，然后通过调用getFileAccessUrl方法获取文件的访问链接。如果文件上传或其他操作发生异常，将抛出一个业务异常并打印异常信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1750,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.refreshToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "@Override\n    public void refreshToken(UserDetailsDTO userDetailsDTO) {\n        LocalDateTime currentTime = LocalDateTime.now();\n        userDetailsDTO.setExpireTime(currentTime.plusSeconds(EXPIRE_TIME));\n        String userId = userDetailsDTO.getId().toString();\n        redisService.hSet(LOGIN_USER, userId, userDetailsDTO, EXPIRE_TIME);\n    }",
        "description": "这段代码是刷新用户令牌的方法，根据当前时间生成新的过期时间，并将用户信息存储在Redis中。",
        "label": "JavaMethod"
    },
    {
        "id": 1751,
        "fullName": "com.aurora.controller.JobController.deleteJobById( List<Integer> jobIds )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(\"删除定时任务\")\n    @DeleteMapping(\"\/admin\/jobs\")\n    public ResultVO<?> deleteJobById(@RequestBody List<Integer> jobIds) {\n        jobService.deleteJobs(jobIds);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于删除定时任务的后端接口。该接口使用了@OptLog注解来记录操作类型为DELETE，使用@ApiOperation注解来描述接口功能为删除定时任务。接口通过接收一个包含定时任务ID的列表作为请求体，然后调用jobService中的deleteJobs方法来删除指定的定时任务。最后返回一个表示成功的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1752,
        "fullName": "com.aurora.mapper.UniqueViewMapper.listUniqueViews( Date startTime, Date endTime )",
        "comment": "",
        "content": "List<UniqueViewDTO> listUniqueViews(@Param(\"startTime\") Date startTime, @Param(\"endTime\") Date endTime);",
        "description": "这段代码定义了一个方法，用于获取在指定时间范围内的独立访客视图列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1753,
        "fullName": "com.aurora.controller.UserAuthController.listUserAreas( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"获取用户区域分布\")\n    @GetMapping(\"\/admin\/users\/area\")\n    public ResultVO<List<UserAreaDTO>> listUserAreas(ConditionVO conditionVO) {\n        return ResultVO.ok(userAuthService.listUserAreas(conditionVO));\n    }",
        "description": "这段代码是一个用于获取用户区域分布信息的接口，通过传入条件VO对象来获取用户区域分布数据，并将结果封装在ResultVO中返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1754,
        "fullName": "com.aurora.controller.RoleController.listRoles( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查询角色列表\")\n    @GetMapping(\"\/admin\/roles\")\n    public ResultVO<PageResultDTO<RoleDTO>> listRoles(ConditionVO conditionVO) {\n        return ResultVO.ok(roleService.listRoles(conditionVO));\n    }",
        "description": "这段代码用于查询角色列表，接收条件参数并返回包含角色信息的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1755,
        "fullName": "com.aurora.service.RedisService.hyperGet( String key )",
        "comment": "",
        "content": "Long hyperGet(String... key);",
        "description": "这段代码实现了一个用于获取博客系统中超文本链接的方法，并返回一个长整型值。",
        "label": "JavaMethod"
    },
    {
        "id": 1756,
        "fullName": "com.aurora.consumer.SubscribeConsumer.process( byte[] data )",
        "comment": "",
        "content": "@RabbitHandler\n    public void process(byte[] data) {\n        Integer articleId = JSON.parseObject(new String(data), Integer.class);\n        Article article = articleService.getOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articleId));\n        List<UserInfo> users = userInfoService.list(new LambdaQueryWrapper<UserInfo>().eq(UserInfo::getIsSubscribe, TRUE));\n        List<String> emails = users.stream().map(UserInfo::getEmail).collect(Collectors.toList());\n        for (String email : emails) {\n            EmailDTO emailDTO = new EmailDTO();\n            Map<String, Object> map = new HashMap<>();\n            emailDTO.setEmail(email);\n            emailDTO.setSubject(\"文章订阅\");\n            emailDTO.setTemplate(\"common.html\");\n            String url = websiteUrl + \"\/articles\/\" + articleId;\n            if (article.getUpdateTime() == null) {\n                map.put(\"content\", \"花未眠的个人博客发布了新的文章，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n            } else {\n                map.put(\"content\", \"花未眠的个人博客对《\" + article.getArticleTitle() + \"》进行了更新，\"\n                        + \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\" + url + \"\\\">点击查看<\/a>\");\n            }\n            emailDTO.setCommentMap(map);\n            emailUtil.sendHtmlMail(emailDTO);\n        }\n    }",
        "description": "处理订阅文章的消息，根据文章ID获取文章信息，查询订阅用户列表，生成邮件内容并发送邮件通知。",
        "label": "JavaMethod"
    },
    {
        "id": 1757,
        "fullName": "com.aurora.config.RabbitMQConfig.articleQueue(  )",
        "comment": "",
        "content": "@Bean\n    public Queue articleQueue() {\n        return new Queue(MAXWELL_QUEUE, true);\n    }",
        "description": "这段代码创建了一个名为\"articleQueue\"的队列，并设置为持久化。",
        "label": "JavaMethod"
    },
    {
        "id": 1758,
        "fullName": "com.aurora.controller.PhotoController.updatePhotosAlbum( PhotoVO photoVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"移动照片相册\")\n    @PutMapping(\"\/admin\/photos\/album\")\n    public ResultVO<?> updatePhotosAlbum(@Valid @RequestBody PhotoVO photoVO) {\n        photoService.updatePhotosAlbum(photoVO);\n        return ResultVO.ok();\n    }",
        "description": "这是一个博客系统的后端代码，该代码是一个更新照片相册的功能接口。接口通过传入一个有效的照片视图对象，调用photoService的updatePhotosAlbum方法实现相册的移动。最后返回一个成功的响应结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1759,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.incr( String key, long delta )",
        "comment": "",
        "content": "@Override\n    public Long incr(String key, long delta) {\n        return redisTemplate.opsForValue().increment(key, delta);\n    }",
        "description": "这段代码是博客系统后端中的一个方法，用于对指定key的值进行增量操作，并返回增加后的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1760,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.getPhotoAlbumByIdAdmin( Integer albumId )",
        "comment": "",
        "content": "@Override\n    public PhotoAlbumAdminDTO getPhotoAlbumByIdAdmin(Integer albumId) {\n        PhotoAlbum photoAlbum = photoAlbumMapper.selectById(albumId);\n        Integer photoCount = photoMapper.selectCount(new LambdaQueryWrapper<Photo>()\n                .eq(Photo::getAlbumId, albumId)\n                .eq(Photo::getIsDelete, FALSE));\n        PhotoAlbumAdminDTO album = BeanCopyUtil.copyObject(photoAlbum, PhotoAlbumAdminDTO.class);\n        album.setPhotoCount(photoCount);\n        return album;\n    }",
        "description": "根据相册ID获取相册的详细信息，包括相册的基本信息和照片数量。",
        "label": "JavaMethod"
    },
    {
        "id": 1761,
        "fullName": "com.aurora.service.impl.RoleServiceImpl.listUserRoles(  )",
        "comment": "",
        "content": "@Override\n    public List<UserRoleDTO> listUserRoles() {\n        List<Role> roleList = roleMapper.selectList(new LambdaQueryWrapper<Role>()\n                .select(Role::getId, Role::getRoleName));\n        return BeanCopyUtil.copyList(roleList, UserRoleDTO.class);\n    }",
        "description": "该方法用于获取用户角色列表，首先查询角色表中的角色ID和角色名称字段，然后将结果转换为UserRoleDTO对象列表返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1762,
        "fullName": "com.aurora.mapper.CommentMapper.listCommentCountByTypeAndTopicIds( Integer type, List<Integer> topicIds )",
        "comment": "",
        "content": "List<CommentCountDTO> listCommentCountByTypeAndTopicIds(@Param(\"type\") Integer type, @Param(\"topicIds\") List<Integer> topicIds);",
        "description": "根据评论类型和主题ID列表，获取评论数量统计信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1763,
        "fullName": "com.aurora.exception.TaskException.getCode(  )",
        "comment": "",
        "content": "public Code getCode() {\n        return code;\n    }",
        "description": "这段代码用于获取博客系统中的代码片段。",
        "label": "JavaMethod"
    },
    {
        "id": 1764,
        "fullName": "com.aurora.service.TagService.listTagsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<TagAdminDTO> listTagsAdmin(ConditionVO conditionVO);",
        "description": "该方法用于获取博客系统中的标签信息，并返回一个包含标签管理员DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1765,
        "fullName": "com.aurora.service.RedisService.lRemove( String key, long count, Object value )",
        "comment": "",
        "content": "Long lRemove(String key, long count, Object value);",
        "description": "该方法用于从指定键对应的列表中，按照指定的数量和值，删除元素并返回实际删除的数量。",
        "label": "JavaMethod"
    },
    {
        "id": 1766,
        "fullName": "com.aurora.aspect.OperationLogAspect.saveOperationLog( JoinPoint joinPoint, Object keys )",
        "comment": "",
        "content": "@AfterReturning(value = \"operationLogPointCut()\", returning = \"keys\")\n    @SuppressWarnings(\"unchecked\")\n    public void saveOperationLog(JoinPoint joinPoint, Object keys) {\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);\n        OperationLog operationLog = new OperationLog();\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        OptLog optLog = method.getAnnotation(OptLog.class);\n        operationLog.setOptModule(api.tags()[0]);\n        operationLog.setOptType(optLog.optType());\n        operationLog.setOptDesc(apiOperation.value());\n        String className = joinPoint.getTarget().getClass().getName();\n        String methodName = method.getName();\n        methodName = className + \".\" + methodName;\n        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());\n        operationLog.setOptMethod(methodName);\n        if (joinPoint.getArgs().length > 0) {\n            if (joinPoint.getArgs()[0] instanceof MultipartFile) {\n                operationLog.setRequestParam(\"file\");\n            } else {\n                operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));\n            }\n        }\n        operationLog.setResponseData(JSON.toJSONString(keys));\n        operationLog.setUserId(UserUtil.getUserDetailsDTO().getId());\n        operationLog.setNickname(UserUtil.getUserDetailsDTO().getNickname());\n        String ipAddress = IpUtil.getIpAddress(request);\n        operationLog.setIpAddress(ipAddress);\n        operationLog.setIpSource(IpUtil.getIpSource(ipAddress));\n        operationLog.setOptUri(request.getRequestURI());\n        applicationContext.publishEvent(new OperationLogEvent(operationLog));\n    }",
        "description": "这段代码是一个用于保存操作日志的方法。该方法会在指定的切点方法执行后被调用。它首先获取HTTP请求和相关信息，然后根据切点的方法和类上的注解来设置操作日志的模块、类型、描述等属性。接着，它会获取方法的类名和方法名，并将它们组合成完整的方法名。然后，它会根据请求的参数设置操作日志的请求参数，如果参数是文件类型，则设置为\"file\"，否则将参数转换为JSON字符串。然后，它会设置操作日志的响应数据、用户ID、昵称、IP地址等信息。最后，它会发布一个操作日志事件，将操作日志对象传递给事件监听器进行进一步处理。",
        "label": "JavaMethod"
    },
    {
        "id": 1767,
        "fullName": "com.aurora.service.CommentService.listCommentsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<CommentAdminDTO> listCommentsAdmin(ConditionVO conditionVO);",
        "description": "这段代码是一个用于管理员查看评论的方法，它接收一个包含查询条件的VO对象，并返回一个包含评论信息的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1768,
        "fullName": "com.aurora.service.RoleService.listUserRoles(  )",
        "comment": "",
        "content": "List<UserRoleDTO> listUserRoles();",
        "description": "该代码返回一个包含用户角色DTO的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1769,
        "fullName": "com.aurora.controller.JobController.saveJob( JobVO jobVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE)\n    @ApiOperation(\"添加定时任务\")\n    @PostMapping(\"\/admin\/jobs\")\n    public ResultVO<?> saveJob(@RequestBody JobVO jobVO) {\n        jobService.saveJob(jobVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个后端接口，用于添加定时任务。该接口使用了@OptLog注解来记录操作类型为保存，同时使用了@ApiOperation注解来描述接口功能为添加定时任务。接口使用POST请求方法，接收一个JobVO对象作为请求体，然后调用jobService的saveJob方法来保存定时任务，并返回一个ResultVO对象作为响应结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1770,
        "fullName": "com.aurora.service.AuroraInfoService.updateWebsiteConfig( WebsiteConfigVO websiteConfigVO )",
        "comment": "",
        "content": "void updateWebsiteConfig(WebsiteConfigVO websiteConfigVO);",
        "description": "更新网站配置信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1771,
        "fullName": "com.aurora.exception.TaskException.TaskException( String msg, Code code, Exception exception )",
        "comment": "",
        "content": "public TaskException(String msg, Code code, Exception exception) {\n        super(msg, exception);\n        this.code = code;\n    }",
        "description": "定义了一个自定义异常类TaskException，可以携带错误信息、错误代码和异常信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1772,
        "fullName": "com.aurora.config.AsyncConfig.taskExecutor(  )",
        "comment": "",
        "content": "@Bean\n    public TaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(20);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"async-task-thread-\");\n        return executor;\n    }",
        "description": "这段代码创建了一个线程池，核心线程数为10，最大线程数为20，队列容量为20，保持活动时间为60秒，线程名前缀为\"async-task-thread-\"。",
        "label": "JavaMethod"
    },
    {
        "id": 1773,
        "fullName": "com.aurora.quartz.AbstractQuartzJob.execute( JobExecutionContext context )",
        "comment": "",
        "content": "@Override\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n        Job job = new Job();\n        BeanUtils.copyProperties(context.getMergedJobDataMap().get(ScheduleConstant.TASK_PROPERTIES), job);\n        try {\n            before(context, job);\n            doExecute(context, job);\n            after(context, job, null);\n        } catch (Exception e) {\n            log.error(\"任务执行异常:\", e);\n            after(context, job, e);\n        }\n    }",
        "description": "这段代码是一个定时任务执行方法，其中会先复制任务属性，然后执行前置处理、任务执行和后置处理操作，若任务执行出现异常则记录错误日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1774,
        "fullName": "com.aurora.util.JobInvokeUtil.isValidClassName( String invokeTarget )",
        "comment": "",
        "content": "public static boolean isValidClassName(String invokeTarget) {\n        return StringUtils.countMatches(invokeTarget, \".\") > 1;\n    }",
        "description": "该方法用于验证一个字符串是否是有效的类名，判断标准为该字符串中包含的\".\"的数量是否大于1个。",
        "label": "JavaMethod"
    },
    {
        "id": 1775,
        "fullName": "com.aurora.controller.PhotoAlbumController.listPhotoAlbumBacks( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看后台相册列表\")\n    @GetMapping(\"\/admin\/photos\/albums\")\n    public ResultVO<PageResultDTO<PhotoAlbumAdminDTO>> listPhotoAlbumBacks(ConditionVO conditionVO) {\n        return ResultVO.ok(photoAlbumService.listPhotoAlbumsAdmin(conditionVO));\n    }",
        "description": "这段代码实现了查看后台相册列表的功能，通过调用photoAlbumService中的方法获取相册列表信息并返回给前端。",
        "label": "JavaMethod"
    },
    {
        "id": 1776,
        "fullName": "com.aurora.service.impl.FriendLinkServiceImpl.listFriendLinks(  )",
        "comment": "",
        "content": "@Override\n    public List<FriendLinkDTO> listFriendLinks() {\n        List<FriendLink> friendLinks = friendLinkMapper.selectList(null);\n        return BeanCopyUtil.copyList(friendLinks, FriendLinkDTO.class);\n    }",
        "description": "这段代码实现了从数据库中获取友情链接列表并转换为DTO对象的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1777,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.createToken( String subject )",
        "comment": "",
        "content": "@Override\n    public String createToken(String subject) {\n        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;\n        SecretKey secretKey = generalKey();\n        return Jwts.builder().setId(getUuid()).setSubject(subject)\n                .setIssuer(\"huaweimian\")\n                .signWith(signatureAlgorithm, secretKey).compact();\n    }",
        "description": "该方法用于生成一个包含特定主题信息的令牌，并使用HS256算法和密钥对其进行签名。签发者为\"huaweimian\"。",
        "label": "JavaMethod"
    },
    {
        "id": 1778,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.isEnabled(  )",
        "comment": "",
        "content": "@Override\n    @Transient\n    public boolean isEnabled() {\n        return true;\n    }",
        "description": "这段代码是一个覆盖方法，用于判断博客系统中的实体是否启用。",
        "label": "JavaMethod"
    },
    {
        "id": 1779,
        "fullName": "com.aurora.service.ArticleService.listArticles(  )",
        "comment": "",
        "content": "PageResultDTO<ArticleCardDTO> listArticles();",
        "description": "该方法用于获取文章列表的分页结果，返回的是ArticleCardDTO类的PageResultDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1780,
        "fullName": "com.aurora.config.WebSecurityConfig.passwordEncoder(  )",
        "comment": "",
        "content": "@Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }",
        "description": "这段代码是一个用于创建密码加密器的方法，使用了BCryptPasswordEncoder算法。",
        "label": "JavaMethod"
    },
    {
        "id": 1781,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lPushAll( String key, Object values )",
        "comment": "",
        "content": "@Override\n    public Long lPushAll(String key, Object... values) {\n        return redisTemplate.opsForList().rightPushAll(key, values);\n    }",
        "description": "这段代码是一个博客系统后端的方法，它实现了将多个对象一次性推送到Redis列表中的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1782,
        "fullName": "com.aurora.service.ArticleService.getArticleById( Integer articleId )",
        "comment": "",
        "content": "ArticleDTO getArticleById(Integer articleId);",
        "description": "根据文章ID获取文章的数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1783,
        "fullName": "com.aurora.service.RedisService.zDecr( String key, Object value, Double score )",
        "comment": "",
        "content": "Double zDecr(String key, Object value, Double score);",
        "description": "这段代码是一个方法，用于减少博客系统中某个键对应的值的分数。",
        "label": "JavaMethod"
    },
    {
        "id": 1784,
        "fullName": "com.aurora.mapper.TagMapper.listTopTenTags(  )",
        "comment": "",
        "content": "List<TagDTO> listTopTenTags();",
        "description": "获取排名前十的标签列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1785,
        "fullName": "com.aurora.util.PageUtil.getSize(  )",
        "comment": "",
        "content": "public static Long getSize() {\n        return getPage().getSize();\n    }",
        "description": "该代码是一个静态方法，用于获取页面的大小信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1786,
        "fullName": "com.aurora.controller.JobLogController.deleteJobLogs( List<Integer> ids )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(\"删除定时任务的日志\")\n    @DeleteMapping(\"\/admin\/jobLogs\")\n    public ResultVO<?> deleteJobLogs(@RequestBody List<Integer> ids) {\n        jobLogService.deleteJobLogs(ids);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于删除定时任务的日志，接收一个整数类型的列表作为参数，并调用jobLogService中的方法来执行删除操作。最终返回一个表示操作成功的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1787,
        "fullName": "com.aurora.strategy.SearchStrategy.searchArticle( String keywords )",
        "comment": "",
        "content": "List<ArticleSearchDTO> searchArticle(String keywords);",
        "description": "根据关键词搜索文章并返回文章搜索结果的数据传输对象列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1788,
        "fullName": "com.aurora.mapper.TagMapper.listTagNamesByArticleId( Integer articleId )",
        "comment": "",
        "content": "List<String> listTagNamesByArticleId(Integer articleId);",
        "description": "根据文章ID获取标签名称列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1789,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.logout(  )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public UserLogoutStatusDTO logout() {\n        tokenService.delLoginUser(UserUtil.getUserDetailsDTO().getId());\n        return new UserLogoutStatusDTO(\"注销成功\");\n    }",
        "description": "该方法实现用户注销功能，通过调用tokenService删除当前登录用户的信息，并返回注销成功的状态信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1790,
        "fullName": "com.aurora.controller.CommentController.listTopSixComments(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取前六个评论\")\n    @GetMapping(\"\/comments\/topSix\")\n    public ResultVO<List<CommentDTO>> listTopSixComments() {\n        return ResultVO.ok(commentService.listTopSixComments());\n    }",
        "description": "这段代码是用于获取前六个评论的接口，返回一个包含评论的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1791,
        "fullName": "com.aurora.controller.ArticleController.listTopAndFeaturedArticles(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取置顶和推荐文章\")\n    @GetMapping(\"\/articles\/topAndFeatured\")\n    public ResultVO<TopAndFeaturedArticlesDTO> listTopAndFeaturedArticles() {\n        return ResultVO.ok(articleService.listTopAndFeaturedArticles());\n    }",
        "description": "这段代码是一个用于获取置顶和推荐文章的接口，通过调用articleService的方法返回TopAndFeaturedArticlesDTO类型的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1792,
        "fullName": "com.aurora.model.vo.ResultVO.fail(  )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail() {\n        return resultVO(false, FAIL.getCode(), FAIL.getDesc(), null);\n    }",
        "description": "这段代码是一个静态方法，用于返回一个ResultVO对象，表示操作失败。",
        "label": "JavaMethod"
    },
    {
        "id": 1793,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.isCredentialsNonExpired(  )",
        "comment": "",
        "content": "@Override\n    @Transient\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }",
        "description": "该方法重写了接口中的isCredentialsNonExpired()方法，并且返回值始终为true。",
        "label": "JavaMethod"
    },
    {
        "id": 1794,
        "fullName": "com.aurora.AuroraSpringbootApplication.restTemplate(  )",
        "comment": "",
        "content": "@Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }",
        "description": "这段代码创建了一个用于发送HTTP请求的RestTemplate实例。",
        "label": "JavaMethod"
    },
    {
        "id": 1795,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.getArticleById( Integer articleId )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public ArticleDTO getArticleById(Integer articleId) {\n        Article articleForCheck = articleMapper.selectOne(new LambdaQueryWrapper<Article>().eq(Article::getId, articleId));\n        if (Objects.isNull(articleForCheck)) {\n            return null;\n        }\n        if (articleForCheck.getStatus().equals(2)) {\n            Boolean isAccess;\n            try {\n                isAccess = redisService.sIsMember(ARTICLE_ACCESS + UserUtil.getUserDetailsDTO().getId(), articleId);\n            } catch (Exception exception) {\n                throw new BizException(ARTICLE_ACCESS_FAIL);\n            }\n            if (isAccess.equals(false)) {\n                throw new BizException(ARTICLE_ACCESS_FAIL);\n            }\n        }\n        updateArticleViewsCount(articleId);\n        CompletableFuture<ArticleDTO> asyncArticle = CompletableFuture.supplyAsync(() -> articleMapper.getArticleById(articleId));\n        CompletableFuture<ArticleCardDTO> asyncPreArticle = CompletableFuture.supplyAsync(() -> {\n            ArticleCardDTO preArticle = articleMapper.getPreArticleById(articleId);\n            if (Objects.isNull(preArticle)) {\n                preArticle = articleMapper.getLastArticle();\n            }\n            return preArticle;\n        });\n        CompletableFuture<ArticleCardDTO> asyncNextArticle = CompletableFuture.supplyAsync(() -> {\n            ArticleCardDTO nextArticle = articleMapper.getNextArticleById(articleId);\n            if (Objects.isNull(nextArticle)) {\n                nextArticle = articleMapper.getFirstArticle();\n            }\n            return nextArticle;\n        });\n        ArticleDTO article = asyncArticle.get();\n        if (Objects.isNull(article)) {\n            return null;\n        }\n        Double score = redisService.zScore(ARTICLE_VIEWS_COUNT, articleId);\n        if (Objects.nonNull(score)) {\n            article.setViewCount(score.intValue());\n        }\n        article.setPreArticleCard(asyncPreArticle.get());\n        article.setNextArticleCard(asyncNextArticle.get());\n        return article;\n    }",
        "description": "根据文章ID获取文章详情，包括前一篇和后一篇文章的信息，并更新文章浏览量。",
        "label": "JavaMethod"
    },
    {
        "id": 1796,
        "fullName": "com.aurora.mapper.ArticleMapper.getPreArticleById( Integer articleId )",
        "comment": "",
        "content": "ArticleCardDTO getPreArticleById(@Param(\"articleId\") Integer articleId);",
        "description": "这段代码是一个博客系统的后端代码，用于根据文章ID获取前一篇文章的卡片信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1797,
        "fullName": "com.aurora.service.impl.RoleServiceImpl.listRoles( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<RoleDTO> listRoles(ConditionVO conditionVO) {\n        LambdaQueryWrapper<Role> queryWrapper = new LambdaQueryWrapper<Role>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Role::getRoleName, conditionVO.getKeywords());\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> roleMapper.selectCount(queryWrapper));\n        List<RoleDTO> roleDTOs = roleMapper.listRoles(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(roleDTOs, asyncCount.get());\n    }",
        "description": "这段代码是一个后端方法，用于查询角色信息并返回分页结果。代码中使用LambdaQueryWrapper来构建查询条件，异步地获取角色总数并获取角色列表，最终返回包含角色列表和总数的PageResultDTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1798,
        "fullName": "com.aurora.util.IpUtil.getIpProvince( String ipSource )",
        "comment": "",
        "content": "public static String getIpProvince(String ipSource) {\n        if (StringUtils.isBlank(ipSource)) {\n            return CommonConstant.UNKNOWN;\n        }\n        String[] strings = ipSource.split(\"\\\\|\");\n        if (strings.length > 1 && strings[1].endsWith(\"省\")) {\n            return StringUtils.substringBefore(strings[1], \"省\");\n        }\n        return strings[0];\n    }",
        "description": "该方法用于从IP地址数据源中获取省份信息，如果IP地址数据源为空，则返回常量\"UNKNOWN\"；如果数据源不为空且包含省份信息，则提取省份信息并返回，否则返回IP地址数据源的第一个元素。",
        "label": "JavaMethod"
    },
    {
        "id": 1799,
        "fullName": "com.aurora.service.UserInfoService.updateUserSubscribe( SubscribeVO subscribeVO )",
        "comment": "",
        "content": "void updateUserSubscribe(SubscribeVO subscribeVO);",
        "description": "更新用户订阅信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1800,
        "fullName": "com.aurora.strategy.impl.NormalArticleImportStrategyImpl.importArticles( MultipartFile file )",
        "comment": "",
        "content": "@Override\n    public void importArticles(MultipartFile file) {\n        String articleTitle = Objects.requireNonNull(file.getOriginalFilename()).split(\"\\\\.\")[0];\n        StringBuilder articleContent = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {\n            while (reader.ready()) {\n                articleContent.append((char) reader.read());\n            }\n        } catch (IOException e) {\n            log.error(StrUtil.format(\"导入文章失败, 堆栈:{}\", ExceptionUtil.stacktraceToString(e)));\n            throw new BizException(\"导入文章失败\");\n        }\n        ArticleVO articleVO = ArticleVO.builder()\n                .articleTitle(articleTitle)\n                .articleContent(articleContent.toString())\n                .status(DRAFT.getStatus())\n                .build();\n        articleService.saveOrUpdateArticle(articleVO);\n    }",
        "description": "该代码段实现了一个方法，用于导入文章。首先从上传的文件中获取文章标题，然后逐行读取文章内容并存储到一个StringBuilder中。最后构建一个ArticleVO对象，并调用文章服务的方法保存或更新文章。如果导入文章失败，则记录错误信息并抛出自定义的业务异常。",
        "label": "JavaMethod"
    },
    {
        "id": 1801,
        "fullName": "com.aurora.model.dto.UserDetailsDTO.getPassword(  )",
        "comment": "",
        "content": "@Override\n    public String getPassword() {\n        return password;\n    }",
        "description": "重写了一个方法，用于获取密码。",
        "label": "JavaMethod"
    },
    {
        "id": 1802,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lSize( String key )",
        "comment": "",
        "content": "@Override\n    public Long lSize(String key) {\n        return redisTemplate.opsForList().size(key);\n    }",
        "description": "该方法用于获取指定key对应的列表的长度。",
        "label": "JavaMethod"
    },
    {
        "id": 1803,
        "fullName": "com.aurora.controller.ArticleController.accessArticle( ArticlePasswordVO articlePasswordVO )",
        "comment": "",
        "content": "@ApiOperation(\"校验文章访问密码\")\n    @PostMapping(\"\/articles\/access\")\n    public ResultVO<?> accessArticle(@Valid @RequestBody ArticlePasswordVO articlePasswordVO) {\n        articleService.accessArticle(articlePasswordVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于校验文章访问密码的接口。通过将文章密码作为请求体参数传入，调用文章服务的accessArticle方法来校验密码。返回一个表示操作成功的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1804,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.saveComment( CommentVO commentVO )",
        "comment": "",
        "content": "@Override\n    public void saveComment(CommentVO commentVO) {\n        checkCommentVO(commentVO);\n        WebsiteConfigDTO websiteConfig = auroraInfoService.getWebsiteConfig();\n        Integer isCommentReview = websiteConfig.getIsCommentReview();\n        commentVO.setCommentContent(HTMLUtil.filter(commentVO.getCommentContent()));\n        Comment comment = Comment.builder()\n                .userId(UserUtil.getUserDetailsDTO().getUserInfoId())\n                .replyUserId(commentVO.getReplyUserId())\n                .topicId(commentVO.getTopicId())\n                .commentContent(commentVO.getCommentContent())\n                .parentId(commentVO.getParentId())\n                .type(commentVO.getType())\n                .isReview(isCommentReview == TRUE ? FALSE : TRUE)\n                .build();\n        commentMapper.insert(comment);\n        String fromNickname = UserUtil.getUserDetailsDTO().getNickname();\n        if (websiteConfig.getIsEmailNotice().equals(TRUE)) {\n            CompletableFuture.runAsync(() -> notice(comment, fromNickname));\n        }\n    }",
        "description": "该代码实现了保存评论的功能，首先对评论内容进行过滤处理，然后构建评论对象并插入数据库中，同时根据网站配置中是否需要评论审核和是否需要邮件通知来进行相应的处理。",
        "label": "JavaMethod"
    },
    {
        "id": 1805,
        "fullName": "com.aurora.service.RedisService.hIncr( String key, String hashKey, Long delta )",
        "comment": "",
        "content": "Long hIncr(String key, String hashKey, Long delta);",
        "description": "这段代码实现了在博客系统后端对指定键的哈希字段进行增量操作的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1806,
        "fullName": "com.aurora.service.RedisService.hyperDel( String key )",
        "comment": "",
        "content": "void hyperDel(String key);",
        "description": "这段代码定义了一个函数，用于删除博客系统中的超链接。",
        "label": "JavaMethod"
    },
    {
        "id": 1807,
        "fullName": "com.aurora.mapper.ArticleMapper.getNextArticleById( Integer articleId )",
        "comment": "",
        "content": "ArticleCardDTO getNextArticleById(@Param(\"articleId\") Integer articleId);",
        "description": "根据给定的文章ID获取下一篇文章的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1808,
        "fullName": "com.aurora.handler.AccessDecisionManagerImpl.supports( Class<?> aClass )",
        "comment": "",
        "content": "@Override\n    public boolean supports(Class<?> aClass) {\n        return true;\n    }",
        "description": "该代码段是一个覆盖方法，用于判断一个类是否被支持。",
        "label": "JavaMethod"
    },
    {
        "id": 1809,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hyperDel( String key )",
        "comment": "",
        "content": "@Override\n    public void hyperDel(String key) {\n        redisTemplate.opsForHyperLogLog().delete(key);\n    }",
        "description": "这段代码是一个博客系统后端的方法，用于删除Redis中的HyperLogLog数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1810,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sIsMember( String key, Object value )",
        "comment": "",
        "content": "@Override\n    public Boolean sIsMember(String key, Object value) {\n        return redisTemplate.opsForSet().isMember(key, value);\n    }",
        "description": "这段代码实现了在Redis中判断集合中是否存在指定的元素功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1811,
        "fullName": "com.aurora.util.ExceptionUtil.getTrace( Throwable t )",
        "comment": "",
        "content": "public static String getTrace(Throwable t) {\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter writer = new PrintWriter(stringWriter);\n        t.printStackTrace(writer);\n        StringBuffer buffer = stringWriter.getBuffer();\n        return buffer.toString();\n    }",
        "description": "这段代码是一个静态方法，用于获取Throwable对象（异常）的堆栈跟踪信息并以字符串形式返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1812,
        "fullName": "com.aurora.config.RabbitMQConfig.emailQueue(  )",
        "comment": "",
        "content": "@Bean\n    public Queue emailQueue() {\n        return new Queue(EMAIL_QUEUE, true);\n    }",
        "description": "这段代码是一个用于创建邮件队列的方法。队列名为EMAIL_QUEUE，且为持久化队列。",
        "label": "JavaMethod"
    },
    {
        "id": 1813,
        "fullName": "com.aurora.service.CommentService.saveComment( CommentVO commentVO )",
        "comment": "",
        "content": "void saveComment(CommentVO commentVO);",
        "description": "这段代码定义了一个函数，用于保存评论的视图对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1814,
        "fullName": "com.aurora.service.MenuService.listMenuOptions(  )",
        "comment": "",
        "content": "List<LabelOptionDTO> listMenuOptions();",
        "description": "获取标签选项的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1815,
        "fullName": "com.aurora.controller.TagController.listTagsAdminBySearch( ConditionVO condition )",
        "comment": "",
        "content": "@ApiOperation(value = \"搜索文章标签\")\n    @GetMapping(\"\/admin\/tags\/search\")\n    public ResultVO<List<TagAdminDTO>> listTagsAdminBySearch(ConditionVO condition) {\n        return ResultVO.ok(tagService.listTagsAdminBySearch(condition));\n    }",
        "description": "这段代码是用于在后台管理系统中搜索文章标签并返回符合条件的标签列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1816,
        "fullName": "com.aurora.service.TokenService.renewToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "void renewToken(UserDetailsDTO userDetailsDTO);",
        "description": "更新用户详情信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1817,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.bitGet( String key, int offset )",
        "comment": "",
        "content": "@Override\n    public Boolean bitGet(String key, int offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }",
        "description": "该方法是一个重写方法，用于从Redis中按位获取指定位置的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1818,
        "fullName": "com.aurora.service.impl.CommentServiceImpl.getEmailDTO( Comment comment, UserInfo userInfo, String fromNickname, String topicId, String title )",
        "comment": "",
        "content": "private EmailDTO getEmailDTO(Comment comment, UserInfo userInfo, String fromNickname, String topicId, String title) {\n        EmailDTO emailDTO = new EmailDTO();\n        Map<String, Object> map = new HashMap<>();\n        if (comment.getIsReview().equals(TRUE)) {\n            String url = websiteUrl + getCommentPath(comment.getType()) + topicId;\n            if (Objects.isNull(comment.getParentId())) {\n                emailDTO.setEmail(userInfo.getEmail());\n                emailDTO.setSubject(COMMENT_REMIND);\n                emailDTO.setTemplate(\"owner.html\");\n                String createTime = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\").format(comment.getCreateTime());\n                map.put(\"time\", createTime);\n                map.put(\"url\", url);\n                map.put(\"title\", title);\n                map.put(\"nickname\", fromNickname);\n                map.put(\"content\", comment.getCommentContent());\n            } else {\n                Comment parentComment = commentMapper.selectOne(new LambdaQueryWrapper<Comment>().select(Comment::getUserId, Comment::getCommentContent, Comment::getCreateTime).eq(Comment::getId, comment.getParentId()));\n                if (!userInfo.getId().equals(parentComment.getUserId())) {\n                    userInfo = userInfoMapper.selectById(parentComment.getUserId());\n                }\n                emailDTO.setEmail(userInfo.getEmail());\n                emailDTO.setSubject(COMMENT_REMIND);\n                emailDTO.setTemplate(\"user.html\");\n                map.put(\"url\", url);\n                map.put(\"title\", title);\n                String createTime = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\").format(parentComment.getCreateTime());\n                map.put(\"time\", createTime);\n                map.put(\"toUser\", userInfo.getNickname());\n                map.put(\"fromUser\", fromNickname);\n                map.put(\"parentComment\", parentComment.getCommentContent());\n                if (!comment.getReplyUserId().equals(parentComment.getUserId())) {\n                    UserInfo mentionUserInfo = userInfoMapper.selectById(comment.getReplyUserId());\n                    if (Objects.nonNull(mentionUserInfo.getWebsite())) {\n                        map.put(\"replyComment\", \"<a style=\\\"text-decoration:none;color:#12addb\\\" href=\\\"\"\n                                + mentionUserInfo.getWebsite()\n                                + \"\\\">@\" + mentionUserInfo.getNickname() + \" \" + \"<\/a>\" + parentComment.getCommentContent());\n                    } else {\n                        map.put(\"replyComment\", \"@\" + mentionUserInfo.getNickname() + \" \" + parentComment.getCommentContent());\n                    }\n                } else {\n                    map.put(\"replyComment\", comment.getCommentContent());\n                }\n            }\n        } else {\n            String adminEmail = userInfoMapper.selectById(BLOGGER_ID).getEmail();\n            emailDTO.setEmail(adminEmail);\n            emailDTO.setSubject(CHECK_REMIND);\n            emailDTO.setTemplate(\"common.html\");\n            map.put(\"content\", \"您收到了一条新的回复，请前往后台管理页面审核\");\n        }\n        emailDTO.setCommentMap(map);\n        return emailDTO;\n    }",
        "description": "根据评论的内容和评论者信息生成邮件通知的数据传输对象，并根据评论是否需要审核选择不同的模板和接收邮箱。",
        "label": "JavaMethod"
    },
    {
        "id": 1819,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.updateAdminPassword( PasswordVO passwordVO )",
        "comment": "",
        "content": "@Override\n    @SuppressWarnings(\"all\")\n    public void updateAdminPassword(PasswordVO passwordVO) {\n        UserAuth user = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .eq(UserAuth::getId, UserUtil.getUserDetailsDTO().getId()));\n        if (Objects.nonNull(user) && BCrypt.checkpw(passwordVO.getOldPassword(), user.getPassword())) {\n            UserAuth userAuth = UserAuth.builder()\n                    .id(UserUtil.getUserDetailsDTO().getId())\n                    .password(BCrypt.hashpw(passwordVO.getNewPassword(), BCrypt.gensalt()))\n                    .build();\n            userAuthMapper.updateById(userAuth);\n        } else {\n            throw new BizException(\"旧密码不正确\");\n        }\n    }",
        "description": "该方法用于更新管理员密码，通过验证用户输入的旧密码是否正确，如果正确则将新密码加密后更新到数据库中；否则抛出业务异常提示旧密码不正确。",
        "label": "JavaMethod"
    },
    {
        "id": 1820,
        "fullName": "com.aurora.config.Knife4jConfig.createRestApi(  )",
        "comment": "",
        "content": "@Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .protocols(Collections.singleton(\"https\"))\n                .host(\"https:\/\/www.linhaojun.top\")\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.aurora.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }",
        "description": "这段代码创建了一个Swagger接口文档配置Bean，指定了使用HTTPS协议和指定的主机地址，指定了API信息和扫描的包路径。",
        "label": "JavaMethod"
    },
    {
        "id": 1821,
        "fullName": "com.aurora.mapper.TalkMapper.getTalkByIdAdmin( Integer talkId )",
        "comment": "",
        "content": "TalkAdminDTO getTalkByIdAdmin(@Param(\"talkId\") Integer talkId);",
        "description": "根据指定的talkId获取博客系统中的某篇文章的管理员信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1822,
        "fullName": "com.aurora.service.RedisService.bitAdd( String key, int offset, boolean b )",
        "comment": "",
        "content": "Boolean bitAdd(String key, int offset, boolean b);",
        "description": "这段代码实现了一个方法，用于在给定的键值对中，将指定位置的布尔值与传入的布尔值进行逻辑操作，并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1823,
        "fullName": "com.aurora.strategy.impl.OssUploadStrategyImpl.getOssClient(  )",
        "comment": "",
        "content": "private OSS getOssClient() {\n        return new OSSClientBuilder().build(ossConfigProperties.getEndpoint(), ossConfigProperties.getAccessKeyId(), ossConfigProperties.getAccessKeySecret());\n    }",
        "description": "该方法用于获取一个阿里云对象存储（OSS）客户端实例，通过读取配置文件中的端点、访问密钥ID和访问密钥Secret来构建。",
        "label": "JavaMethod"
    },
    {
        "id": 1824,
        "fullName": "com.aurora.service.RedisService.geoGetPointList( String key, Object place )",
        "comment": "",
        "content": "List<Point> geoGetPointList(String key, Object... place);",
        "description": "根据关键字和地点参数获取地理位置点的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1825,
        "fullName": "com.aurora.controller.UserAuthController.sendCode( String username )",
        "comment": "",
        "content": "@AccessLimit(seconds = 60,maxCount = 1)\n    @ApiOperation(value = \"发送邮箱验证码\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\")\n    @GetMapping(\"\/users\/code\")\n    public ResultVO<?> sendCode(String username) {\n        userAuthService.sendCode(username);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于限制访问频率，每60秒最多允许1次访问，用于发送邮箱验证码并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1826,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.getArticleByIdAdmin( Integer articleId )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public ArticleAdminViewDTO getArticleByIdAdmin(Integer articleId) {\n        Article article = articleMapper.selectById(articleId);\n        Category category = categoryMapper.selectById(article.getCategoryId());\n        String categoryName = null;\n        if (Objects.nonNull(category)) {\n            categoryName = category.getCategoryName();\n        }\n        List<String> tagNames = tagMapper.listTagNamesByArticleId(articleId);\n        ArticleAdminViewDTO articleAdminViewDTO = BeanCopyUtil.copyObject(article, ArticleAdminViewDTO.class);\n        articleAdminViewDTO.setCategoryName(categoryName);\n        articleAdminViewDTO.setTagNames(tagNames);\n        return articleAdminViewDTO;\n    }",
        "description": "根据文章ID获取文章的后台管理视图信息，包括文章内容、分类名称和标签名称。",
        "label": "JavaMethod"
    },
    {
        "id": 1827,
        "fullName": "com.aurora.service.impl.TalkServiceImpl.deleteTalks( List<Integer> talkIds )",
        "comment": "",
        "content": "@Override\n    public void deleteTalks(List<Integer> talkIds) {\n        talkMapper.deleteBatchIds(talkIds);\n    }",
        "description": "这段代码实现了删除博客系统中多个对话的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1828,
        "fullName": "com.aurora.service.RedisService.set( String key, Object value )",
        "comment": "",
        "content": "void set(String key, Object value);",
        "description": "这段代码是一个方法，用于设置指定键对应的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1829,
        "fullName": "com.aurora.service.RedisService.lPush( String key, Object value )",
        "comment": "",
        "content": "Long lPush(String key, Object value);",
        "description": "该方法用于向一个指定的键值对中的列表中左侧插入一个元素，并返回插入后列表的长度。",
        "label": "JavaMethod"
    },
    {
        "id": 1830,
        "fullName": "com.aurora.service.impl.FriendLinkServiceImpl.listFriendLinksAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<FriendLinkAdminDTO> listFriendLinksAdmin(ConditionVO conditionVO) {\n        Page<FriendLink> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<FriendLink> friendLinkPage = friendLinkMapper.selectPage(page, new LambdaQueryWrapper<FriendLink>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), FriendLink::getLinkName, conditionVO.getKeywords()));\n        List<FriendLinkAdminDTO> friendLinkBackDTOs = BeanCopyUtil.copyList(friendLinkPage.getRecords(), FriendLinkAdminDTO.class);\n        return new PageResultDTO<>(friendLinkBackDTOs, (int) friendLinkPage.getTotal());\n    }",
        "description": "该方法用于后台管理系统中获取友情链接列表的数据，包括链接名称等信息，并返回一个包含友情链接管理DTO和总记录数的分页结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1831,
        "fullName": "com.aurora.mapper.TagMapper.listTags(  )",
        "comment": "",
        "content": "List<TagDTO> listTags();",
        "description": "这段代码定义了一个方法，用于获取所有标签的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1832,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.register( UserVO userVO )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void register(UserVO userVO) {\n        if (!checkEmail(userVO.getUsername())) {\n            throw new BizException(\"邮箱格式不对!\");\n        }\n        if (checkUser(userVO)) {\n            throw new BizException(\"邮箱已被注册！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .email(userVO.getUsername())\n                .nickname(CommonConstant.DEFAULT_NICKNAME + IdWorker.getId())\n                .avatar(auroraInfoService.getWebsiteConfig().getUserAvatar())\n                .build();\n        userInfoMapper.insert(userInfo);\n        UserRole userRole = UserRole.builder()\n                .userId(userInfo.getId())\n                .roleId(RoleEnum.USER.getRoleId())\n                .build();\n        userRoleMapper.insert(userRole);\n        UserAuth userAuth = UserAuth.builder()\n                .userInfoId(userInfo.getId())\n                .username(userVO.getUsername())\n                .password(BCrypt.hashpw(userVO.getPassword(), BCrypt.gensalt()))\n                .loginType(LoginTypeEnum.EMAIL.getType())\n                .build();\n        userAuthMapper.insert(userAuth);\n    }",
        "description": "注册用户的方法，首先检查邮箱格式是否正确，然后检查用户是否已经被注册，如果都符合条件则向数据库中插入用户信息、用户角色和用户认证信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1833,
        "fullName": "com.aurora.config.WebSecurityConfig.configure( HttpSecurity http )",
        "comment": "",
        "content": "@Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.formLogin()\n                .loginProcessingUrl(\"\/users\/login\")\n                .successHandler(authenticationSuccessHandler)\n                .failureHandler(authenticationFailureHandler);\n        http.authorizeRequests()\n                .withObjectPostProcessor(new ObjectPostProcessor<FilterSecurityInterceptor>() {\n                    @Override\n                    public <O extends FilterSecurityInterceptor> O postProcess(O fsi) {\n                        fsi.setSecurityMetadataSource(securityMetadataSource());\n                        fsi.setAccessDecisionManager(accessDecisionManager());\n                        return fsi;\n                    }\n                })\n                .anyRequest().permitAll()\n                .and()\n                .csrf().disable().exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler)\n                .and()\n                .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n    }",
        "description": "该代码段是对博客系统后端的安全配置进行了设置，包括登录表单的处理、权限控制、会话管理以及JWT令牌过滤等功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1834,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.geoGetHash( String key, String place )",
        "comment": "",
        "content": "@Override\n    public List<String> geoGetHash(String key, String... place) {\n        return redisTemplate.opsForGeo()\n                .hash(key, place);\n    }",
        "description": "这段代码实现了根据键和位置获取哈希值的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1835,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.del( String key )",
        "comment": "",
        "content": "@Override\n    public Boolean del(String key) {\n        return redisTemplate.delete(key);\n    }",
        "description": "这段代码是一个用于博客系统的后端方法，用来删除指定键对应的数据，并返回操作是否成功的布尔值。",
        "label": "JavaMethod"
    },
    {
        "id": 1836,
        "fullName": "com.aurora.service.PhotoAlbumService.deletePhotoAlbumById( Integer albumId )",
        "comment": "",
        "content": "void deletePhotoAlbumById(Integer albumId);",
        "description": "这段代码是一个方法，用于通过相册ID删除相册。",
        "label": "JavaMethod"
    },
    {
        "id": 1837,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.bitGetAll( String key )",
        "comment": "",
        "content": "@Override\n    public byte[] bitGetAll(String key) {\n        return redisTemplate.execute((RedisCallback<byte[]>) con -> con.get(key.getBytes()));\n    }",
        "description": "这段代码是一个方法，用于从Redis中获取指定key对应的值并以字节数组的形式返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1838,
        "fullName": "com.aurora.service.RedisService.geoCalculationDistance( String key, String placeOne, String placeTow )",
        "comment": "",
        "content": "Distance geoCalculationDistance(String key, String placeOne, String placeTow);",
        "description": "该代码是一个计算两个地点之间距离的方法，输入参数为地点名称和一个键值。",
        "label": "JavaMethod"
    },
    {
        "id": 1839,
        "fullName": "com.aurora.model.vo.ResultVO.resultVO( Boolean flag, String message )",
        "comment": "",
        "content": "private static <T> ResultVO<T> resultVO(Boolean flag, String message) {\n        return ResultVO.<T>builder()\n                .flag(flag)\n                .code(flag ? SUCCESS.getCode() : FAIL.getCode())\n                .message(message).build();\n    }",
        "description": "这段代码是一个静态方法，用于生成一个包含标志、代码和消息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1840,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sMembers( String key )",
        "comment": "",
        "content": "@Override\n    public Set<Object> sMembers(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }",
        "description": "这段代码实现了根据给定键获取Redis中集合的所有成员的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1841,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.getAuroraAdminInfo(  )",
        "comment": "",
        "content": "@Override\n    public AuroraAdminInfoDTO getAuroraAdminInfo() {\n        Object count = redisService.get(BLOG_VIEWS_COUNT);\n        Integer viewsCount = Integer.parseInt(Optional.ofNullable(count).orElse(0).toString());\n        Integer messageCount = commentMapper.selectCount(new LambdaQueryWrapper<Comment>().eq(Comment::getType, 2));\n        Integer userCount = userInfoMapper.selectCount(null);\n        Integer articleCount = articleMapper.selectCount(new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, FALSE));\n        List<UniqueViewDTO> uniqueViews = uniqueViewService.listUniqueViews();\n        List<ArticleStatisticsDTO> articleStatisticsDTOs = articleMapper.listArticleStatistics();\n        List<CategoryDTO> categoryDTOs = categoryMapper.listCategories();\n        List<TagDTO> tagDTOs = BeanCopyUtil.copyList(tagMapper.selectList(null), TagDTO.class);\n        Map<Object, Double> articleMap = redisService.zReverseRangeWithScore(ARTICLE_VIEWS_COUNT, 0, 4);\n        AuroraAdminInfoDTO auroraAdminInfoDTO = AuroraAdminInfoDTO.builder()\n                .articleStatisticsDTOs(articleStatisticsDTOs)\n                .tagDTOs(tagDTOs)\n                .viewsCount(viewsCount)\n                .messageCount(messageCount)\n                .userCount(userCount)\n                .articleCount(articleCount)\n                .categoryDTOs(categoryDTOs)\n                .uniqueViewDTOs(uniqueViews)\n                .build();\n        if (CollectionUtils.isNotEmpty(articleMap)) {\n            List<ArticleRankDTO> articleRankDTOList = listArticleRank(articleMap);\n            auroraAdminInfoDTO.setArticleRankDTOs(articleRankDTOList);\n        }\n        return auroraAdminInfoDTO;\n    }",
        "description": "该方法用于获取博客系统的后台管理信息，包括文章统计信息、标签信息、浏览量、留言数量、用户数量、文章数量、分类信息以及独立访客信息等。同时还包括文章的浏览排行信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1842,
        "fullName": "com.aurora.service.impl.RoleServiceImpl.deleteRoles( List<Integer> roleIdList )",
        "comment": "",
        "content": "@Override\n    public void deleteRoles(List<Integer> roleIdList) {\n        Integer count = userRoleMapper.selectCount(new LambdaQueryWrapper<UserRole>()\n                .in(UserRole::getRoleId, roleIdList));\n        if (count > 0) {\n            throw new BizException(\"该角色下存在用户\");\n        }\n        roleMapper.deleteBatchIds(roleIdList);\n    }",
        "description": "这段代码实现了删除角色的功能，先检查角色是否有用户在使用，如果有则抛出异常，否则批量删除角色。",
        "label": "JavaMethod"
    },
    {
        "id": 1843,
        "fullName": "com.aurora.util.PageUtil.setCurrentPage( Page<?> page )",
        "comment": "",
        "content": "public static void setCurrentPage(Page<?> page) {\n        PAGE_HOLDER.set(page);\n    }",
        "description": "设置当前页面的静态方法，将传入的页面对象存储在一个线程局部变量中。",
        "label": "JavaMethod"
    },
    {
        "id": 1844,
        "fullName": "com.aurora.mapper.CommentMapper.listTopSixComments(  )",
        "comment": "",
        "content": "List<CommentDTO> listTopSixComments();",
        "description": "获取前六条评论的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1845,
        "fullName": "com.aurora.config.RabbitMQConfig.bindingSubscribeDirect(  )",
        "comment": "",
        "content": "@Bean\n    public Binding bindingSubscribeDirect() {\n        return BindingBuilder.bind(subscribeQueue()).to(subscribeExchange());\n    }",
        "description": "这段代码是一个用于创建订阅队列和直连交换机绑定的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1846,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.listResourceOption(  )",
        "comment": "",
        "content": "@Override\n    public List<LabelOptionDTO> listResourceOption() {\n        List<Resource> resources = resourceMapper.selectList(new LambdaQueryWrapper<Resource>()\n                .select(Resource::getId, Resource::getResourceName, Resource::getParentId)\n                .eq(Resource::getIsAnonymous, FALSE));\n        List<Resource> parents = listResourceModule(resources);\n        Map<Integer, List<Resource>> childrenMap = listResourceChildren(resources);\n        return parents.stream().map(item -> {\n            List<LabelOptionDTO> list = new ArrayList<>();\n            List<Resource> children = childrenMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(children)) {\n                list = children.stream()\n                        .map(resource -> LabelOptionDTO.builder()\n                                .id(resource.getId())\n                                .label(resource.getResourceName())\n                                .build())\n                        .collect(Collectors.toList());\n            }\n            return LabelOptionDTO.builder()\n                    .id(item.getId())\n                    .label(item.getResourceName())\n                    .children(list)\n                    .build();\n        }).collect(Collectors.toList());\n    }",
        "description": "该方法用于获取资源选项的列表，首先查询数据库中非匿名资源的信息，然后根据父资源和子资源的关系构建资源选项的树形结构。",
        "label": "JavaMethod"
    },
    {
        "id": 1847,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hIncr( String key, String hashKey, Long delta )",
        "comment": "",
        "content": "@Override\n    public Long hIncr(String key, String hashKey, Long delta) {\n        return redisTemplate.opsForHash().increment(key, hashKey, delta);\n    }",
        "description": "这段代码实现了在Redis中对指定key的hashKey的值进行增量操作并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1848,
        "fullName": "com.aurora.service.UserAuthService.sendCode( String username )",
        "comment": "",
        "content": "void sendCode(String username);",
        "description": "这段代码是一个用于发送验证码给指定用户名的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1849,
        "fullName": "com.aurora.util.IpUtil.initIp2regionResource(  )",
        "comment": "",
        "content": "@PostConstruct\n    private void initIp2regionResource() throws Exception {\n        InputStream inputStream = new ClassPathResource(\"\/ip\/ip2region.db\").getInputStream();\n        byte[] dbBinStr = FileCopyUtils.copyToByteArray(inputStream);\n        DbConfig dbConfig = new DbConfig();\n        searcher = new DbSearcher(dbConfig, dbBinStr);\n        method = searcher.getClass().getMethod(\"memorySearch\", String.class);\n    }",
        "description": "在初始化阶段，通过读取ip2region.db文件并将其转换为字节数组，创建了一个DbSearcher对象，并调用其memorySearch方法进行内存搜索。",
        "label": "JavaMethod"
    },
    {
        "id": 1850,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl.listCategoriesAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<CategoryAdminDTO> listCategoriesAdmin(ConditionVO conditionVO) {\n        Integer count = categoryMapper.selectCount(new LambdaQueryWrapper<Category>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Category::getCategoryName, conditionVO.getKeywords()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<CategoryAdminDTO> categoryList = categoryMapper.listCategoriesAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(categoryList, count);\n    }",
        "description": "这段代码是一个博客系统的后端代码，用于获取管理员视角下的分类列表。代码首先通过关键词在数据库中查询满足条件的分类总数，如果总数为0，则返回一个空的分页结果。否则，使用分页工具获取管理员视角下的分类列表，并返回包含分类列表和总数的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1851,
        "fullName": "com.aurora.controller.FriendLinkController.saveOrUpdateFriendLink( FriendLinkVO friendLinkVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE_OR_UPDATE)\n    @ApiOperation(value = \"保存或修改友链\")\n    @PostMapping(\"\/admin\/links\")\n    public ResultVO<?> saveOrUpdateFriendLink(@Valid @RequestBody FriendLinkVO friendLinkVO) {\n        friendLinkService.saveOrUpdateFriendLink(friendLinkVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于保存或修改友链的后端接口，通过接收FriendLinkVO对象并调用相应的service方法来实现功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1852,
        "fullName": "com.aurora.controller.JobController.listJobGroup(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取所有job分组\")\n    @GetMapping(\"\/admin\/jobs\/jobGroups\")\n    public ResultVO<List<String>> listJobGroup() {\n        return ResultVO.ok(jobService.listJobGroups());\n    }",
        "description": "这段代码是用于获取所有job分组的后端接口，调用了jobService中的listJobGroups方法并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1853,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.updateUserDisable( UserDisableVO userDisableVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserDisable(UserDisableVO userDisableVO) {\n        removeOnlineUser(userDisableVO.getId());\n        UserInfo userInfo = UserInfo.builder()\n                .id(userDisableVO.getId())\n                .isDisable(userDisableVO.getIsDisable())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }",
        "description": "这段代码使用事务管理，实现了禁用用户功能，包括移除在线用户和更新用户信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1854,
        "fullName": "com.aurora.service.ResourceService.listResources( ConditionVO conditionVO )",
        "comment": "",
        "content": "List<ResourceDTO> listResources(ConditionVO conditionVO);",
        "description": "根据给定的条件对象，返回资源DTO的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1855,
        "fullName": "com.aurora.service.impl.JobServiceImpl.listJobGroups(  )",
        "comment": "",
        "content": "@Override\n    public List<String> listJobGroups() {\n        return jobMapper.listJobGroups();\n    }",
        "description": "该方法实现了获取所有作业组的功能，返回一个包含作业组名称的字符串列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1856,
        "fullName": "com.aurora.controller.TagController.getTopTenTags(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取前十个标签\")\n    @GetMapping(\"\/tags\/topTen\")\n    public ResultVO<List<TagDTO>> getTopTenTags() {\n        return ResultVO.ok(tagService.listTopTenTags());\n    }",
        "description": "该方法用于获取前十个标签的信息并返回给前端。",
        "label": "JavaMethod"
    },
    {
        "id": 1857,
        "fullName": "com.aurora.service.RedisService.zScore( String key, Object value )",
        "comment": "",
        "content": "Double zScore(String key, Object value);",
        "description": "这段代码是用来计算给定值在指定键的z-score（标准分数）的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1858,
        "fullName": "com.aurora.service.impl.OperationLogServiceImpl.listOperationLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<OperationLogDTO> listOperationLogs(ConditionVO conditionVO) {\n        Page<OperationLog> page = new Page<>(PageUtil.getCurrent(), PageUtil.getSize());\n        Page<OperationLog> operationLogPage = this.page(page, new LambdaQueryWrapper<OperationLog>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptModule, conditionVO.getKeywords())\n                .or()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), OperationLog::getOptDesc, conditionVO.getKeywords())\n                .orderByDesc(OperationLog::getId));\n        List<OperationLogDTO> operationLogDTOs = BeanCopyUtil.copyList(operationLogPage.getRecords(), OperationLogDTO.class);\n        return new PageResultDTO<>(operationLogDTOs, (int) operationLogPage.getTotal());\n    }",
        "description": "该方法用于根据条件查询操作日志，并返回相应的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1859,
        "fullName": "com.aurora.service.RoleService.listRoles( ConditionVO conditionVO )",
        "comment": "",
        "content": "PageResultDTO<RoleDTO> listRoles(ConditionVO conditionVO);",
        "description": "该方法用于根据条件VO获取角色DTO列表的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1860,
        "fullName": "com.aurora.controller.ArticleController.listArticles(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取所有文章\")\n    @GetMapping(\"\/articles\/all\")\n    public ResultVO<PageResultDTO<ArticleCardDTO>> listArticles() {\n        return ResultVO.ok(articleService.listArticles());\n    }",
        "description": "这段代码是一个用于获取所有文章的接口，通过调用articleService的listArticles方法返回一个包含文章列表的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1861,
        "fullName": "com.aurora.strategy.impl.QQLoginStrategyImpl.getSocialToken( String data )",
        "comment": "",
        "content": "@Override\n    public SocialTokenDTO getSocialToken(String data) {\n        QQLoginVO qqLoginVO = JSON.parseObject(data, QQLoginVO.class);\n        checkQQToken(qqLoginVO);\n        return SocialTokenDTO.builder()\n                .openId(qqLoginVO.getOpenId())\n                .accessToken(qqLoginVO.getAccessToken())\n                .loginType(LoginTypeEnum.QQ.getType())\n                .build();\n    }",
        "description": "该方法用于获取社交登录的令牌。它接收一个数据参数，将其解析为QQ登录的VO对象。然后，对QQ令牌进行验证。最后，构建并返回一个包含QQ登录信息的DTO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1862,
        "fullName": "com.aurora.util.SpringUtil.getAliases( String name )",
        "comment": "",
        "content": "public static String[] getAliases(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.getAliases(name);\n    }",
        "description": "该方法用于获取给定名称的bean在bean工厂中的所有别名。",
        "label": "JavaMethod"
    },
    {
        "id": 1863,
        "fullName": "com.aurora.controller.ArticleController.listArchives(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取所有文章归档\")\n    @GetMapping(\"\/archives\/all\")\n    public ResultVO<PageResultDTO<ArchiveDTO>> listArchives() {\n        return ResultVO.ok(articleService.listArchives());\n    }",
        "description": "这段代码实现了一个接口，用于获取所有文章的归档信息，并返回一个包含归档信息的结果对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1864,
        "fullName": "com.aurora.controller.UserInfoController.updateUserInfo( UserInfoVO userInfoVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"更新用户信息\")\n    @PutMapping(\"\/users\/info\")\n    public ResultVO<?> updateUserInfo(@Valid @RequestBody UserInfoVO userInfoVO) {\n        userInfoService.updateUserInfo(userInfoVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个更新用户信息的接口，通过PUT请求发送用户信息，并调用userInfoService来更新用户信息。返回一个成功的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1865,
        "fullName": "com.aurora.service.RedisService.geoAdd( String key, Double x, Double y, String name )",
        "comment": "",
        "content": "Long geoAdd(String key, Double x, Double y, String name);",
        "description": "该方法用于向地理位置索引中添加一个地理位置，并返回一个唯一标识符。",
        "label": "JavaMethod"
    },
    {
        "id": 1866,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.listUsers( ConditionVO conditionVO )",
        "comment": "",
        "content": "@Override\n    public PageResultDTO<UserAdminDTO> listUsers(ConditionVO conditionVO) {\n        Integer count = userAuthMapper.countUser(conditionVO);\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<UserAdminDTO> UserAdminDTOs = userAuthMapper.listUsers(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(UserAdminDTOs, count);\n    }",
        "description": "这段代码实现了根据条件查询用户列表的功能，首先统计符合条件的用户数量，如果数量为0则返回空的分页结果，否则根据分页信息查询用户列表并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1867,
        "fullName": "com.aurora.config.RabbitMQConfig.subscribeExchange(  )",
        "comment": "",
        "content": "@Bean\n    public FanoutExchange subscribeExchange() {\n        return new FanoutExchange(SUBSCRIBE_EXCHANGE, true, false);\n    }",
        "description": "创建一个Fanout类型的交换机，名称为SUBSCRIBE_EXCHANGE，持久化且不自动删除。",
        "label": "JavaMethod"
    },
    {
        "id": 1868,
        "fullName": "com.aurora.service.MenuService.saveOrUpdateMenu( MenuVO menuVO )",
        "comment": "",
        "content": "void saveOrUpdateMenu(MenuVO menuVO);",
        "description": "该代码是一个用于保存或更新菜单信息的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1869,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.updateAbout( AboutVO aboutVO )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateAbout(AboutVO aboutVO) {\n        About about = About.builder()\n                .id(DEFAULT_ABOUT_ID)\n                .content(JSON.toJSONString(aboutVO))\n                .build();\n        aboutMapper.updateById(about);\n        redisService.del(ABOUT);\n    }",
        "description": "更新关于页面内容，并将更新后的数据存入数据库和缓存中。",
        "label": "JavaMethod"
    },
    {
        "id": 1870,
        "fullName": "com.aurora.util.HTMLUtil.filter( String source )",
        "comment": "",
        "content": "public static String filter(String source) {\n        source = source.replaceAll(\"(?!<(img).*?>)<.*?>\", \"\")\n                .replaceAll(\"(onload(.*?)=)\", \"\")\n                .replaceAll(\"(onerror(.*?)=)\", \"\");\n        return deleteHMTLTag(source);\n    }",
        "description": "这段代码是一个过滤器方法，用于过滤输入的字符串中的HTML标签和一些特定的事件属性，最后返回经过处理后的字符串。",
        "label": "JavaMethod"
    },
    {
        "id": 1871,
        "fullName": "com.aurora.util.CommonUtil.getBracketsContent( String str )",
        "comment": "",
        "content": "public static String getBracketsContent(String str) {\n        return str.substring(str.indexOf(\"(\") + 1, str.indexOf(\")\"));\n    }",
        "description": "这段代码用于从输入字符串中提取括号内的内容并返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1872,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.saveArticleTag( ArticleVO articleVO, Integer articleId )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    public void saveArticleTag(ArticleVO articleVO, Integer articleId) {\n        if (Objects.nonNull(articleVO.getId())) {\n            articleTagMapper.delete(new LambdaQueryWrapper<ArticleTag>()\n                    .eq(ArticleTag::getArticleId, articleVO.getId()));\n        }\n        List<String> tagNames = articleVO.getTagNames();\n        if (CollectionUtils.isNotEmpty(tagNames)) {\n            List<Tag> existTags = tagService.list(new LambdaQueryWrapper<Tag>()\n                    .in(Tag::getTagName, tagNames));\n            List<String> existTagNames = existTags.stream()\n                    .map(Tag::getTagName)\n                    .collect(Collectors.toList());\n            List<Integer> existTagIds = existTags.stream()\n                    .map(Tag::getId)\n                    .collect(Collectors.toList());\n            tagNames.removeAll(existTagNames);\n            if (CollectionUtils.isNotEmpty(tagNames)) {\n                List<Tag> tags = tagNames.stream().map(item -> Tag.builder()\n                                .tagName(item)\n                                .build())\n                        .collect(Collectors.toList());\n                tagService.saveBatch(tags);\n                List<Integer> tagIds = tags.stream()\n                        .map(Tag::getId)\n                        .collect(Collectors.toList());\n                existTagIds.addAll(tagIds);\n            }\n            List<ArticleTag> articleTags = existTagIds.stream().map(item -> ArticleTag.builder()\n                            .articleId(articleId)\n                            .tagId(item)\n                            .build())\n                    .collect(Collectors.toList());\n            articleTagService.saveBatch(articleTags);\n        }\n    }",
        "description": "该方法用于保存文章标签信息，包括删除已存在的标签关联信息、保存新标签并建立关联。",
        "label": "JavaMethod"
    },
    {
        "id": 1873,
        "fullName": "com.aurora.service.JobLogService.listJobLogGroups(  )",
        "comment": "",
        "content": "List<String> listJobLogGroups();",
        "description": "这段代码返回一个包含作业日志组名称的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1874,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.updatePhoto( PhotoInfoVO photoInfoVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhoto(PhotoInfoVO photoInfoVO) {\n        Photo photo = BeanCopyUtil.copyObject(photoInfoVO, Photo.class);\n        photoMapper.updateById(photo);\n    }",
        "description": "该方法用于更新博客系统中的照片信息，采用事务管理机制，如果发生异常将进行回滚操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1875,
        "fullName": "com.aurora.service.JobService.saveJob( JobVO jobVO )",
        "comment": "",
        "content": "void saveJob(JobVO jobVO);",
        "description": "保存工作信息到数据库。",
        "label": "JavaMethod"
    },
    {
        "id": 1876,
        "fullName": "com.aurora.handler.MyMetaObjectHandler.updateFill( MetaObject metaObject )",
        "comment": "",
        "content": "@Override\n    public void updateFill(MetaObject metaObject) {\n        log.info(\"start update fill ....\");\n        this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now());\n    }",
        "description": "该方法用于更新填充操作，记录日志并更新 updateTime 字段为当前时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1877,
        "fullName": "com.aurora.controller.OperationLogController.listOperationLogs( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看操作日志\")\n    @GetMapping(\"\/admin\/operation\/logs\")\n    public ResultVO<PageResultDTO<OperationLogDTO>> listOperationLogs(ConditionVO conditionVO) {\n        return ResultVO.ok(operationLogService.listOperationLogs(conditionVO));\n    }",
        "description": "这段代码是用来查看操作日志的功能，通过GET请求访问\"\/admin\/operation\/logs\"路由，返回一个包含操作日志信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1878,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.sRemove( String key, Object values )",
        "comment": "",
        "content": "@Override\n    public Long sRemove(String key, Object... values) {\n        return redisTemplate.opsForSet().remove(key, values);\n    }",
        "description": "这段代码是一个Redis操作的方法，用于从指定的集合中移除一个或多个元素。",
        "label": "JavaMethod"
    },
    {
        "id": 1879,
        "fullName": "com.aurora.handler.AuthenticationSuccessHandlerImpl.onAuthenticationSuccess( HttpServletRequest request, HttpServletResponse response, Authentication authentication )",
        "comment": "",
        "content": "@Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {\n        UserInfoDTO userLoginDTO = BeanCopyUtil.copyObject(UserUtil.getUserDetailsDTO(), UserInfoDTO.class);\n        if (Objects.nonNull(authentication)) {\n            UserDetailsDTO userDetailsDTO = (UserDetailsDTO) authentication.getPrincipal();\n            String token = tokenService.createToken(userDetailsDTO);\n            userLoginDTO.setToken(token);\n        }\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.ok(userLoginDTO)));\n        updateUserInfo();\n    }",
        "description": "这段代码是在用户成功登录时，将用户信息转换为DTO对象，并生成一个token，然后返回该用户信息和token的JSON响应，并更新用户信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1880,
        "fullName": "com.aurora.controller.JobLogController.listJobLogGroups(  )",
        "comment": "",
        "content": "@ApiOperation(\"获取定时任务日志的所有组名\")\n    @GetMapping(\"\/admin\/jobLogs\/jobGroups\")\n    public ResultVO<?> listJobLogGroups() {\n        return ResultVO.ok(jobLogService.listJobLogGroups());\n    }",
        "description": "此代码是一个用于获取定时任务日志所有组名的接口，返回结果为包含所有组名的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1881,
        "fullName": "com.aurora.service.MenuService.deleteMenu( Integer menuId )",
        "comment": "",
        "content": "void deleteMenu(Integer menuId);",
        "description": "该函数用于删除指定菜单ID的菜单。",
        "label": "JavaMethod"
    },
    {
        "id": 1882,
        "fullName": "com.aurora.service.UserInfoService.saveUserEmail( EmailVO emailVO )",
        "comment": "",
        "content": "void saveUserEmail(EmailVO emailVO);",
        "description": "该代码是用来保存用户的电子邮件信息的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1883,
        "fullName": "com.aurora.handler.AccessDeniedHandlerImpl.handle( HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException )",
        "comment": "",
        "content": "@Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {\n        response.setContentType(CommonConstant.APPLICATION_JSON);\n        response.getWriter().write(JSON.toJSONString(ResultVO.fail(\"权限不足\")));\n    }",
        "description": "这段代码是用来处理权限不足的异常，返回一个包含错误信息的 JSON 响应。",
        "label": "JavaMethod"
    },
    {
        "id": 1884,
        "fullName": "com.aurora.service.RedisService.del( String key )",
        "comment": "",
        "content": "Boolean del(String key);",
        "description": "该方法用于从博客系统中删除指定键对应的数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1885,
        "fullName": "com.aurora.quartz.AuroraQuartz.importSwagger(  )",
        "comment": "",
        "content": "public void importSwagger() {\n        resourceService.importSwagger();\n        List<Integer> resourceIds = resourceService.list().stream().map(Resource::getId).collect(Collectors.toList());\n        List<RoleResource> roleResources = new ArrayList<>();\n        for (Integer resourceId : resourceIds) {\n            roleResources.add(RoleResource.builder()\n                    .roleId(1)\n                    .resourceId(resourceId)\n                    .build());\n        }\n        roleResourceService.saveBatch(roleResources);\n    }",
        "description": "该方法用于导入Swagger资源，获取所有资源的ID并为指定角色分配这些资源。",
        "label": "JavaMethod"
    },
    {
        "id": 1886,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl.deleteCategories( List<Integer> categoryIds )",
        "comment": "",
        "content": "@Override\n    public void deleteCategories(List<Integer> categoryIds) {\n        Integer count = articleMapper.selectCount(new LambdaQueryWrapper<Article>()\n                .in(Article::getCategoryId, categoryIds));\n        if (count > 0) {\n            throw new BizException(\"删除失败，该分类下存在文章\");\n        }\n        categoryMapper.deleteBatchIds(categoryIds);\n    }",
        "description": "这段代码实现了删除博客系统后端中的分类信息功能，首先会检查指定分类下是否存在文章，如果存在则抛出异常，否则会批量删除指定的分类。",
        "label": "JavaMethod"
    },
    {
        "id": 1887,
        "fullName": "com.aurora.util.PageUtil.getCurrent(  )",
        "comment": "",
        "content": "public static Long getCurrent() {\n        return getPage().getCurrent();\n    }",
        "description": "这段代码是一个静态方法，用于获取当前页面的页码。",
        "label": "JavaMethod"
    },
    {
        "id": 1888,
        "fullName": "com.aurora.util.JobInvokeUtil.getBeanName( String invokeTarget )",
        "comment": "",
        "content": "public static String getBeanName(String invokeTarget) {\n        String beanName = StringUtils.substringBefore(invokeTarget, \"(\");\n        return StringUtils.substringBeforeLast(beanName, \".\");\n    }",
        "description": "该方法用于从调用目标中提取Bean的名称，通过截取调用目标中的方法名获取Bean名称。",
        "label": "JavaMethod"
    },
    {
        "id": 1889,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.sendCode( String username )",
        "comment": "",
        "content": "@Override\n    public void sendCode(String username) {\n        if (!checkEmail(username)) {\n            throw new BizException(\"请输入正确邮箱\");\n        }\n        String code = getRandomCode();\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"content\", \"您的验证码为 \" + code + \" 有效期15分钟，请不要告诉他人哦！\");\n        EmailDTO emailDTO = EmailDTO.builder()\n                .email(username)\n                .subject(CommonConstant.CAPTCHA)\n                .template(\"common.html\")\n                .commentMap(map)\n                .build();\n        rabbitTemplate.convertAndSend(EMAIL_EXCHANGE, \"*\", new Message(JSON.toJSONBytes(emailDTO), new MessageProperties()));\n        redisService.set(USER_CODE_KEY + username, code, CODE_EXPIRE_TIME);\n    }",
        "description": "该方法用于向用户发送验证码邮件，首先校验邮箱格式是否正确，然后生成随机验证码，将验证码信息包装成邮件内容并发送给用户，同时将验证码存储到redis中，有效期为15分钟。",
        "label": "JavaMethod"
    },
    {
        "id": 1890,
        "fullName": "com.aurora.service.PhotoAlbumService.listPhotoAlbumInfosAdmin(  )",
        "comment": "",
        "content": "List<PhotoAlbumDTO> listPhotoAlbumInfosAdmin();",
        "description": "该方法返回一个PhotoAlbumDTO对象列表，用于管理员查看相册信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1891,
        "fullName": "com.aurora.controller.PhotoController.savePhotos( PhotoVO photoVO )",
        "comment": "",
        "content": "@OptLog(optType = SAVE)\n    @ApiOperation(value = \"保存照片\")\n    @PostMapping(\"\/admin\/photos\")\n    public ResultVO<?> savePhotos(@Valid @RequestBody PhotoVO photoVO) {\n        photoService.savePhotos(photoVO);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于保存照片信息，接收一个PhotoVO对象作为参数，并调用photoService保存照片信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1892,
        "fullName": "com.aurora.util.UserUtil.getUserDetailsDTO(  )",
        "comment": "",
        "content": "public static UserDetailsDTO getUserDetailsDTO() {\n        return (UserDetailsDTO) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    }",
        "description": "这段代码用于获取当前登录用户的详细信息作为 UserDetailsDTO 对象返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1893,
        "fullName": "com.aurora.config.WebSecurityConfig.securityMetadataSource(  )",
        "comment": "",
        "content": "@Bean\n    public FilterInvocationSecurityMetadataSource securityMetadataSource() {\n        return new FilterInvocationSecurityMetadataSourceImpl();\n    }",
        "description": "这段代码创建了一个用于处理安全元数据的过滤器调用安全元数据源。",
        "label": "JavaMethod"
    },
    {
        "id": 1894,
        "fullName": "com.aurora.service.impl.JobServiceImpl.listJobs( JobSearchVO jobSearchVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<JobDTO> listJobs(JobSearchVO jobSearchVO) {\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> jobMapper.countJobs(jobSearchVO));\n        List<JobDTO> jobDTOs = jobMapper.listJobs(PageUtil.getLimitCurrent(), PageUtil.getSize(), jobSearchVO);\n        return new PageResultDTO<>(jobDTOs, asyncCount.get());\n    }",
        "description": "这段代码实现了一个博客系统中的后端功能，通过异步处理来获取职位列表，并返回一个包含职位DTO和总数的分页结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1895,
        "fullName": "com.aurora.service.RedisService.geoGetHash( String key, String place )",
        "comment": "",
        "content": "List<String> geoGetHash(String key, String... place);",
        "description": "这段代码实现了根据键和地点获取地理哈希值的功能。",
        "label": "JavaMethod"
    },
    {
        "id": 1896,
        "fullName": "com.aurora.service.impl.JobServiceImpl.updateJob( JobVO jobVO )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void updateJob(JobVO jobVO) {\n        checkCronIsValid(jobVO);\n        Job temp = jobMapper.selectById(jobVO.getId());\n        Job job = BeanCopyUtil.copyObject(jobVO, Job.class);\n        int row = jobMapper.updateById(job);\n        if (row > 0) updateSchedulerJob(job, temp.getJobGroup());\n    }",
        "description": "该方法用于更新指定的任务信息，首先检查任务的cron表达式是否有效，然后根据传入的JobVO对象更新数据库中相应的任务信息，并更新调度器中的任务信息。如果更新成功则更新调度器中的任务信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1897,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.getUserDetail( UserAuth user, String ipAddress, String ipSource )",
        "comment": "",
        "content": "private UserDetailsDTO getUserDetail(UserAuth user, String ipAddress, String ipSource) {\n        userAuthMapper.update(new UserAuth(), new LambdaUpdateWrapper<UserAuth>()\n                .set(UserAuth::getLastLoginTime, LocalDateTime.now())\n                .set(UserAuth::getIpAddress, ipAddress)\n                .set(UserAuth::getIpSource, ipSource)\n                .eq(UserAuth::getId, user.getId()));\n        return userDetailService.convertUserDetail(user, request);\n    }",
        "description": "根据用户信息更新最后登录时间、IP地址及来源，并返回用户详细信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1898,
        "fullName": "com.aurora.controller.UserAuthController.qqLogin( QQLoginVO qqLoginVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"qq登录\")\n    @PostMapping(\"\/users\/oauth\/qq\")\n    public ResultVO<UserInfoDTO> qqLogin(@Valid @RequestBody QQLoginVO qqLoginVO) {\n        return ResultVO.ok(userAuthService.qqLogin(qqLoginVO));\n    }",
        "description": "这段代码是一个用于实现qq登录功能的接口，接收一个QQLoginVO对象并返回一个包含用户信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1899,
        "fullName": "com.aurora.util.ScheduleUtil.createScheduleJob( Scheduler scheduler, Job job )",
        "comment": "",
        "content": "public static void createScheduleJob(Scheduler scheduler, Job job) throws SchedulerException, TaskException {\n        Class<? extends org.quartz.Job> jobClass = getQuartzJobClass(job);\n        Integer jobId = job.getId();\n        String jobGroup = job.getJobGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getJobKey(jobId, jobGroup)).build();\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n        jobDetail.getJobDataMap().put(ScheduleConstant.TASK_PROPERTIES, job);\n        if (scheduler.checkExists(getJobKey(jobId, jobGroup))) {\n            scheduler.deleteJob(getJobKey(jobId, jobGroup));\n        }\n        scheduler.scheduleJob(jobDetail, trigger);\n        if (job.getStatus().equals(JobStatusEnum.PAUSE.getValue())) {\n            scheduler.pauseJob(ScheduleUtil.getJobKey(jobId, jobGroup));\n        }\n    }",
        "description": "创建一个定时任务，并根据传入的作业信息和CRON表达式设置定时任务的执行时间，如果作业已存在则删除后重新创建。如果作业状态为暂停，则暂停该定时任务。",
        "label": "JavaMethod"
    },
    {
        "id": 1900,
        "fullName": "com.aurora.quartz.AuroraQuartz.statisticalUserArea(  )",
        "comment": "",
        "content": "public void statisticalUserArea() {\n        Map<String, Long> userAreaMap = userAuthMapper.selectList(new LambdaQueryWrapper<UserAuth>().select(UserAuth::getIpSource))\n                .stream()\n                .map(item -> {\n                    if (Objects.nonNull(item) && StringUtils.isNotBlank(item.getIpSource())) {\n                        return IpUtil.getIpProvince(item.getIpSource());\n                    }\n                    return UNKNOWN;\n                })\n                .collect(Collectors.groupingBy(item -> item, Collectors.counting()));\n        List<UserAreaDTO> userAreaList = userAreaMap.entrySet().stream()\n                .map(item -> UserAreaDTO.builder()\n                        .name(item.getKey())\n                        .value(item.getValue())\n                        .build())\n                .collect(Collectors.toList());\n        redisService.set(USER_AREA, JSON.toJSONString(userAreaList));\n    }",
        "description": "该代码用于统计用户的地区信息，通过用户认证映射器获取用户的IP来源并根据IP地址解析出用户所在省份，然后统计每个省份的用户数量并存储到Redis中。",
        "label": "JavaMethod"
    },
    {
        "id": 1901,
        "fullName": "com.aurora.service.JobService.updateJobStatus( JobStatusVO jobStatusVO )",
        "comment": "",
        "content": "void updateJobStatus(JobStatusVO jobStatusVO);",
        "description": "这段代码是用来更新工作状态的VO对象的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1902,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.updatePassword( UserVO userVO )",
        "comment": "",
        "content": "@Override\n    public void updatePassword(UserVO userVO) {\n        if (!checkUser(userVO)) {\n            throw new BizException(\"邮箱尚未注册！\");\n        }\n        userAuthMapper.update(new UserAuth(), new LambdaUpdateWrapper<UserAuth>()\n                .set(UserAuth::getPassword, BCrypt.hashpw(userVO.getPassword(), BCrypt.gensalt()))\n                .eq(UserAuth::getUsername, userVO.getUsername()));\n    }",
        "description": "这段代码是一个博客系统后端的更新密码方法。首先，它会检查用户是否存在，如果用户不存在，则抛出一个业务异常，表示邮箱尚未注册。然后，它使用BCrypt算法对用户的密码进行加密，并将加密后的密码更新到数据库中的用户认证表中，更新条件是用户名与传入的用户VO对象中的用户名相匹配。",
        "label": "JavaMethod"
    },
    {
        "id": 1903,
        "fullName": "com.aurora.controller.UserInfoController.updateUserRole( UserRoleVO userRoleVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改用户角色\")\n    @PutMapping(\"\/admin\/users\/role\")\n    public ResultVO<?> updateUserRole(@Valid @RequestBody UserRoleVO userRoleVO) {\n        userInfoService.updateUserRole(userRoleVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码实现了一个用于修改用户角色的接口，通过接收用户角色信息并调用userInfoService来更新用户角色信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1904,
        "fullName": "com.aurora.service.ArticleService.listArticlesByTagId( Integer tagId )",
        "comment": "",
        "content": "PageResultDTO<ArticleCardDTO> listArticlesByTagId(Integer tagId);",
        "description": "根据标签ID列出文章卡片的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1905,
        "fullName": "com.aurora.service.RedisService.incr( String key, long delta )",
        "comment": "",
        "content": "Long incr(String key, long delta);",
        "description": "这段代码实现了根据指定的key递增一个长整型值并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1906,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.getSocialToken( String data )",
        "comment": "",
        "content": "public abstract SocialTokenDTO getSocialToken(String data);",
        "description": "这段代码是一个抽象方法，用于获取社交媒体的令牌信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1907,
        "fullName": "com.aurora.service.RedisService.lPushAll( String key, Long time, Object values )",
        "comment": "",
        "content": "Long lPushAll(String key, Long time, Object... values);",
        "description": "这段代码是一个用于向指定键值的列表中批量添加元素的方法，可以设置过期时间。",
        "label": "JavaMethod"
    },
    {
        "id": 1908,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.del( List<String> keys )",
        "comment": "",
        "content": "@Override\n    public Long del(List<String> keys) {\n        return redisTemplate.delete(keys);\n    }",
        "description": "这段代码是一个博客系统的后端代码，它是一个重写的方法。该方法接受一个字符串列表作为参数，然后使用redisTemplate来删除这些键，并返回删除的键的数量。",
        "label": "JavaMethod"
    },
    {
        "id": 1909,
        "fullName": "com.aurora.service.TokenService.createToken( String subject )",
        "comment": "",
        "content": "String createToken(String subject);",
        "description": "这段代码是用于创建一个令牌（token），参数为主题（subject）。",
        "label": "JavaMethod"
    },
    {
        "id": 1910,
        "fullName": "com.aurora.controller.TalkController.listBackTalks( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看后台说说\")\n    @GetMapping(\"\/admin\/talks\")\n    public ResultVO<PageResultDTO<TalkAdminDTO>> listBackTalks(ConditionVO conditionVO) {\n        return ResultVO.ok(talkService.listBackTalks(conditionVO));\n    }",
        "description": "这段代码是用于查看后台说说的接口，通过条件VO获取后台说说列表并返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1911,
        "fullName": "com.aurora.mapper.ArticleMapper.getFirstArticle(  )",
        "comment": "",
        "content": "ArticleCardDTO getFirstArticle();",
        "description": "获取第一篇文章的文章卡片数据传输对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1912,
        "fullName": "com.aurora.service.TalkService.listTalks(  )",
        "comment": "",
        "content": "PageResultDTO<TalkDTO> listTalks();",
        "description": "该方法返回一个包含对话DTO的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1913,
        "fullName": "com.aurora.controller.TalkController.listTalks(  )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看说说列表\")\n    @GetMapping(\"\/talks\")\n    public ResultVO<PageResultDTO<TalkDTO>> listTalks() {\n        return ResultVO.ok(talkService.listTalks());\n    }",
        "description": "该方法用于查看说说列表，返回一个包含说说DTO的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1914,
        "fullName": "com.aurora.util.CommonUtil.castSet( Object obj, Class<T> clazz )",
        "comment": "",
        "content": "public static <T> Set<T> castSet(Object obj, Class<T> clazz) {\n        Set<T> result = new HashSet<>();\n        if (obj instanceof Set<?>) {\n            for (Object o : (Set<?>) obj) {\n                result.add(clazz.cast(o));\n            }\n            return result;\n        }\n        return result;\n    }",
        "description": "这段代码实现了一个方法，用于将一个对象转换为指定类型的集合。如果传入的对象是一个集合，那么将集合中的每个元素转换为指定类型，并返回一个新的集合。",
        "label": "JavaMethod"
    },
    {
        "id": 1915,
        "fullName": "com.aurora.controller.UserInfoController.getUserInfoById( Integer userInfoId )",
        "comment": "",
        "content": "@ApiOperation(\"根据id获取用户信息\")\n    @GetMapping(\"\/users\/info\/{userInfoId}\")\n    public ResultVO<UserInfoDTO> getUserInfoById(@PathVariable(\"userInfoId\") Integer userInfoId) {\n        return ResultVO.ok(userInfoService.getUserInfoById(userInfoId));\n    }",
        "description": "根据用户信息ID获取用户信息的接口。",
        "label": "JavaMethod"
    },
    {
        "id": 1916,
        "fullName": "com.aurora.service.PhotoService.updatePhoto( PhotoInfoVO photoInfoVO )",
        "comment": "",
        "content": "void updatePhoto(PhotoInfoVO photoInfoVO);",
        "description": "这段代码是用来更新博客系统中的照片信息的函数。",
        "label": "JavaMethod"
    },
    {
        "id": 1917,
        "fullName": "com.aurora.service.TokenService.createToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "String createToken(UserDetailsDTO userDetailsDTO);",
        "description": "该代码用于创建一个令牌(Token)，参数为用户详细信息数据传输对象(UserDetailsDTO)。",
        "label": "JavaMethod"
    },
    {
        "id": 1918,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.login( String data )",
        "comment": "",
        "content": "@Override\n    public UserInfoDTO login(String data) {\n        UserDetailsDTO userDetailsDTO;\n        SocialTokenDTO socialToken = getSocialToken(data);\n        String ipAddress = IpUtil.getIpAddress(request);\n        String ipSource = IpUtil.getIpSource(ipAddress);\n        UserAuth user = getUserAuth(socialToken);\n        if (Objects.nonNull(user)) {\n            userDetailsDTO = getUserDetail(user, ipAddress, ipSource);\n        } else {\n            userDetailsDTO = saveUserDetail(socialToken, ipAddress, ipSource);\n        }\n        if (userDetailsDTO.getIsDisable().equals(TRUE)) {\n            throw new BizException(\"用户帐号已被锁定\");\n        }\n        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(userDetailsDTO, null, userDetailsDTO.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(auth);\n        UserInfoDTO userInfoDTO = BeanCopyUtil.copyObject(userDetailsDTO, UserInfoDTO.class);\n        String token = tokenService.createToken(userDetailsDTO);\n        userInfoDTO.setToken(token);\n        return userInfoDTO;\n    }",
        "description": "该方法实现了用户登录功能，根据传入的数据获取社交令牌，获取用户IP地址和来源，根据社交令牌获取用户授权信息，如果用户存在则获取用户详细信息，否则保存用户详细信息。如果用户账号已被锁定，则抛出业务异常。最后创建用户认证令牌并设置到安全上下文中，返回用户信息DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1919,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.geoGetPointList( String key, Object place )",
        "comment": "",
        "content": "@Override\n    public List<Point> geoGetPointList(String key, Object... place) {\n        return redisTemplate.opsForGeo().position(key, place);\n    }",
        "description": "该方法是一个重写方法，用于从Redis中获取指定key的地理位置信息列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1920,
        "fullName": "com.aurora.config.WebMvcConfig.addInterceptors( InterceptorRegistry registry )",
        "comment": "",
        "content": "@Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(paginationInterceptor);\n        registry.addInterceptor(accessLimitInterceptor);\n    }",
        "description": "该代码重写了addInterceptors方法，向拦截器注册表中添加了paginationInterceptor和accessLimitInterceptor两个拦截器。",
        "label": "JavaMethod"
    },
    {
        "id": 1921,
        "fullName": "com.aurora.service.impl.ResourceServiceImpl.listResourceModule( List<Resource> resourceList )",
        "comment": "",
        "content": "private List<Resource> listResourceModule(List<Resource> resourceList) {\n        return resourceList.stream()\n                .filter(item -> Objects.isNull(item.getParentId()))\n                .collect(Collectors.toList());\n    }",
        "description": "这段代码用于筛选出具有空父级ID的资源模块并返回一个资源列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1922,
        "fullName": "com.aurora.util.HTMLUtil.deleteHMTLTag( String source )",
        "comment": "",
        "content": "public static String deleteHMTLTag(String source) {\n        source = source.replaceAll(\"&.{2,6}?;\", \"\");\n        source = source.replaceAll(\"<[\\\\s]*?script[^>]*?>[\\\\s\\\\S]*?<[\\\\s]*?\\\\\/[\\\\s]*?script[\\\\s]*?>\", \"\");\n        source = source.replaceAll(\"<[\\\\s]*?style[^>]*?>[\\\\s\\\\S]*?<[\\\\s]*?\\\\\/[\\\\s]*?style[\\\\s]*?>\", \"\");\n        return source;\n    }",
        "description": "这段代码是用来删除HTML标签、script标签和style标签的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1923,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.listArticleRank( Map<Object,Double> articleMap )",
        "comment": "",
        "content": "private List<ArticleRankDTO> listArticleRank(Map<Object, Double> articleMap) {\n        List<Integer> articleIds = new ArrayList<>(articleMap.size());\n        articleMap.forEach((key, value) -> articleIds.add((Integer) key));\n        return articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                        .select(Article::getId, Article::getArticleTitle)\n                        .in(Article::getId, articleIds))\n                .stream().map(article -> ArticleRankDTO.builder()\n                        .articleTitle(article.getArticleTitle())\n                        .viewsCount(articleMap.get(article.getId()).intValue())\n                        .build())\n                .sorted(Comparator.comparingInt(ArticleRankDTO::getViewsCount).reversed())\n                .collect(Collectors.toList());\n    }",
        "description": "这段代码是一个私有方法，用于生成文章排行榜的数据。根据传入的文章Map，获取文章的ID列表，并通过这些ID查询数据库中对应的文章信息。然后，将查询到的文章信息映射为ArticleRankDTO对象，并根据浏览次数对文章进行降序排序。最后，将排序后的文章列表收集为一个List返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1924,
        "fullName": "com.aurora.controller.CommentController.updateCommentsReview( ReviewVO reviewVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"审核评论\")\n    @PutMapping(\"\/admin\/comments\/review\")\n    public ResultVO<?> updateCommentsReview(@Valid @RequestBody ReviewVO reviewVO) {\n        commentService.updateCommentsReview(reviewVO);\n        return ResultVO.ok();\n    }",
        "description": "该方法用于更新评论审核状态，接收一个ReviewVO对象作为参数，并调用commentService的方法更新评论审核状态。",
        "label": "JavaMethod"
    },
    {
        "id": 1925,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.bitAdd( String key, int offset, boolean b )",
        "comment": "",
        "content": "@Override\n    public Boolean bitAdd(String key, int offset, boolean b) {\n        return redisTemplate.opsForValue().setBit(key, offset, b);\n    }",
        "description": "该方法用于向Redis中的指定key的位图数据结构中的指定偏移量offset处设置一个位的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1926,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.getUuid(  )",
        "comment": "",
        "content": "public String getUuid() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }",
        "description": "这段代码是一个公共方法，用于获取一个随机的UUID，并将其中的\"-\"字符替换为空字符串后返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1927,
        "fullName": "com.aurora.controller.AuroraInfoController.updateAbout( AboutVO aboutVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(value = \"修改关于我信息\")\n    @PutMapping(\"\/admin\/about\")\n    public ResultVO<?> updateAbout(@Valid @RequestBody AboutVO aboutVO) {\n        auroraInfoService.updateAbout(aboutVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于更新关于我信息的后端接口，通过PUT请求发送AboutVO对象，然后调用auroraInfoService来更新关于我信息。返回一个成功的ResultVO。",
        "label": "JavaMethod"
    },
    {
        "id": 1928,
        "fullName": "com.aurora.mapper.ArticleMapper.listArchives( Long current, Long size )",
        "comment": "",
        "content": "List<ArticleCardDTO> listArchives(@Param(\"current\") Long current, @Param(\"size\") Long size);",
        "description": "这段代码用于获取文章卡片的DTO列表，并根据传入的current和size参数进行分页查询。",
        "label": "JavaMethod"
    },
    {
        "id": 1929,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.lRemove( String key, long count, Object value )",
        "comment": "",
        "content": "@Override\n    public Long lRemove(String key, long count, Object value) {\n        return redisTemplate.opsForList().remove(key, count, value);\n    }",
        "description": "这段代码是一个用于从Redis中移除指定列表中元素的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1930,
        "fullName": "com.aurora.strategy.impl.AbstractSocialLoginStrategyImpl.getSocialUserInfo( SocialTokenDTO socialTokenDTO )",
        "comment": "",
        "content": "public abstract SocialUserInfoDTO getSocialUserInfo(SocialTokenDTO socialTokenDTO);",
        "description": "这段代码定义了一个抽象方法，用于获取社交用户信息DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1931,
        "fullName": "com.aurora.service.RedisService.hSet( String key, String hashKey, Object value )",
        "comment": "",
        "content": "void hSet(String key, String hashKey, Object value);",
        "description": "该函数用于向指定键对应的哈希表中设置指定字段的值。",
        "label": "JavaMethod"
    },
    {
        "id": 1932,
        "fullName": "com.aurora.strategy.impl.MySqlSearchStrategyImpl.searchArticle( String keywords )",
        "comment": "",
        "content": "@Override\n    public List<ArticleSearchDTO> searchArticle(String keywords) {\n        if (StringUtils.isBlank(keywords)) {\n            return new ArrayList<>();\n        }\n        List<Article> articles = articleMapper.selectList(new LambdaQueryWrapper<Article>()\n                .eq(Article::getIsDelete, FALSE)\n                .eq(Article::getStatus, PUBLIC.getStatus())\n                .and(i -> i.like(Article::getArticleTitle, keywords)\n                        .or()\n                        .like(Article::getArticleContent, keywords)));\n        return articles.stream().map(item -> {\n                    boolean isLowerCase = true;\n                    String articleContent = item.getArticleContent();\n                    int contentIndex = item.getArticleContent().indexOf(keywords.toLowerCase());\n                    if (contentIndex == -1) {\n                        contentIndex = item.getArticleContent().indexOf(keywords.toUpperCase());\n                        if (contentIndex != -1) {\n                            isLowerCase = false;\n                        }\n                    }\n                    if (contentIndex != -1) {\n                        int preIndex = contentIndex > 15 ? contentIndex - 15 : 0;\n                        String preText = item.getArticleContent().substring(preIndex, contentIndex);\n                        int last = contentIndex + keywords.length();\n                        int postLength = item.getArticleContent().length() - last;\n                        int postIndex = postLength > 35 ? last + 35 : last + postLength;\n                        String postText = item.getArticleContent().substring(contentIndex, postIndex);\n                        if (isLowerCase) {\n                            articleContent = (preText + postText).replaceAll(keywords.toLowerCase(), PRE_TAG + keywords.toLowerCase() + POST_TAG);\n                        } else {\n                            articleContent = (preText + postText).replaceAll(keywords.toUpperCase(), PRE_TAG + keywords.toUpperCase() + POST_TAG);\n                        }\n                    } else {\n                        return null;\n                    }\n                    isLowerCase = true;\n                    int titleIndex = item.getArticleTitle().indexOf(keywords.toLowerCase());\n                    if (titleIndex == -1) {\n                        titleIndex = item.getArticleTitle().indexOf(keywords.toUpperCase());\n                        if (titleIndex != -1) {\n                            isLowerCase = false;\n                        }\n                    }\n                    String articleTitle;\n                    if (isLowerCase) {\n                        articleTitle = item.getArticleTitle().replaceAll(keywords.toLowerCase(), PRE_TAG + keywords.toLowerCase() + POST_TAG);\n                    } else {\n                        articleTitle = item.getArticleTitle().replaceAll(keywords.toUpperCase(), PRE_TAG + keywords.toUpperCase() + POST_TAG);\n                    }\n                    return ArticleSearchDTO.builder()\n                            .id(item.getId())\n                            .articleTitle(articleTitle)\n                            .articleContent(articleContent)\n                            .build();\n                }).filter(Objects::nonNull)\n                .collect(Collectors.toList());\n    }",
        "description": "该方法用于根据关键字搜索文章内容和标题，返回包含关键字高亮标签的文章搜索结果列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1933,
        "fullName": "com.aurora.strategy.impl.AbstractUploadStrategyImpl.getFileAccessUrl( String filePath )",
        "comment": "",
        "content": "public abstract String getFileAccessUrl(String filePath);",
        "description": "这段代码是一个抽象方法，用于获取指定文件路径的访问URL。",
        "label": "JavaMethod"
    },
    {
        "id": 1934,
        "fullName": "com.aurora.service.UserAuthService.register( UserVO userVO )",
        "comment": "",
        "content": "void register(UserVO userVO);",
        "description": "注册一个用户，并将用户信息存储到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1935,
        "fullName": "com.aurora.service.impl.MenuServiceImpl.deleteMenu( Integer menuId )",
        "comment": "",
        "content": "@Override\n    public void deleteMenu(Integer menuId) {\n        Integer count = roleMenuMapper.selectCount(new LambdaQueryWrapper<RoleMenu>()\n                .eq(RoleMenu::getMenuId, menuId));\n        if (count > 0) {\n            throw new BizException(\"菜单下有角色关联\");\n        }\n        List<Integer> menuIds = menuMapper.selectList(new LambdaQueryWrapper<Menu>()\n                        .select(Menu::getId)\n                        .eq(Menu::getParentId, menuId))\n                .stream()\n                .map(Menu::getId)\n                .collect(Collectors.toList());\n        menuIds.add(menuId);\n        menuMapper.deleteBatchIds(menuIds);\n    }",
        "description": "这段代码实现了删除菜单功能，首先判断菜单是否与角色有关联，如果有关联则抛出异常。然后获取当前菜单及其子菜单的ID列表，并进行批量删除操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1936,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.zIncr( String key, Object value, Double score )",
        "comment": "",
        "content": "@Override\n    public Double zIncr(String key, Object value, Double score) {\n        return redisTemplate.opsForZSet().incrementScore(key, value, score);\n    }",
        "description": "该方法实现了对Redis中指定key的有序集合中某个成员的分数进行增加操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1937,
        "fullName": "com.aurora.service.impl.ArticleServiceImpl.listArticlesByCategoryId( Integer categoryId )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<ArticleCardDTO> listArticlesByCategoryId(Integer categoryId) {\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<Article>().eq(Article::getCategoryId, categoryId);\n        CompletableFuture<Integer> asyncCount = CompletableFuture.supplyAsync(() -> articleMapper.selectCount(queryWrapper));\n        List<ArticleCardDTO> articles = articleMapper.getArticlesByCategoryId(PageUtil.getLimitCurrent(), PageUtil.getSize(), categoryId);\n        return new PageResultDTO<>(articles, asyncCount.get());\n    }",
        "description": "这段代码实现了根据分类ID列出文章列表的功能，其中使用了异步计算文章总数并返回文章卡片DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1938,
        "fullName": "com.aurora.service.impl.TagServiceImpl.listTagsAdmin( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public PageResultDTO<TagAdminDTO> listTagsAdmin(ConditionVO conditionVO) {\n        Integer count = tagMapper.selectCount(new LambdaQueryWrapper<Tag>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Tag::getTagName, conditionVO.getKeywords()));\n        if (count == 0) {\n            return new PageResultDTO<>();\n        }\n        List<TagAdminDTO> tags = tagMapper.listTagsAdmin(PageUtil.getLimitCurrent(), PageUtil.getSize(), conditionVO);\n        return new PageResultDTO<>(tags, count);\n    }",
        "description": "这段代码实现了获取管理端标签列表的功能，根据条件VO中的关键词进行模糊查询标签名，返回符合条件的标签列表和总数。",
        "label": "JavaMethod"
    },
    {
        "id": 1939,
        "fullName": "com.aurora.util.SpringUtil.setApplicationContext( ApplicationContext applicationContext )",
        "comment": "",
        "content": "@Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        SpringUtil.applicationContext = applicationContext;\n    }",
        "description": "设置应用程序上下文的方法，将传入的应用程序上下文赋值给SpringUtil类的静态变量applicationContext。",
        "label": "JavaMethod"
    },
    {
        "id": 1940,
        "fullName": "com.aurora.service.TokenService.parseToken( String token )",
        "comment": "",
        "content": "Claims parseToken(String token);",
        "description": "该代码用于解析传入的令牌并返回其声明信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1941,
        "fullName": "com.aurora.service.impl.UserAuthServiceImpl.checkUser( UserVO user )",
        "comment": "",
        "content": "private Boolean checkUser(UserVO user) {\n        if (!user.getCode().equals(redisService.get(USER_CODE_KEY + user.getUsername()))) {\n            throw new BizException(\"验证码错误！\");\n        }\n        UserAuth userAuth = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .select(UserAuth::getUsername)\n                .eq(UserAuth::getUsername, user.getUsername()));\n        return Objects.nonNull(userAuth);\n    }",
        "description": "该方法用于检查用户输入的验证码是否与存储在Redis中的验证码匹配，并查询数据库中是否存在该用户的认证信息。如果验证码错误，将抛出业务异常。最终返回一个布尔值表示用户是否存在认证信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1942,
        "fullName": "com.aurora.service.ArticleService.getArticleByIdAdmin( Integer articleId )",
        "comment": "",
        "content": "ArticleAdminViewDTO getArticleByIdAdmin(Integer articleId);",
        "description": "根据文章ID获取文章的管理员视图数据对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1943,
        "fullName": "com.aurora.util.SpringUtil.isSingleton( String name )",
        "comment": "",
        "content": "public static boolean isSingleton(String name) throws NoSuchBeanDefinitionException {\n        return beanFactory.isSingleton(name);\n    }",
        "description": "这段代码检查给定名称的bean是否为单例。",
        "label": "JavaMethod"
    },
    {
        "id": 1944,
        "fullName": "com.aurora.mapper.JobMapper.listJobs( Long current, Long size, JobSearchVO jobSearchVO )",
        "comment": "",
        "content": "List<JobDTO> listJobs(@Param(\"current\") Long current, @Param(\"size\") Long size, @Param(\"jobSearchVO\")JobSearchVO jobSearchVO);",
        "description": "这段代码是一个用于列出工作列表的方法，接受当前页码、每页数量和工作搜索条件作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1945,
        "fullName": "com.aurora.service.RedisService.bitGetAll( String key )",
        "comment": "",
        "content": "byte[] bitGetAll(String key);",
        "description": "这段代码是一个后端函数，用于获取指定键的所有位信息，并将其以字节数组的形式返回。",
        "label": "JavaMethod"
    },
    {
        "id": 1946,
        "fullName": "com.aurora.strategy.impl.OssUploadStrategyImpl.getFileAccessUrl( String filePath )",
        "comment": "",
        "content": "@Override\n    public String getFileAccessUrl(String filePath) {\n        return ossConfigProperties.getUrl() + filePath;\n    }",
        "description": "该方法用于获取文件在博客系统中的访问URL。",
        "label": "JavaMethod"
    },
    {
        "id": 1947,
        "fullName": "com.aurora.controller.CommentController.getComments( CommentVO commentVO )",
        "comment": "",
        "content": "@ApiOperation(\"获取评论\")\n    @GetMapping(\"\/comments\")\n    public ResultVO<PageResultDTO<CommentDTO>> getComments(CommentVO commentVO) {\n        return ResultVO.ok(commentService.listComments(commentVO));\n    }",
        "description": "这段代码是用于获取评论的接口，根据传入的评论参数返回评论列表的分页结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1948,
        "fullName": "com.aurora.service.JobLogService.cleanJobLogs(  )",
        "comment": "",
        "content": "void cleanJobLogs();",
        "description": "清理作业日志。",
        "label": "JavaMethod"
    },
    {
        "id": 1949,
        "fullName": "com.aurora.mapper.JobMapper.listJobGroups(  )",
        "comment": "",
        "content": "List<String> listJobGroups();",
        "description": "该方法返回一个包含所有作业组名称的字符串列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1950,
        "fullName": "com.aurora.service.ResourceService.saveOrUpdateResource( ResourceVO resourceVO )",
        "comment": "",
        "content": "void saveOrUpdateResource(ResourceVO resourceVO);",
        "description": "这段代码定义了一个函数，用于保存或更新一个资源的视图对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1951,
        "fullName": "com.aurora.service.ArticleService.listArchives(  )",
        "comment": "",
        "content": "PageResultDTO<ArchiveDTO> listArchives();",
        "description": "该方法用于返回存档信息的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1952,
        "fullName": "com.aurora.service.TagService.listTopTenTags(  )",
        "comment": "",
        "content": "List<TagDTO> listTopTenTags();",
        "description": "获取排名前十的标签列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1953,
        "fullName": "com.aurora.service.impl.RedisServiceImpl.hGetAll( String key )",
        "comment": "",
        "content": "@Override\n    public Map hGetAll(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }",
        "description": "该方法实现了根据键获取Redis中哈希数据的所有字段和值。",
        "label": "JavaMethod"
    },
    {
        "id": 1954,
        "fullName": "com.aurora.controller.ArticleController.exportArticles( List<Integer> articleIds )",
        "comment": "",
        "content": "@OptLog(optType = EXPORT)\n    @ApiOperation(value = \"导出文章\")\n    @ApiImplicitParam(name = \"articleIdList\", value = \"文章id\", required = true, dataType = \"List<Integer>\")\n    @PostMapping(\"\/admin\/articles\/export\")\n    public ResultVO<List<String>> exportArticles(@RequestBody List<Integer> articleIds) {\n        return ResultVO.ok(articleService.exportArticles(articleIds));\n    }",
        "description": "这段代码实现了一个后端接口，用于导出文章的功能，需要传入一个文章id列表，返回一个包含文章内容的字符串列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1955,
        "fullName": "com.aurora.util.IpUtil.getUserAgent( HttpServletRequest request )",
        "comment": "",
        "content": "public static UserAgent getUserAgent(HttpServletRequest request) {\n        return UserAgent.parseUserAgentString(request.getHeader(\"User-Agent\"));\n    }",
        "description": "该方法用于从HttpServletRequest中获取User-Agent头部信息，并解析成UserAgent对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1956,
        "fullName": "com.aurora.controller.RoleController.deleteRoles( List<Integer> roleIdList )",
        "comment": "",
        "content": "@OptLog(optType = DELETE)\n    @ApiOperation(value = \"删除角色\")\n    @DeleteMapping(\"\/admin\/roles\")\n    public ResultVO<?> deleteRoles(@RequestBody List<Integer> roleIdList) {\n        roleService.deleteRoles(roleIdList);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于删除角色的后端接口，通过接收一个包含角色ID的列表参数来实现删除操作。在删除角色之后，返回一个成功的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1957,
        "fullName": "com.aurora.config.RabbitMQConfig.bindingEmailDirect(  )",
        "comment": "",
        "content": "@Bean\n    public Binding bindingEmailDirect() {\n        return BindingBuilder.bind(emailQueue()).to(emailExchange());\n    }",
        "description": "使用@Bean注解创建一个绑定，将emailQueue队列与emailExchange交换机绑定在一起。",
        "label": "JavaMethod"
    },
    {
        "id": 1958,
        "fullName": "com.aurora.service.ResourceService.deleteResource( Integer resourceId )",
        "comment": "",
        "content": "void deleteResource(Integer resourceId);",
        "description": "这段代码定义了一个函数，用于删除指定资源的信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1959,
        "fullName": "com.aurora.quartz.AuroraQuartz.saveUniqueView(  )",
        "comment": "",
        "content": "public void saveUniqueView() {\n        Long count = redisService.sSize(UNIQUE_VISITOR);\n        UniqueView uniqueView = UniqueView.builder()\n                .createTime(LocalDateTimeUtil.offset(LocalDateTime.now(), -1, ChronoUnit.DAYS))\n                .viewsCount(Optional.of(count.intValue()).orElse(0))\n                .build();\n        uniqueViewMapper.insert(uniqueView);\n    }",
        "description": "这段代码实现了保存唯一访问者的功能。它通过调用redisService的sSize方法获取唯一访问者的数量，然后创建一个UniqueView对象，并设置其创建时间为当前时间向前推1天，设置访问者数量为获取到的数量（若获取失败则设置为0），最后将这个对象插入到数据库中。",
        "label": "JavaMethod"
    },
    {
        "id": 1960,
        "fullName": "com.aurora.controller.PhotoAlbumController.savePhotoAlbumCover( MultipartFile file )",
        "comment": "",
        "content": "@OptLog(optType = UPLOAD)\n    @ApiOperation(value = \"上传相册封面\")\n    @ApiImplicitParam(name = \"file\", value = \"相册封面\", required = true, dataType = \"MultipartFile\")\n    @PostMapping(\"\/admin\/photos\/albums\/upload\")\n    public ResultVO<String> savePhotoAlbumCover(MultipartFile file) {\n        return ResultVO.ok(uploadStrategyContext.executeUploadStrategy(file, FilePathEnum.PHOTO.getPath()));\n    }",
        "description": "该段代码是一个后端接口，用于上传相册封面图片。使用了@OptLog注解来记录操作日志，@ApiOperation注解来描述接口的功能，@ApiImplicitParam注解来定义接口参数，参数名为file，类型为MultipartFile，表示上传的文件。使用@PostMapping注解来指定接口的请求方式为POST。方法的返回类型为ResultVO<String>，表示返回一个包含上传结果的字符串的响应结果。在方法内部，调用了uploadStrategyContext.executeUploadStrategy()方法来执行上传策略，并传入了文件和文件路径作为参数。",
        "label": "JavaMethod"
    },
    {
        "id": 1961,
        "fullName": "com.aurora.service.impl.UserInfoServiceImpl.updateUserSubscribe( SubscribeVO subscribeVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updateUserSubscribe(SubscribeVO subscribeVO) {\n        UserInfo temp = userInfoMapper.selectOne(new LambdaQueryWrapper<UserInfo>().eq(UserInfo::getId, subscribeVO.getUserId()));\n        if (StringUtils.isEmpty(temp.getEmail())) {\n            throw new BizException(\"邮箱未绑定！\");\n        }\n        UserInfo userInfo = UserInfo.builder()\n                .id(subscribeVO.getUserId())\n                .isSubscribe(subscribeVO.getIsSubscribe())\n                .build();\n        userInfoMapper.updateById(userInfo);\n    }",
        "description": "该代码实现了更新用户订阅状态的功能，先查询用户信息，如果用户的邮箱未绑定则抛出业务异常，然后更新用户的订阅状态。整个操作在事务中执行，如果发生异常则回滚。",
        "label": "JavaMethod"
    },
    {
        "id": 1962,
        "fullName": "com.aurora.controller.PhotoController.listPhotos( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"根据相册id获取照片列表\")\n    @GetMapping(\"\/admin\/photos\")\n    public ResultVO<PageResultDTO<PhotoAdminDTO>> listPhotos(ConditionVO conditionVO) {\n        return ResultVO.ok(photoService.listPhotos(conditionVO));\n    }",
        "description": "根据相册id获取照片列表的接口，返回包含照片信息的结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1963,
        "fullName": "com.aurora.service.ArticleService.deleteArticles( List<Integer> articleIds )",
        "comment": "",
        "content": "void deleteArticles(List<Integer> articleIds);",
        "description": "该方法用于删除一组文章。",
        "label": "JavaMethod"
    },
    {
        "id": 1964,
        "fullName": "com.aurora.controller.JobController.updateJob( JobVO jobVO )",
        "comment": "",
        "content": "@OptLog(optType = UPDATE)\n    @ApiOperation(\"修改定时任务\")\n    @PutMapping(\"\/admin\/jobs\")\n    public ResultVO<?> updateJob(@RequestBody JobVO jobVO) {\n        jobService.updateJob(jobVO);\n        return ResultVO.ok();\n    }",
        "description": "这段代码是一个用于更新定时任务的后端接口，通过接收前端传入的JobVO对象来更新相应的定时任务信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1965,
        "fullName": "com.aurora.service.RedisService.hyperAdd( String key, Object value )",
        "comment": "",
        "content": "Long hyperAdd(String key, Object... value);",
        "description": "这段代码是一个用于将数据添加到指定键的方法，返回一个长整型值。",
        "label": "JavaMethod"
    },
    {
        "id": 1966,
        "fullName": "com.aurora.mapper.ArticleMapper.listTopAndFeaturedArticles(  )",
        "comment": "",
        "content": "List<ArticleCardDTO> listTopAndFeaturedArticles();",
        "description": "该方法返回一个包含置顶和精选文章的文章卡片DTO列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1967,
        "fullName": "com.aurora.handler.ControllerAdviceHandler.errorHandler( MethodArgumentNotValidException e )",
        "comment": "",
        "content": "@ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResultVO<?> errorHandler(MethodArgumentNotValidException e) {\n        return ResultVO.fail(StatusCodeEnum.VALID_ERROR.getCode(), Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());\n    }",
        "description": "这段代码是一个处理MethodArgumentNotValidException异常的方法，返回一个带有错误状态码和错误信息的ResultVO对象。",
        "label": "JavaMethod"
    },
    {
        "id": 1968,
        "fullName": "com.aurora.controller.MenuController.listMenus( ConditionVO conditionVO )",
        "comment": "",
        "content": "@ApiOperation(value = \"查看菜单列表\")\n    @GetMapping(\"\/admin\/menus\")\n    public ResultVO<List<MenuDTO>> listMenus(ConditionVO conditionVO) {\n        return ResultVO.ok(menuService.listMenus(conditionVO));\n    }",
        "description": "该方法用于查看管理员菜单列表，根据条件参数返回菜单列表数据。",
        "label": "JavaMethod"
    },
    {
        "id": 1969,
        "fullName": "com.aurora.service.impl.TokenServiceImpl.renewToken( UserDetailsDTO userDetailsDTO )",
        "comment": "",
        "content": "@Override\n    public void renewToken(UserDetailsDTO userDetailsDTO) {\n        LocalDateTime expireTime = userDetailsDTO.getExpireTime();\n        LocalDateTime currentTime = LocalDateTime.now();\n        if (Duration.between(currentTime, expireTime).toMinutes() <= TWENTY_MINUTES) {\n            refreshToken(userDetailsDTO);\n        }\n    }",
        "description": "这段代码用于在用户凭据即将过期时更新令牌，如果距离过期时间少于20分钟，则刷新令牌。",
        "label": "JavaMethod"
    },
    {
        "id": 1970,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl.listCategoriesBySearch( ConditionVO conditionVO )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public List<CategoryOptionDTO> listCategoriesBySearch(ConditionVO conditionVO) {\n        List<Category> categoryList = categoryMapper.selectList(new LambdaQueryWrapper<Category>()\n                .like(StringUtils.isNotBlank(conditionVO.getKeywords()), Category::getCategoryName, conditionVO.getKeywords())\n                .orderByDesc(Category::getId));\n        return BeanCopyUtil.copyList(categoryList, CategoryOptionDTO.class);\n    }",
        "description": "这段代码实现了根据搜索条件获取分类列表的功能，通过关键字模糊查询分类名称，并按照分类ID倒序排序返回结果。",
        "label": "JavaMethod"
    },
    {
        "id": 1971,
        "fullName": "com.aurora.util.CommonUtil.castList( Object obj, Class<T> clazz )",
        "comment": "",
        "content": "public static <T> List<T> castList(Object obj, Class<T> clazz) {\n        List<T> result = new ArrayList<T>();\n        if (obj instanceof List<?>) {\n            for (Object o : (List<?>) obj) {\n                result.add(clazz.cast(o));\n            }\n            return result;\n        }\n        return result;\n    }",
        "description": "这段代码是一个用于将一个对象转换为指定类型的列表的方法。方法接受两个参数，一个是待转换的对象，另一个是目标类型的Class对象。方法会先创建一个空的List对象用于保存转换后的结果。然后通过判断待转换的对象是否为List类型，如果是则遍历该List中的每个元素，并将其转换为目标类型后添加到结果列表中。最后返回转换后的结果列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1972,
        "fullName": "com.aurora.service.impl.PhotoServiceImpl.updatePhotosAlbum( PhotoVO photoVO )",
        "comment": "",
        "content": "@Transactional(rollbackFor = Exception.class)\n    @Override\n    public void updatePhotosAlbum(PhotoVO photoVO) {\n        List<Photo> photoList = photoVO.getPhotoIds().stream().map(item -> Photo.builder()\n                        .id(item)\n                        .albumId(photoVO.getAlbumId())\n                        .build())\n                .collect(Collectors.toList());\n        this.updateBatchById(photoList);\n    }",
        "description": "该方法用于更新相册中的照片信息，根据传入的参数 PhotoVO 对象更新相应的相册。@Transactional 注解表示在方法执行过程中会开启事务，并在遇到异常时进行回滚操作。",
        "label": "JavaMethod"
    },
    {
        "id": 1973,
        "fullName": "com.aurora.service.impl.AuroraInfoServiceImpl.getWebsiteConfig(  )",
        "comment": "",
        "content": "@Override\n    public WebsiteConfigDTO getWebsiteConfig() {\n        WebsiteConfigDTO websiteConfigDTO;\n        Object websiteConfig = redisService.get(WEBSITE_CONFIG);\n        if (Objects.nonNull(websiteConfig)) {\n            websiteConfigDTO = JSON.parseObject(websiteConfig.toString(), WebsiteConfigDTO.class);\n        } else {\n            String config = websiteConfigMapper.selectById(DEFAULT_CONFIG_ID).getConfig();\n            websiteConfigDTO = JSON.parseObject(config, WebsiteConfigDTO.class);\n            redisService.set(WEBSITE_CONFIG, config);\n        }\n        return websiteConfigDTO;\n    }",
        "description": "这段代码实现了获取博客系统的网站配置信息的功能，首先尝试从Redis缓存中获取配置信息，如果缓存中不存在则从数据库中获取默认配置信息并存入缓存。",
        "label": "JavaMethod"
    },
    {
        "id": 1974,
        "fullName": "com.aurora.model.vo.ResultVO.fail( Integer code, String message )",
        "comment": "",
        "content": "public static <T> ResultVO<T> fail(Integer code, String message) {\n        return resultVO(false, code, message, null);\n    }",
        "description": "这段代码是一个静态方法，用于返回一个表示操作失败的ResultVO对象，包含错误代码和错误信息。",
        "label": "JavaMethod"
    },
    {
        "id": 1975,
        "fullName": "com.aurora.service.ArticleService.listArticlesByCategoryId( Integer categoryId )",
        "comment": "",
        "content": "PageResultDTO<ArticleCardDTO> listArticlesByCategoryId(Integer categoryId);",
        "description": "根据分类ID列出文章卡片DTO的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1976,
        "fullName": "com.aurora.service.RedisService.sMembers( String key )",
        "comment": "",
        "content": "Set<Object> sMembers(String key);",
        "description": "该方法用于获取指定键的集合类型数据的所有成员。",
        "label": "JavaMethod"
    },
    {
        "id": 1977,
        "fullName": "com.aurora.service.UserAuthService.listUserAreas( ConditionVO conditionVO )",
        "comment": "",
        "content": "List<UserAreaDTO> listUserAreas(ConditionVO conditionVO);",
        "description": "这段代码是用于根据给定条件VO获取用户区域DTO列表的方法。",
        "label": "JavaMethod"
    },
    {
        "id": 1978,
        "fullName": "com.aurora.service.UniqueViewService.listUniqueViews(  )",
        "comment": "",
        "content": "List<UniqueViewDTO> listUniqueViews();",
        "description": "返回一个包含唯一访客信息的列表。",
        "label": "JavaMethod"
    },
    {
        "id": 1979,
        "fullName": "com.aurora.service.impl.PhotoAlbumServiceImpl.deletePhotoAlbumById( Integer albumId )",
        "comment": "",
        "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public void deletePhotoAlbumById(Integer albumId) {\n        Integer count = photoMapper.selectCount(new LambdaQueryWrapper<Photo>()\n                .eq(Photo::getAlbumId, albumId));\n        if (count > 0) {\n            photoAlbumMapper.updateById(PhotoAlbum.builder()\n                    .id(albumId)\n                    .isDelete(TRUE)\n                    .build());\n            photoMapper.update(new Photo(), new LambdaUpdateWrapper<Photo>()\n                    .set(Photo::getIsDelete, TRUE)\n                    .eq(Photo::getAlbumId, albumId));\n        } else {\n            photoAlbumMapper.deleteById(albumId);\n        }\n    }",
        "description": "这段代码实现了通过相册ID删除相册的功能。首先查询相册下是否有照片，如果有则将相册标记为已删除，并将相册下的照片也标记为已删除；如果没有照片，则直接删除相册。同时使用事务保证操作的原子性。",
        "label": "JavaMethod"
    },
    {
        "id": 1980,
        "fullName": "com.aurora.service.PhotoAlbumService.listPhotoAlbumsAdmin( ConditionVO condition )",
        "comment": "",
        "content": "PageResultDTO<PhotoAlbumAdminDTO> listPhotoAlbumsAdmin(ConditionVO condition);",
        "description": "该方法用于根据给定条件返回相册管理的页面结果DTO。",
        "label": "JavaMethod"
    },
    {
        "id": 1981,
        "fullName": "com.aurora.service.impl.UserDetailServiceImpl.loadUserByUsername( String username )",
        "comment": "",
        "content": "@SneakyThrows\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        if (StringUtils.isBlank(username)) {\n            throw new BizException(\"用户名不能为空!\");\n        }\n        UserAuth userAuth = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuth>()\n                .select(UserAuth::getId, UserAuth::getUserInfoId, UserAuth::getUsername, UserAuth::getPassword, UserAuth::getLoginType)\n                .eq(UserAuth::getUsername, username));\n        if (Objects.isNull(userAuth)) {\n            throw new BizException(\"用户不存在!\");\n        }\n        return convertUserDetail(userAuth, request);\n    }",
        "description": "这段代码实现了根据用户名加载用户信息的功能，如果用户名为空则抛出异常，通过用户名查询数据库获取用户信息，如果用户不存在则抛出异常。最终返回用户详情。",
        "label": "JavaMethod"
    },
    {
        "id": 1982,
        "fullName": "com.aurora.service.impl.CategoryServiceImpl.listCategories(  )",
        "comment": "",
        "content": "@Override\n    public List<CategoryDTO> listCategories() {\n        return categoryMapper.listCategories();\n    }",
        "description": "该方法重写了接口中的方法，用于获取博客系统中所有分类的信息并返回一个包含CategoryDTO对象的列表。",
        "label": "JavaMethod"
    }
]